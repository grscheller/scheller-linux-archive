Notes taken while configuring Arch Linux for Python development.

2022-01-27:

  I really need to better grok Python virtual environments.

    $ pacman -Ss virtualenv
    extra/python-virtualenv 20.11.0-1
        Virtual Python Environment builder
    community/python-pipenv 2022.1.8-2
        Sacred Marriage of Pipfile, Pip, & Virtualenv.
    community/python-pytest-virtualenv 1.7.0-8
        Virtualenv fixture for py.test
    community/python-selinux 0.2.1-7
        Pure-python selinux shim module for use in virtualenvs
    community/python-tox 3.24.5-1
        Python virtualenv management and testing tool
    community/python-virtualenv-clone 0.5.7-3
        A script for cloning a non-relocatable virtualenv.
    community/python-virtualenvwrapper 4.8.4-6
        Extensions to Ian Bicking's virtualenv tool

  I had remembered pipenv but had fotgotten its name.  Totally
  bootstrapping from user land, I would need the following

    $ pacman -Ss pipx
    community/python-pipx 0.16.4-2
        Install and Run Python Applications in Isolated Environments

  but since I can install pipenv with pacman into the system Python
  environment, and I don't intend to hop between different installed
  Python versions, I think just installing pipenv package should be
  enough.

  Here is what I got installed on Arch,

    $ python --version
    Python 3.10.2

    $ pip --version
    pip 20.3.4 from /usr/lib/python3.10/site-packages/pip (python 3.10)

    $ pip3 --version
    pip 20.3.4 from /usr/lib/python3.10/site-packages/pip (python 3.10)

    $ pip3.10 --version
    pip 20.3.4 from /usr/lib/python3.10/site-packages/pip (python 3.10)

  Let's see where Python will look for user stuff,

    $ python -m site --user-base
    /home/grs/.local

    $ python -m site --user-site
    /home/grs/.local/lib/python3.10/site-packages

  Installing pipenv system wide.

    $ sudo pacman -Syu python-pipenv
    ...
    Packages (8) python-certifi-2021.10.8-3  python-filelock-3.4.0-3
      python-importlib-metadata-4.8.1-3  python-platformdirs-2.4.1-1
      python-virtualenv-20.11.0-1  python-virtualenv-clone-0.5.7-3
      python-zipp-3.7.0-1  python-pipenv-2022.1.8-2

  Thought it would install Python Virtualenv as a dependency.

2022-01-27:

  While I am at it, I might as well look into the capability of
  installing and switching between multiple verions of Python.

    $ pacman -Ss pyenv
    community/pyenv 2.2.4-1
        Easily switch between multiple versions of Python

    $ pacman -Qlq pyenv|grep '^/usr/bin/..*'
    /usr/bin/pyenv
    /usr/bin/pyenv-install
    /usr/bin/pyenv-uninstall
    /usr/bin/python-build

  These look to be Bash scripts.  Does have fish, and zsh, support.

    $ pacman -Qlq pyenv|grep fish
    /usr/share/fish/
    /usr/share/fish/vendor_completions.d/
    /usr/share/fish/vendor_completions.d/pyenv.fish

2022-01-28:

  There exists a pyenv extension called pyenv-virtualenv for working
  with virtualenv with pyenv.  Does not seem to be a package for
  this in the regular Arch Repos.

  The Github pyenv repo

    https://github.com/pyenv/pyenv-install

  states "Of course, you can create virtualenv yourself, or
  pyenv-virtualenv to automate the process."  I am choosing
  to manage my virtual environments myself with pipenv.

  Another good pyenv resource is the website
  "Pipenv: Python Dev Workflow for Humans"

    https://pipenv.pypa.io/en/latest/

  I intend to establish a coherent Python environment with the
  system pyenv and manage the individual virtual environments
  with that Python's pipenv.

2022-01-28:

  Pipenv documentation resides here,

    https://pipenv.pypa.io/en/latest/

  on the Python Packaging Authority website.

  Quoted material below is pulled verbatim from above documentation.

  Pipenv "automatically creates and manages a virtualenv for your
  projects, as well as adds/removes packages from your Pipfile as
  you install/uninstall packages. It also generates the ever-important
  Pipfile.lock, which is used to produce deterministic builds."

  Pipfile vs. setup.py.  Hopefully, I won't have to bother grokking
  how to use setuptools directly.

    $ pacman -Ss python-setuptools\$
    extra/python-setuptools 1:59.1.1-1 [installed]
        Easily download, build, install, upgrade, and uninstall Python packages

    $ pactree -r python-setuptools
    python-setuptools
    ├─python-distro
    │ └─python-pip
    │   └─python-pipenv
    └─python-pip

2022-01-28:

  Updated my fish and bash environments for pyenv.  See my commit
  dated Fri Jan 28 16:39:42 2022 -0700 on my dotfiles repo

    https://github.com/grscheller/dotfiles

  Seems to work on both Arch Linux and MacOS.  Actually I didn't remember
  installing pyenv on my iMac and could not test how startup scripts behaved
  when pyenv not installed.  Pyenv configured and installed on euler7.
  Will test on gauss17 where I have not installed pyenv yet.

  On euler7:

    # pyenv install 3.11-dev
    Cloning https://github.com/python/Python-3.11-dev
    Installing to /home/grs/.pyenv/versions/3.11-dev

    $ pyenv versions
    * system (set by /home/grs/.pyenv/version)
      3.11-dev

    $ pyenv version
    system (set by /home/grs/.pyenv/version)

    $ pyenv --version
    pyenv 2.2.4

  Here is what one of the shims looks like

    $ cat .pyenv/shims/pip
    #!/usr/bin/env bash
    set -e
    [ -n "$PYENV_DEBUG" ] && set -x

    program="${0##*/}"

    export PYENV_ROOT="/home/grs/.pyenv"
    exec "/usr/share/pyenv/libexec/pyenv" exec "$program" "$@"

2022-01-29:

  Installed pyenv on gauss17 also.

  On euler7:

    Bootstrapped pyenv config by createing empty ~/.pyenv
    directory and relogged in.  (Arch Linux)

  On sc31:

    I seemed to have had already had pyenv installed via
    brew and when I pushed my shell environment over, pyenv
    configured itself. (MacOS)

    I noticed that on iMac alot of the base directory files
    from the Pyenv Github repo got installed in ~/.pyenv/,
    did brew clone the Github repo?

  On gauss17:

    Bootstrapped pyenv via a terminal session,

      $ eval pyenv init - fish | source

    This did exactly the same as on euler7,

       $ ls -A ~/.pyenv/*
       /home/grs/.pyenv/shims:

       /home/grs/.pyenv/versions:

     No Github clutter.

2022-01-29:

  Why is ~/.pyenv/shims/ empty on gauss17?  Only thing different I
  really did was installed Python 3.11-dev.

  To list all versions of "things" that Pyenv can install

    $ pyenv install --list

  Which one do I want to install?  Hmmm...

  Aside:

    Since I am doing a Django project, lets go with some older
    Python version supported by whatever verson of Django is
    installed by Pacman.

      $ pacman -Qs django
      local/python-django 3.2.10-1
          A high-level Python Web framework that encourages rapid
          development and clean design

    Django release schedule,

    Series   Release/Date   End support       End extended support
    2.2 LTS  2.2.26         December 2, 2019  April 2022
    3.2 LTS  3.2.11         December 2021     April 2024
    4.0      4.0.1          August 2022       April 2023
    4.1      August 2022    April 2023        December 2023
    4.2 LTS  April 2023     December 2023     April 2026
    5.0      December 2023  August 2024       April 2025

    Django 3.2 supports Python 3.6, 3.7, 3.8, 3.9, and 3.10 (as of 3.2.9)
    Django 4.0 supports Python 3.8, 3.9, and 3.10

    Also, Django website: https://www.djangoproject.com/ states

        "We highly recommend and only officially
         support the latest release of each series"

    I going to see if I can build my project in three configurations

      * Django 3.2 LTS using Python 3.8.12
      * Django 4.0 using Python 3.10.2 (Update when 4.2 LTS available)
      * System Django & Python, currently 3.2.10 and 3.10.2 respectively

    The last one will "roll" with Arch Linux.

  Ok, I will install Python 3.8.12 and 3.10.2 via pyenv.

    $ pyenv install 3.8.12
    $ pyenv install 3.10.2

    $ pyenv versions
    * system (set by /home/grs/.pyenv/version)
      3.10.2
      3.8.12
    
2022-01-31:

  Will need to understand how to use virtualenv and how it interacts
  with pyenv.

    $ digpath pip
    /home/grs/.pyenv/shims/pip
    /usr/bin/pip

  We find pip's shim first, which should currently point to the
  system's pip.

    $ pip --version
    pip 20.3.4 from /usr/lib/python3.10/site-packages/pip (python 3.10)
    
    $ /usr/bin/pip --version
    pip 20.3.4 from /usr/lib/python3.10/site-packages/pip (python 3.10)

    $ pyenv whence pip
    3.10.2
    3.8.12

    $ pyenv which pip
    /usr/bin/pip

  Let's do the same for virtualenv, note: I have not installed the
  pyenv-virtualenv plugin to pyenv since I want to use pipenv.

    $ digpath virtualenv
    /usr/bin/virtualenv

    $ pyenv whence virtualenv

    $ pyenv which virtualenv
    /usr/bin/virtualenv

  As well as for pipenv.

    $ digpath pipenv
    /usr/bin/pipenv

    $ pyenv whence pipenv

    $ pyenv which pipenv
    /usr/bin/pipenv

  Nobody home for pipenv and virtualenv for the pyenv locally installed
  Python versions.  I guess I will need to install pipenv, probably the
  only thing for which I will use pip directly. 

2022-01-31:

  Here are two fairly recent blog posts which describe how to use
  Pyenv and Pipenv together:

    https://www.rootstrap.com/blog/how-to-manage-your-python-projects-with-pipenv-pyenv/
    https://hackernoon.com/reaching-python-development-nirvana-bb5692adf30c

  The Pipenv site also has information on Pyenv:

    https://pipenv.pypa.io/en/latest/
    https://pipenv.pypa.io/en/latest/advanced/

  This is a big change from 5 months ago when I was going in circles
  with Pipenv, Pipfile, and setup.py.

  Note to self: learn distinction between

    Pipfile & Pipfile.lock vs. setup.py

  The first two lock down a build while the later one puts
  constraints on library dependencies.  The first two replace
  the old requirements.txt mechanism.

2022-02-14:

  Look into HallerPatrick/py_lsp.nvim.  Might be useful if it
  turns out that LSP has trouble distinguishing the environment
  of the Python running in nvim vs virtual environment of the
  code being editted.

  I would like to keep my Python virtual environments as lean
  as possible and not have to install pynvim and pipenv into
  every one of them.

2022-02-15:

  Beginning to understand that pipenv is not a pip replacement and
  pip still has its use case.

  Pipenv manages a software project with a virtual enviroment.
  Pip manages an installed Python environment.  Pipenv will
  use pip under the hood to manage the virtual environment.

  I still use pip to manage the Python environments I install
  with pyenv.

  Here is an example workflow.  In my Neovim init.lua configs I set

    vim.g.python3_host_prog = os.getenv("HOME") .. '/.pyenv/shims/python'

  install a version of Python

    $ pyenv install 3.9.7
    $ pyenv global 3.9.7
    $ PIP_REQUIRE_VIRTUALENV=false pip install pip --upgrade
    $ PIP_REQUIRE_VIRTUALENV=false pip install pipenv
    $ PIP_REQUIRE_VIRTUALENV=false pip install pynvim
    $ pyenv global system

  initialize a new project and associaed virtual environment

    $ mkdir junk; cd junk
    $ pyenv local 3.9.7  # pipenv will do below without this
    $ pipenv --python 3.9.7
    Creating a virtualenv for this project...
    Pipfile: /home/grs/junk/Pipfile
    Using /home/grs/.pyenv/versions/3.9.7/bin/python3.9 (3.9.7) to create virtualenv...
    ⠸ Creating virtual environment...created virtual environment CPython3.9.7.final.0-64 in 146ms
      creator CPython3Posix(dest=/home/grs/.local/share/virtualenvs/junk-Jrpe9XOJ, clear=False, no_vcs_ignore=False, global=False)
      seeder FromAppData(download=False, pip=bundle, setuptools=bundle, wheel=bundle, via=copy, app_data_dir=/home/grs/.local/share/virtualenv)
        added seed packages: pip==21.3.1, setuptools==60.1.0, wheel==0.37.1
      activators BashActivator,CShellActivator,FishActivator,NushellActivator,PowerShellActivator,PythonActivator

  and switch to it

    $ pipenv shell
    Launching subshell in virtual environment...
     source /home/grs/.local/share/virtualenvs/junk-Jrpe9XOJ/bin/activate.fish
    (junk)$ ls
    Pipfile
    (junk)$ cat Pipfile
    [source]]
    url = "https://pypi.org/simple"
    verify_ssl = true
    name = "pypi"
    
    [packages]
    
    [dev-packages]
    
    [requires]
    python_version = "3.9"
    (junk)$ python --version
    Python 3.9.7

  I beleive (need to verify) that nvim itself will still use the same
  version of Python used in the virtual environment, but run outside it.

  At least :checkhealth is OK.  Also python run against the virtual
  environment cannot import pynvim; while run against the underlying
  3.9.7 environment can.

  To cleanup when done,

    (junk)$ exit
    $ pipenv --rm
    Removing virtualenv (/home/grs/.local/share/virtualenvs/junk-Jrpe9XOJ)...
    $ cd ..
    $ rm -rf junk/
