Purpose: To rebuild from scratch maxwell4 after
         it crashed.  Named after Leonard Euler's
         solution to the KÃ¶nigsberg Bridge Problem.

2021-12-04:
  Installing Arch Linux on a Dell Inspiron 15 7591 2-in-1
    - 4 core i7-10510U CPU 1.8 GHz
    - 16 GB memory
    - Realtek Audio
    - UEFI system
    - Intel(R) UHD Graphics
    - NVIDIA GeForce MX250 Graphics

  Downloaded latest ISO image on gauss17 from

    https://archlinux.org/download/

  should have 

    MD5:  c8beaaea6dd5986d36dd532d1df4dc26
    SHA1: e303b93788220dbe8e0ba1804c90beebe432cf63

  With Firefox browser, I downloaded from the link
  
    https://mirror.rackspace.com/archlinux/iso/2021.12.01/
    
  the files

    archlinux-2021.12.01-x86_64.iso
    archlinux-2021.12.01-x86_64.iso.sig

  Test validity,

    $ pacman-key -v archlinux-2021.12.01-x86_64.iso.sig archlinux-2021.12.01-x86_64.iso
    ==> Checking archlinux-2021.12.01-x86_64.iso.sig... (detached)
    gpg: Signature made Wed 01 Dec 2021 07:45:16 AM MST
    gpg:                using RSA key 4AA4767BBC9C4B1D18AE28B77F2D434B9741E8AC
    gpg:                issuer "pierre@archlinux.de"
    gpg: Note: trustdb not writable
    gpg: Good signature from "Pierre Schmitz <pierre@archlinux.de>" [full]

  Compare checksums from https://archlinux.org/download/

    $ md5sum archlinux-2021.12.01-x86_64.iso
    c8beaaea6dd5986d36dd532d1df4dc26  archlinux-2021.12.01-x86_64.iso

    $ sha1sum  archlinux-2021.12.01-x86_64.iso
    e303b93788220dbe8e0ba1804c90beebe432cf63  archlinux-2021.12.01-x86_64.iso

  Got valid and the correct files.  Due diligence done!

  Put a previous thumbdrive in, last month's arch iso got "automounted"
  so un-mount it

    $ sudo umount /run/media/grs/ARCH_202111

  Image thumbdrive.

    $ sudo dd bs=4M if=archlinux-2021.12.01-x86_64.iso of=/dev/sdd
    212+1 records in
    212+1 records out
    891629568 bytes (892 MB, 850 MiB) copied, 175.509 s, 5.1 MB/s

    $ ls -l archlinux-2021.12.01-x86_64.iso
    -rw-r--r-- 1 grs grs 891629568 Dec  4 15:25 archlinux-2021.12.01-x86_64.iso

  Remove and reinsert thumbdrive.

    $ df -h
    Filesystem  Size  Used Aval Use% Mounted on
    ...
    /dev/sdd1   776M  776M    0 100% /run/media/grs/60...

  Boot what is left of maxwell4 from the thumbdrive.
  Hit <F12> on this to Dell "One-Time Boot Setting" and
  boot from "UEFI TOSHIBA" (with USB icon):

  Now at the archiso root prompt.

2021-12-04:

  The lsblk command is still showing all the nvme
  drives I created for maxwell4.  I ran fsck against

    /dev/nvme0n1p3 (/ for maxwell4)
    /dev/nvme1n1p1 (/home for maxwell4)
    /dev/nvme0n1p1 (/boot for maxwell4)

  For the last one it said only minor difference
  between primary & backup block (I forget exact
  terminology) and offered to swap in backup for
  primary.  I did so and wrote changes.

  Still broken when I tried to reboot.

2021-12-04:

  Back at the archiso root prompt.

    # iwctl device list

  One wireless device, wlan0 in station mode.

    # iwctl station wlan0 scan
    # iwctl station wlan0 get-networks
    # iwctl --passphrase <pass phrase> station wlan0 connect <SSID>

  Able to ping 1.1.1.1 and archlinux.org.  The getent command unable
  to resolve DNS for IPv4.  Don't worry about this for now.

  Next step, sync with time servers

    # timedatectl set-ntp true

  Look at what is already there

    # lsblk
    Name         MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT
    loop0          7:0    0 701.3M  1 loop /run/archiso/airootfs
    sda            8:0    1  14.9G  0 disk
      sda1         8:1    1   776M  0 part /run/archiso/bootmnt
      sda2         8:2    1    74M  0 part
    nvme0n1      259:0    0 476.9G  0 disk
      nvme0n1p1  259:1    0   512M  0 part
      nvme0n1p2  259:2    0  16.1G  0 part
      nvme0n1p3  259:3    0 450.3G  0 part
    nvme1n1      259:4    0  27.3G  0 disk
      nvme0n1p1  259:5    0  27.2G  0 part

  Good, no RAID things are there.  I'll keep the partitions,
  but will redo the file systems.

  Intended disk layout:
  
    /dev/nvme0n1p1    /boot  (fat32)
    /dev/nvme0n1p2    swap
    /dev/nvme0n1p3    /      (ext4)
    /dev/nvme1n1p1    /home  (ext4)

  Do I try and fix what I got or reinstall from scratch?
  Reinstall...

    # mkfs.fat -F 32 /dev/nvme0n1p1
    # mkfs.ext4 /dev/nvme0n1p3
    # mkfs.ext4 /dev/nvme1n1p1

    # mount /dev/nvme0n1p3 /mnt
    # mkdir /mnt/home
    # mount /dev/nvme1n1p1 /mnt/home
    # mkdir /mnt/boot
    # mount /dev/nvme0n1p1 /mnt/boot
    # mkswap /dev/nvme0n1p2
    # swapon /dev/nvme0n1p2

  Note: When I did the mkswap, I Got

    warning: wiping old swsuspend signature.

  I had just configured maxwell4 to suspend/hibernate
  and had confirmed I could trigger such.  Maybe things
  didn't work out when system tried on its own?  I had
  left the system unattended for a while.  I had it
  unplugged for a while, but I think it went south a
  while after plugging it back in.

  This time I won't set up suspend/hibernate features.

  Went to use reflector, but found that the reflector
  service was run and configured /etc/pacman.d/mirrorlist.
  The reflector service and timer are currently inactive.
  The service is enabled (runs on boot) but the timer
  is disabled.  (That is for the OS running on the ISO).
  
  Install essential packages to target system,

    # pacstrap /mnt base linux linux-firmware

  Note (From Arch wiki install guide):
    - linux can be substituted for another kernel package
    - linux omitted entirely if installed into a container
    - linux-firmware can be omitted if installed into either
      a container or virtual machine

  Configure /etc/fstab

    # genfstab -U /mnt >> /mnt/etc/fstab
 
  Chroot into the target system.

    # arch-chroot /mnt

  Configure time zone.

    # ln -sf /usr/share/zoneinfo/America/Denver /etc/localtime
    # hwclock --systohc

  No editor, install nvim.

    # pacman -Syu neovim

  Localization, uncommented en_US.UTF-8 UTF-8 in
  /etc/locale.gen

    # locale-gen

  Create /etc/locale.conf with contents

    LANG=en_US.UTF-8

  Give target system a hostname, create /etc/hostname
  with contents

    euler7

  Give root a password

    # passwd

  Need to install some networking related packages,

    # pacman -Syu iwd systemd-resolvconf modemmanager
    # ln -sf /run/systemd/resolve/stub-resolve.conf /etc/resolve.conf
    ln: '/run/systemd/resolve/stub-resolve.conf' and '/etc/resolv.conf' are the same file
    
  Opps, something has changed from last month.

    # ls -i /run/systemd/resolve/stub-resolv.conf /etc/resolv.conf
    2617 /etc/resolve.conf  2617 /run/systemd/resolve/stub-resolv.conf

  Hard linked!

    # systemctl is-enabled systemd-resolved
    disabled
    # systemctl enable systemd-resolved

  I will use the systemd boot loader

    # bootctl install
    Created "/boot/EFI"
    Created "/boot/EFI/systemd"
    Created "/boot/EFI/BOOT"
    Created "/boot/loader"
    Created "/boot/loader/entries"
    Created "/boot/EFI/Linux"
    Copied "/usr/lib/systemd/boot/efi/systemd-bootx64.efi" \
              to "/boot/EFI/systemd/systemd-bootx64.efi".
    Copied "/usr/lib/systemd/boot/efi/systemd-bootx64.efi" \
              to "/boot/EFI/BOOT/BOOTX64.EFI".
    Created "/boot/987dc5a567e54739920b683cb519cf9f".
    Random seed file /boot/loader/random-seed successfully written (512 bytes).
    Created EFI boot entry "Linux Boot Manager".

  Lets see if what we currently have even boots.  It created
  a loader.conf and no entries/*.conf.  My guess it will give
  me a boot menu with no choices except for the firmware.

    # ^D
    # systemctl poweroff

  It did exactly what I predicted!  Instead of just parroting
  what I did for gauss17 and the limited example given
  in Systemd-boot ArchWiki, I will read through the 
  loader.conf(5) man page first.

2021-12-05:

  Configure systemd boot loader via the examples
  from /usr/share/systemd/bootctl.  Note that as before
  with maxwell4, I had to go with the Unix device name.

  I think this is due to some sort of udev race condition.

  Modified /boot/loader/loader.conf

    default arch
    timeout 5
    console-mode auto
    editor false

  Created /boot/loader/entries/arch.conf

    title Arch Linux
    linux /vmlinuz-linux
    initrd /initrsmfs-linux.img
    options root=/dev/nvme0n1p3 rootfstype=ext4 add-efi-memmap

  Will need to install Intel firmware package later.

  Powerdown, reboot.  Does not mater if thumbdrive stays
  in since you would need to hit <F12> to be able to boot
  from it.

2021-12-05:

  Sucessfully booted euler7 and logged in as root.

  Need to connect to wifi so I can use pacman.  See
  if systemd-resolved is running.

    # systemctl status systemd-resolved
  
  Yes it is.  But a symlink or funky hard link not there

    # ls -li /etc/resolv.conf 
    14417959 -rw-r--r-- 1 root root 65 Nov 11 02:14 /etc/resolv.conf

    # ls -li /run/systemd/resolve/stub-resolv.conf
    736 -rw-r--r-- 1 sysemd-resolve sysemd-resolve 920 Dec  5 16:13 /run/systemd/resolve/stub-resolv.conf

  Create link

    # ln -sf /run/systemd/resolve/stub-resolv.conf /etc/resolv.conf

  Check wireless.

    # ip addr
    ...
    2: wlan0: <BROADCAST,MULTICAST> mtu 1500 qdisc noop state DOWN group default qlen 1000
        link/either ...

  Bring it up.

  ...

  A lot of network thrashing .... will update log on this
  later when I can do so from euler7 directly.

2021-12-05:

  I have DNS for IPv6 working but not for IPv4.  Pacman works.

  Turning on Systemd's NTP service.

    # timedatectl set-ntp true

  Install GIT, fish, man

    # pacman -Syu git
    # pacman -Syu fish
    # pacman -Syu man-pages man-db

  Create regular user

    # useradd -d /home/grs -c Geoffrey -G wheel -s /usr/bin/fish -m grs
    # passwd grs

  Let's give root's bash environment a little love.

  For root's .bashrc:

    set -o vi
    export EDITOR=nvim
    export PAGER='nvim -R'
    export MANPAGER='nvim +Man!'

  For root's .bash_profile:

    [[ -f ~/.bashrc ]] && source ~/.bashrc

  Set up user grs global git environment.

    $ git config --global user.name grscheller
    $ git config --global user.email geoffrey@scheller.com
    $ git config --global core.editor nvim
    $ git config --global core.pager "nvim -R"
    $ git config --global pull.rebase false
    $ git config --global color.pager no

  Last one "no" because I want neovim to do the coloring.

  Install OpenSSH.

    # pacman -Syu OpenSSH

  Updated /etc/ssh/sshd_config for no root logins,
  port 22 and passwd authentication for now.

  Successfully ssh to euler7.

    ~> mkdir .ssh
    ~> chmod 700 .ssh
    
  Generated ssh keys for euler7.  Removed maxwell4 keys from
  ~/.ssh/authorized_keys and add euler7 keys.  Sync'ed
  versions between euler7 and gauss17.

  Added euler7 ssh key to GitHub account.  Removed maxwell4 key.

2021-12-06:

  It is not Unix until it has a C compiler installed.

    # pacman -Syu base-devel
    # pacman -Syu clang

2021-12-06:

  I got networking and name resolution "working" but not optimally.
  
  Created /etc/iwd/main.conf with the following contents:

    # Created by Geoffrey Scheller
    # From multiple web postings
    #
    # See https://iwd.wiki.kernel.org/interface_lifecycle
    #     https://insanity.industries/post/simple-networking
    #
    # We want idw to take full control of the underlying phy device
    
    [General]
    # Enable builtin DHCP-client within iwd for wifi
    EnableNetworkConfiguration=true
    
    # Radomize mac-address when iwd starts or hardware detected
    #AddressRandomization=once
    
    [Network]
    #EnableIPv6=true
    #EnableIPv4=true
    
    # For pure systemd-resolved choose
    #NameResolvingService=systemd
    
    # For systemd-resolved+systemd-resolvconf or openresolv
    NameResolvingService=resolvconf

  From the command

    # systemctl --type=service --state=running

  the following network support services are running.

    iwd.service                Wireless service
    systend-networkd.service   Network Configuration
    systend-resolved.service   Network Name Resolution

  At this point, I was resolving IPv6 names reliably but IPv4
  names were only occasionally being resolved.  So I "kicked"
  the networkd service

    # systemctl restart systemd-networkd

  while following the system logs with "journelctl -f".

  From 

    # journelctl -b -1

  this is what I saw in real time on my apartment wifi network.

 1  :57 systemd[1]: systemd-networkd.service: Deactivated successfully.
 2  :57 systemd[1]: Stopped Network Configuration.
 3  :57 systemd[1]: Starting Network Configuration...
 4  :57 systemd-networkd[1207]: /etc/systemd/networkd.conf:27: Unknown key name 'UseDomains' in section 'DHCPv4', ignoring.
 5  :57 systemd-networkd[1207]: /etc/systemd/networkd.conf:34: Unknown section 'IPv6AcceptRA'. Ignoring.
 6  :57 systemd-networkd[1207]: wlan0: Link UP
 7  :57 systemd-networkd[1207]: wlan0: Gained carrier
 8  :57 systemd-networkd[1207]: lo: Link UP
 9  :57 systemd-networkd[1207]: lo: Gained carrier
10  :57 systemd-networkd[1207]: Enumeration completed
11  :57 systemd[1]: Started Network Configuration.
12  :57 systemd-networkd[1207]: wlan0: Connected WiFi access point: singlewhip650 (9c:c9:eb:54:5f:77)
...
15  :28 systemd-resolved[347]: Switching to fallback DNS server 1.1.1.1#cloudflare-dns.com.

  Lines 4 & 5 are are a misguided attempt on my part to fix the IPv4
  problem.  I'll remove these from networkd.conf.  At the time
  I thought IPv4 was not resolving at all.

  Lines 6 to 12 show that systemd-networkd is driving the wlan0 file
  level interface.  My guess is that iwd controls the underlying phy
  kernel device.

  Line 15 shows all may not be well and we are falling over to the
  first fallback DNS server.

  On the last boot at work I did not have this problem

    $ journalctl -b | grep systemd-networkd | fields 5 6 7 8
    ...
    systemd-networkd[301]: lo: Link UP
    systemd-networkd[301]: lo: Gained carrier
    systemd-networkd[301]: Enumeration completed
    systemd-networkd[301]: wlan0: Link UP
    systemd-networkd[301]: wlan0: Connected WiFi
    systemd-networkd[301]: wlan0: Gained carrier

2021-12-06:

  I found a new toy.

    $ ls -l /usr/bin/resolv*
    lrwxrwxrwx 1 root root     10 Nov 29 06:42 /usr/bin/resolvconf -> resolvectl
    -rwxr-xr-x 1 root root 129088 Nov 29 06:42 /usr/bin/resolvectl

    $ resolvectl status
    Global
               Protocols: +LLMNR +mDNS -DNSOverTLS DNSSEC=no/unsupported
        resolv.conf mode: stub
    Fallback DNS Servers: 1.1.1.1#cloudflare-dns.com 9.9.9.10#dns.quad9.net 8.8.8.8#dns.google
                          2606:4700:4700::1111#cloudflare-dns.com 2620:fe::10#dns.quad9.net
                          2001:4860:4860::8888#dns.google
    
    Link 3 (wlan0)
        Current Scopes: DNS LLMNR/IPv4
             Protocols: +DefaultRoute +LLMNR -mDNS -DNSOverTLS DNSSEC=no/unsupported
    Current DNS Server: 1.1.1.1
           DNS Servers: 1.1.1.1 1.1.0.0


    $ resolvectl query github.com
    github.com: 140.82.112.3                       -- link: wlan0
    
    -- Information acquired via protocol DNS in 19.7ms.
    -- Data is authenticated: no; Data was acquired via local or encrypted transport: no
    -- Data from: network
    
    $ resolvectl query gitlab.com
    gitlab.com: 172.65.251.78                      -- link: wlan0
                2606:4700:90:0:f22e:fbec:5bed:a9b9 -- link: wlan0
    
    -- Information acquired via protocol DNS in 19.6ms.
    -- Data is authenticated: no; Data was acquired via local or encrypted transport: no
    -- Data from: network

    $ pacman -Qo /usr/bin/resolvectl
    /usr/bin/resolvectl is owned by systemd 249.7-2

2021-12-07:

  Used visudo to edit /etc/sudoers as root.
  
   - allow members of wheel to execute commands as root w/o pw
   - set secure_path="/usr/local/bin:/usr/bin"
   - did NOT reset $HOME to user's home directory
   - did NOT configure to use users X GUI environment

  Basically I am not letting user GUI tools to run as root and
  making it harder for user to be fooled by a Trojan horse.

  Also, certain environment variables like $EDITOR now will
  not get picked up, so a few more things will actually
  have to be done as root.  Another work around

    $ sudo EDITOR=nvim systemctl edit --full sshd.service

2021-12-07:

  Edited /etc/ssh/sshd_configuration, moved sshd to a high port.

    $ sudo systemctl restart sshd.service

2021-12-07:

  Decided to install Sway as my desktop.

   - Wayland version of i3
   - Minimal
   - Geared to "power users"
   - More time to learn due to Christmas holidays coming up

  First continue setting up infrastructure.  

2021-12-07:

  Install intel-ucode package.

    $ sudo pacman -Syu intel-ucode

  Updated /boot/loader/entries/arch.conf with third line.

    title Arch Linux
    linux /vmlinuz-linux
    initrd /intel-ucode.img
    initrd /initramfs-linux.img
    options root=/dev/nvme0n1p3 rootfstype=ext4 add-efi-memmap

  Reboot.

    $ journalctl -b -1|head -3
    -- Journal begins at Sun 2021-12-05 15:42:35 MST, ends at Tue 2021-12-07 16:44:05 MST. --
    Dec 07 12:30:44 euler7 kernel: Linux version 5.15.6-arch2-1 (linux@archlinux) (gcc (GCC) 11.1.0, GNU ld (GNU Binutils) 2.36.1) #1 SMP PREEMPT Thu, 02 Dec 2021 15:47:09 +0000
    Dec 07 12:30:44 euler7 kernel: Command line: initrd=\initramfs-linux.img root=/dev/nvme0n1p3 rootfstype=ext4 add-efi-memmap

    $ journalctl -b|head -4
    -- Journal begins at Sun 2021-12-05 15:42:35 MST, ends at Tue 2021-12-07 16:45:19 MST. --
    Dec 07 16:34:10 euler7 kernel: microcode: microcode updated early to revision 0xea, date = 2021-01-05
    Dec 07 16:34:10 euler7 kernel: Linux version 5.15.6-arch2-1 (linux@archlinux) (gcc (GCC) 11.1.0, GNU ld (GNU Binutils) 2.36.1) #1 SMP PREEMPT Thu, 02 Dec 2021 15:47:09 +0000
    Dec 07 16:34:10 euler7 kernel: Command line: initrd=\intel-ucode.img initrd=\initramfs-linux.img root=/dev/nvme0n1p3 rootfstype=ext4 add-efi-memmap

2021-12-07:

  Install pipewire and wireplumber, based on what I did on 2021-11-20 for maxwell4.

    sudo pacman -Syu wireplumber pipewire-pulse pipewire-jack wireplumber-doc \
                     pipewire-docs pipewire-alsa vorbis-tools alsa-utils \
                     alsa-plugins tree sof-firmware alsa-ucm-conf alsa-firmware

                     2021-12-10: should add jack2 to list?

  Reboot
  
    $ amixer sset Master unmute
    $ cd ~/Music/PopRock/The\ Beau\ Bremmels/
    $ ogg123 'Laugh Laugh.ogg'
    
  Sound works.

2021-12-07:

  Get Bluetooth working, following via ArchWiki.
  First check if kernel drivers are installed.

    $ lsmod|grep btusb
    btusb                  65536  0
    btrtl                  28672  1 btusb
    btbcm                  24576  1 btusb
    btintel                45056  1 btusb
    bluetooth             749568  5 btrtl,btintel,btbcm,btusb    

  Install service and get user software.

    $ sudo pacman -Syu bluez bluez-utils

  Enable and start service

    $ sudo systemctl enable bluetooth.service
    $ sudo systemctl start bluetooth.service

  
  For help,

    $ bluetoothctl help
    $ man -s8 bluetoothd

2021-12-08:

  Today I will install Sway.  By default, Sway does not use a display manager.

  Got an idea of what I want to do from the Sway ArchWiki page and
  this Youtube video: https://www.youtube.com/watch?v=hRIGYUWQfYU

  I will be following this guide: https://www.fosskers.ca/en/blog/wayland
  more or less.

    $ sudo pacman -Syu \
          sway alacritty waybar wofi \
          xorg-xwayland xorg-xlsclients qt5-wayland glfw-wayland
    :: Synchronizing package databases...
     core is up to date
     extra is up to date
     community is up to date
    :: Starting full system upgrade...
    resolving dependencies...
    :: There are 8 providers available for ttf-font:
    :: Repository extra
       1) gnu-free-fonts  2) noto-fonts  3) ttf-bitstream-vera  4) ttf-croscore  5) ttf-dejavu
    :: Repository community
       6) ttf-droid  7) ttf-ibm-plex  8) ttf-liberation
    
    Enter a number (default=1): ^C
    Interrupt signal received

2021-12-08:

  Aside: Fonts

  I am not a great font connoisseur.  I want

   - good Unicode coverage
   - minimal bloat, simple to configure
   - not glaringly ugly
   - to learn better how to handle fonts in code

  The ArchWiki font configuration page has good info I will draw upon.

  The freedesktop.org's Fontconfig library is what most modern GUI
  and printer applications use to quickly find needed fonts.  The local
  per user configuration file is 

    ~/.config/fontconfig/fonts.conf

  and globally set via

    /etc/fonts/local.conf

  Older X applications use two different font systems

   - the older X Logical Font Description (XLFD)
     - originally designed for bitmap fonts
     - scalable fonts added later
     - does not support anti-aliasing & sub-pixel rasterization
   - the newer X FreeType (Xft)
     - uses FreeType & Fontconfig libraries
     - more suitable when smooth font appearance desired

  Example of an application using XLFD names:

    $ xterm -fn -misc-fixed-medium-r-semicondensed--13-120-75-75-c-60-iso8859-1 &
    $ xterm -fn "-*-fixed-medium-r-s*--13-120-*-*-*-*-iso8859-1" &

  The above is what I used to refer to as "magical Unix incantations."

  Any case, I need to choose some fonts.  The default choice is
  GNU Unifont but I hear good things about Noto fonts.  Both
  have good Unicode coverage and open licenses.  Both allow for
  embedding in commercial software.  The GNU may be bitmap fonts,
  they were developed along side XFree86 and XOrg.  Noto was
  commissioned by Google in the 2010's and are more modern.

  Lets go with the Noto fonts.

2021-12-08:

  Back to installing Sway.

    $ sudo pacman -Syu \
          sway alacritty waybar wofi \
          xorg-xwayland xorg-xlsclients qt5-wayland glfw-wayland \
          noto-fonts
    :: Synchronizing package databases...
     core                    137.4 KiB   528 KiB/s 00:00 [############################] 100%
     extra                  1565.4 KiB  9.38 MiB/s 00:00 [############################] 100%
     community                 5.8 MiB  26.9 MiB/s 00:00 [############################] 100%
    :: Starting full system upgrade...
    resolving dependencies...
    :: There are 2 providers available for opengl-driver:
    :: Repository extra
       1) mesa  2) nvidia-utils
    
    Enter a number (default=1): 1
    looking for conflicting packages...
    ...

  I chose the mesa package.  Did not what to risk dragging in the proprietary
  NVIDIA drivers.  Pretty sure the older hybrid, non-GBM NVIDIA GeForce MX250
  Graphics card will never be able to support Wayland.
  
  Let's reboot and see if we can get a Sway session going.

2021-12-08:

  Lets configure Sway with the default configuration.

    $ cd ~/.config
    $ mkdir sway
    $ cp /etc/sway/config sway/

  Some useful commands to know before launching the first time.

   - Reload Sway:    Super+Shift+c
   - Exit Sway:      Super+Shift+e
   - Open Terminal:  Super+Return
   - Open Program:   Super+d

  Launch Sway.

    $ sway

  Got a desktop, first two keybindingd worked.  Second two did not.

  I know why alarcritty fails, it is my MacOS hack for it in alacritty.yml.

    # ls -s /usr/bin/fish /usr/local/bin/fish
    $ sway

  Alacritty works!  Also, sway is mouse focused!

  Super+d does not work, but I am going to swap out the program
  launcher anyway.  

  Super+e swaps the placement of two alacritty windows from
  left by right to top over bottom respectively, and back.

2021-12-10:

  Installing firefox so that I can continue primping euler7 without
  having to run over to another computer to research stuff.

    $ sudo pacman -Syu firefox

  Note that this brings in the jack2 package.  At least Pacman
  thinks this is compatible with pirewire-jack and wireplumber.

2021-12-12:

  Continue configuring Sway via https://www.fosskers.ca/en/blog/wayland

  Things I want this guide to help me accomplish:

   - Configure Waybar, a topbar very similar to Polybar.
   - Configure Wofi, a pure GTK (and thus Wayland) customizable application launcher.
   - Firefox and/or Chromium in Wayland with working screen sharing.
   - Most QT applications running in Wayland.  GTK should just work.
   - Steam games set up to consider Wayland, if they can (maybe).

2021-12-13:

  Configure Waybar for sway.  Edit ~/.config/sway/config,
  comment the bar section and add
    
    bar {
        swaybar_command waybar
    }

  Replace program launcher dmenu with wofi.  Factoid: denu uses
  XWayland while wofi is a GTK application, hence Wayland compatible.

    #set $menu dmenu_path | dmenu | xargs swaymsg exec --
    set $menu wofi --show=drun --lines=5 --prompt=""

  The drun option above only matches and displays hits for programs
  that have "Desktop" entries.
  
  Note that out of the box firefox runs under XWayland.

    $ xlsclients
    euler7  firefox

  In ~/.config/fish/config.fish

    set -x MOZ_ENABLE_WAYLAND 1

  Logout both sway & console.

    $ xlsclients

  Firefox now running completely under Wayland.

2021-12-14:

  Needed for firefox to screen share.

   $ sudo pacman -Syu xdg-desktop-portal-wlr 

  This also brought in xfg-desktop-portal and a bunch
  of fuse (user space file system) stuff and something
  called geoclue.

    $ pacman -Ss geoclue
    extra/geoclue 2.5.7-4 [installed]
        Modular geoinformation service built on the D-Bus messaging system
    community/pantheon-geoclue2-agent 1.0.5-1 (pantheon)
        Pantheon Geoclue2 Agent

  Hummm...What are doing Firefox?

  Test out changes here:

    https://mozilla.github.io/webrtc-landing/gum_test.html

  Screen sharing seemed to work.  Have to share entire screen.
  Sharing idividual windows is in the works, but does not work yet.

2021-12-15:

  Install legacy GNOME polkit deamon for Sway.  Has no external
  dependencies.

    $ sudo pacman -Syu polkit-gnome

 Added the following  line to ~/.config/sway/config

   exec_always /usr/lib/polkit-gnome/polkit-gnome-authentication-agent-1

2021-12-16:

  Fixed waybar not having its icons.

    $ sudo pacman -S otf-font-awesome

2021-12-17:

  Neovim's "+ and "* registers don't work.
  The first is the "system" clipboard, the second the "X11" clipboard.

  Let's install the Wayland clibboard tool

    $ pacman -Ss wl-clipboard
    community/wl-clipboard 1:2.0.0-2
        Command-line copy/paste utilities for Wayland
    $ sudo pacman -S wl-clipboard

  Without any configuration, both registers seem to work and
  are distinct.  The xlsclient is not showing any XWayland
  stuff when "* is used.

  In nvim, :h clipboard-tool shows that order of searching for clipboard
  tools are,

    - |g:clipboard|
    - pbcopy, pbpaste (macOS)
    - wl-copy, wl-paste (if $WAYLAND_DISPLAY is set)
    - xclip (if $DISPLAY is set)
    - xsel (if $DISPLAY is set)
    - lemonade (for SSH) https://github.com/pocke/lemonade
    - doitclient (for SSH) http://www.chiark.greenend.org.uk/~sgtatham/doit/
    - win32yank (Windows)
    - termux (via termux-clipboard-set, termux-clipboard-set)
    - tmux (if $TMUX is set)

  Seems that regardless whether or not XWayland is running, I still
  have two distinct clipboards in Wayland.  X11 style middle-mouse
  highlighted paste is associated with the "* register and (with my
  alcritty keybindings) alt+c & alt+v the "system" clipboard is
  associated with the "+ register.  As before, I can also paste
  through alacritty directly into neovim insert mode via alt-v.

  After further research, freedesktop.org describes the two main
  selections as follows:

  PRIMARY
    Used for the currently selected text, even if it is not explicitly
    copied, and for middle-mouse-click pasting. In some cases, pasting
    is also possible with a keyboard shortcut.

  CLIPBOARD
    Used for explicit copy/paste commands involving keyboard
    shortcuts or menu items. Hence, it behaves like the single
    clipboard system on Windows. Unlike PRIMARY, it can also
    handle multiple data formats.

  Qt and GTK applications follow this behavior, as do most
  Xorg applications.

  Therefore, I have not been interacting with two clipboard systems
  but with one with backward compatible behaviors.

  Arch does not seem to have a Sway oriented drop in replacement
  for gpaste or clipman.  I don't want to unnecessarily drag in
  too much of GNOME or XFCE, so I will forego a clipboard history
  manager for now.

2021-12-18:

  Following this "Root Labs" video to configure Waybar for Sway

    https://www.youtube.com/watch?v=oUpvtCEGrxQ

  Installing Waybar default font Roboto.  Also Roboto Mono Medium.

    $ sudo pacman -S ttf-roboto ttf-roboto-mono

  Edited ~/.config/waybar/style.ccs lines near top from

    boarder-radius: 0;
    font-family: Roboto, Helvetica, Arial, sans-serif;
    font-size: 13px;

  to

    boarder-radius: 4px;
    font-family: "Roboto Mono Medium", Roboto, Arial, sans-serif;
    font-size: 18px;

  Also edited ~/.config/waybar/config

2021-12-22:

  Installed and enabled reflector service.

    $ sudo pacman -Syu reflector
    $ systemctl enable reflector.timer

  Installed and enabled locate service.

    $ sudo pacman -Syu mlocate

  Could not figure out how to enable the updatedb.timer
  for the locate command.  Went back later and

    $ systemctl list-timers

  showed not only it was configured, but successfully ran.

2021-12-24:

  Install and configure screen locker and idle manager
  for Sway.

    $ sudo pacman -Syu swaylock swayidle

  See dotfiles repo for ~/.config/sway/config configuration.

2021-12-27:

  Installed ruby and rubygems for neovim and mdl plugins.

    $ sudo pacman -Syu ruby rubygems
    $ gem install neovim
    $ gem install mdl

2021-12-27:

  Moved into place /etc/nsswitch.conf.pacnew
  
  Temporarily replces resolve.services /etc/resolv.conf symlink
  with a file pointing to nameserver 1.1.1.1.  Comcast's nameserver
  is not resolving github.com for euler7.  Is working for gauss17.
