Purpose: To indicate what was done to create gauss17 and
         the rational behind it.

Note: On 2017-06-20 rebuilt system from scratch starting
      after swapping out the DVD with a SSD.

      Originally ran into issues getting an NVidia Optimus
      graphics card working with the NVidia drivers.  On
      the rebuild Arch handled the card and drivers without
      much fuss.

2016-07-04:
  Installed ArchLinux on Acer E-14 Laptop (E5-491G-70PX).
  Created a UEFI/GPT x86-64 system with a 4 core i7 Intel
  Processor (6700HQ).  Laptop has a 2 channel NVIDEA
  GEFORCE 940M graphics chipset 2GB Memory.
    Pacman: base, base-devel
      (during install)
    Pacman: intel-ucode
      (for updating microcode - unconfigured)

  Disks: sda1 -> /boot  512 MiB
         sda2 -> /       64 GiB
         sda3 -> Swap    16 GiB
         sda4 -> /home  741 GiB

         Filesystem      Size  Used Avail Use% Mounted on
           dev          3.9G     0  3.9G   0% /dev
           run          3.9G  760K  3.9G   1% /run
           /dev/sda2     63G  1.2G   59G   2% /
           tmpfs        3.9G     0  3.9G   0% /dev/shm
           tmpfs        3.9G     0  3.9G   0% /sys/fs/cgroup
           /dev/sda1    511M   27M  485M   6% /boot
           tmpfs        3.9G     0  3.9G   0% /tmp
           /dev/sda4    839G   73M  796G   1% /home
           tmpfs        788M     0  788M   0% /run/user/1000

  I made SWAP so large so that if I am doing some
  mathematical modeling where I am using almost all of the
  memory, I can hibernate the machine and pick up where I
  left off.  I sized it for 16GiB memory, system currently
  has 8GiB.

  Only problem I had with the install was configuring the
  boot loader.  The Arch Linux Wikis are excellent, but
  dropped the ball on that point.  Using systemd-boot as
  the boot loader with "secure boot" turned off.

  Used primarily the Arch Linux Beginners Guide for the
  install:
    https://wiki.archlinux.org/index.php/Beginners_guide

  Created geoff as the first user.

  [[ Note from 2017-06-26: Rebuilt system - see below on
     this date for a better description of the steps involved
     that I gloss over above. ]]

2016-07-07:
  Out of the blue, ethernet not configured.  Had to bring up
  DHCP manually via: dhcpcd enp3s0f1

2016-07-07:
  Install dns utilities:

  Commands:
    pacman -Syu
    pacman -Syu dnsutils

    Pacman: dnsutils

  Some useful utilities got installed from the bind-tools
  subpackage:
    /usr/bin/arpaname
    /usr/bin/delv
    /usr/bin/dig
    /usr/bin/genrandom
    /usr/bin/host
    /usr/bin/nslookup
    /usr/bin/nsupdate

  A lot of other utils from bind-tools regarding secure DNS.

  I got the bind-tools name from the pacman install output.
  I got the names of the files instlled via:

    pacman -Qlq bind-tools

  The dates of files installed are retro,
  not installed date.

2016-07-08:
  Installed GIT and Python3:
    Pacman: git, python, ipython, python-nose

2016-07-08:
  Currently using the open source drivers for the graphics
  cards as well as the integrated graphics chipset.

    # lspci -k | grep -A 2 -E "(VGA|3D)"
    00:02.0 VGA compatible controller: Intel Corporation
      Skylake Integrated Graphics (rev 06)
    Subsystem: Acer Incorporated [ALI] Device 0979
    Kernel driver in use: i915
    --
    01:00.0 3D controller: NVIDIA Corporation GM108M
      [GeForce 940M] (rev a2)
    Subsystem: Acer Incorporated [ALI] Device 097a
    Kernel modules: nouveau

  I am going to wait until after I install X before
  monkeying around with the NVIDIA drivers.  That way if X
  does not work, I know it is not because of these drivers.
  Some extra Xorg.conf configurations will be needed as well
  as configuring a pacman hook for when the driver gets
  updated.

2016-07-08:
  Added the sudo package, used the visudo command to edit
  /etc/sudoers.  Enable members of the wheel group to use
  sudo.  Added geoff login to wheel group via
  "usermod -G wheel geoff".  Also uncommented the lines
  that will allow sudo to function cleanly with X11 GUIs
  (If I were trying to make a hardened system I would not
  do this).  As a result, sudo keeps $Home the same as the
  sudoer, not root's home.

    Pacman: sudo

  Note: In future, if I want to add user geoff to other
        groups, I need to do
          usermod -aG group1,group2,group3 geoff
        otherwise, without the -a, geoff would be removed
        from wheel.

2016-07-08:
  Starting process to install GUI environment.  Installing
  xinit, startx and a default xinitrc file.
    Pacman: xorg-xinit

  Thought this might drag all of X in, it doesn't.

  After extensive reading of Arch-Wiki and several aborted
  pacman attemps, decided to install NVIDIA drivers first.
  NVIDIA drivers were given as dependency choices and the
  other choices were more for legacy support.
    Pacman: nvidia, nvidia-libgl

  Had to choose between 2 libraries, xf86-input-evdev and
  xf86-input-libinput.  The former would require a synaptics
  touch pad package.  The later is a wrapper for libinput
  (used by Wayland), and is a wrapper for X11 to use the
  library.  Better touch pad support.  I chose the latter.

  Reboot for changes to take effect.

  From diffs on dmegs from this and prvious reboot:

    >  nvidia: module license 'NVIDIA' taints kernel.
    >  Disabling lock debugging due to kernel taint
    >  nvidia 0000:01:00.0: enabling device (0406 -> 0407)
    >  nvidia-nvlink: Nvlink Core is being initialized,
         major device number 242
    >  NVRM: loading NVIDIA UNIX x86_64 Kernel Module
         367.27  Thu Jun  9 18:53:27 PDT 2016
    >  nvidia-modeset: Loading NVIDIA Kernel Mode Setting
          Driver for UNIX platforms  367.27 Thu Jun  9
          18:24:10 PDT 2016
    >  Loading driver
    <  nouveau 0000:01:00.0: enabling device (0406 -> 0407)
    <  nouveau 0000:01:00.0: unknown chipset (118070a2)
    <  nouveau: probe of 0000:01:00.0 failed with error -12

  Looks like the NVIDIA drivers were picked up.

  From NVIDIA's website, NVIDIA recommends using a
  persistence daemon to keep cards active during headless
  operations, i.e. to keep cards active when there is no
  X-Windows to do so.  This can save seconds starting up
  and shutting down card when used by clients.  Clients
  attach a GPU by openning it's device file and detach
  device file.  To simulate graphics environment without
  incurring the overhead, the persistence daemon runs in
  the background and sleeps with the device files open.
  Daemon uses libnvidia-cfg.so to provide a RPC interface
  to control the persistence mode of each GPU individually.

    $ lspci -k | egrep -A 2 "(VGA|3D)"
    00:02.0 VGA compatible controller: Intel Corporation
      Skylake Integrated Graphics (rev 06)
    Subsystem: Acer Incorporated [ALI] Device 0979
    Kernel driver in use: i915
    --
    01:00.0 3D controller: NVIDIA Corporation
       GM108M [GeForce 940M] (rev a2)
    Subsystem: Acer Incorporated [ALI] Device 097a
    Kernel driver in use: nvidia

  See /usr/share/doc/nvidia/README for lots of good
  information - same info I found on NVIDIA's website.

  Created the following aliases in geoff's .bashrc file:
    # NVIDIA Daemon to keep card active
    #  when not running X-Windows
    alias nv-pd='sudo nvidia-persistenced --user geoff --persistence-mode'

    # Activate and Deactivate respectfully.
    #   Communicates with above daemon if running, otherwise
    #   directly with card in a deprecated manner.
    alias nv-off='sudo nvidia-smi -pm 0'
    alias nv-on='sudo nvidia-smi -pm 1'

2016-07-09:
  Figured out how to turn ethernet on by default:

    systemctl enable dhcpcd

2016-07-09:
  Added ALSA (Advanced Linux Sound Architecture) Utilities:
    Pacman: alsa-utils

  Note: For more advanced sound cards, the alsa-firmware
        package might be needed.  Note: PulseAudio can serve
        as a proxy to ALSA.  I used alsamixer from command
        line (CLI/NCURSES) to unmute and adjust the volumei
        of the speakers and headphones.  Turned on the mike,
        left at 0.0dB.

  Tested speakers with: speaker-test -c 2
  both speakers and headphones work.

2016-07-09:
  Attempting to install GNOME Desktop
    Pacman: gnome, gnome-extra gnome-tweak-tool

  I created a .initrc file that esentially does an
  "exec gnome-session".

  When I do "startx" or "startx gnome" or
  "startx '.xinitrc gnome'" I see laptop video mode
  shift but X fails to launch.

  Error message /var/log/Xorg.0.log:
    [ 29387.537] (EE) Failed to initialize GLX extension
      (Compatible NVIDIA X driver not found)

  I think the problem is that I have a hybrid NVIDIA/Intel
  GPU called NVIDIA Optimus.  Basically, "NVIDIA Optimus is
  a technology that allows an Intel integrated GPU and
  discrete NVIDIA GPU to be built into and accessed by a
  laptop".  Arch Linux Wiki has a section called "NVIDIA
  Optimus" that I need to work through.

    Pacman: nvidia, nvidia-libgl, xorg-xrandr

  First two are reinstalls, last one I am not sure if it was
  previously dragged in.

  Reboot.

    # lspci | egrep "(VGA|3D)"
    00:02.0 VGA compatible controller: Intel Corporation
      Skylake Integrated Graphics (rev 06)
    01:00.0 3D controller: NVIDIA Corporation GM108M
      [GeForce 940M] (rev a2)

  Created /etc/X11/xorg.conf file with contents:

    Section "Module"
        Load "modesetting"
    EndSection

    Section "Device"
        Identifier "nvidia"
        Driver "nvidia"
        BusID "PCI:1:0:0"
        Option "AllowEmptyInitialConfiguration"
    EndSection

  Added first two lines to /home/geoff/.xinitrc whose
  contents now are:

    xrandr --setprovideroutputsource modesetting NVIDIA-0
    xrandr --auto

    session=${1:-gnome}

    case $session in
       gnome          ) exec gnome-session;;
       gnome-classic  ) exec gnome-session --session=gnome-classic;;
         *) exec $1;;
    esac

  Reboot

  X server with Gnome Desktop now works.  For some reason
  gnome-terminal does not start.  Might be missing fonts?

  See note on 2017-04-15 for some more NVIDIA Optimus insight.

2016-07-09:
  Try and fix gnome-terminal problem.

  Lets try installing a bunch of fonts.

  From the Arch Linux Wiki recomendations page, I installed
  a bunch of true type fonts.  Did not fix gnome-terminal
  problem.
    Pacman: ttf-dejavu

  The Locale may not be set up correctly.

    # localectl set-locale LANG="en_US.UTF-8"
    # reboot

  This didn't work either.

  The problem is that gnome-terminal and gnome-files
  both need a start up script,
  /etc/X11/xinit/xinitrc.d/50-systemd-user.sh, to spin up
  some daemon processes for these gnome "apps" to work.
  I am not sure if this is a systemd or .xinitrc thing.
  If I were using a display manager, everything would
  probably work out of the box.

  I will punt on this for now, I have more important things
  to configure.

2016-07-09:
  Installed firefox.
    Pacman: firefox

2016-07-10:
  So that I have a working gui desktop environment, I will
  install XFCE.
    Pacman: xfce4 xfce4-goodies

  Update .xinitrc by adding the case clause

    xfce  ) exec startxfce4;;

  and making xfce the default choice.  Maybe there is a
  similar start up script for gnome?

  XFCE is quick, responsive, and effortless to config.
  Simple, not just easy.  No X-tearing when I ran firefox
  and CTRL-ALT-Fn between virtual terminals, as happened
  with gnome.

2016-07-10:
  Installed ACPI power management
    Pacman: acpi

  Logs in /etc/X11/xorg.conf indicate acpid not being
  spun up.  Need to configure it.

2016-07-10:
  Installing vim.  Created vi alias for vim for geoff but
  not for root.
    Pacman: gvim

  Also, created /root/.bash_profile for root.  The file
  /root/.bashrc does not get sourced for login shells by
  default.  I use .bash_profile to do this in the standard
  way like Ubuntu and CentOS do.

2016-07-10:
  Installed OpenSSH package.  Verified OpenSSL was
  previosly installed as a dependency.

    Pacman: openssh

  Editted /etc/ssh/sshd_config:

    PermitRootLogin no
    Port 30303
    PasswordAuthentication no
    ChallengeResponseAuthentication no (already set)

    There are two possible systemd services for sshd,
    sshd.service and sshd.socket.  The second one is
    prefered (first one has sshd itself sitting on the
    port forking children - used on systems with high
    ssh usage).

    Configure systemd to listen for sshd trafic
    on port 30303:

      # systemctl edit --full sshd.socket

    where we changed ListenStream=22 to ListenStream=30303

    Enable on boot:

      # systemctl enable sshd.socket

    Able to configure passwordless ssh logins between
    gauss17 and my work CentOS 6 workstation rygar.

2016-07-11:
  Preparing to configure the Wireless networking.

  First install command line utilities:

    Pacman: iw, wpa_supplicant

  Wireless interfase is wlp2s0 (from "ip link" and "iw dev")

    # lspci -k
    > ...
    > Network controller: Qualcomm Atheros Device 0042
        (rev 30)
    > Subsystem: Lite-On Communications Inc Device 1806
    > Kernel driver in use: ath10k_pci
    > Kernel modules: ath10k_pci
    > ...

    $ dmesg | grep firmware
    > [    8.075814] ath10k_pci 0000:02:00.0: Direct
        firmware load
    for ath10k/cal-pci-0000:02:00.0.bin failed with error -2
    > [    8.435541].  ath10k_pci 0000:02:00.0: firmware ver
        WLAN.TF.1.0-00267-1 api 5 features ignore-otp crc32
        79cea2c7
    > [   11.127725] ath10k_pci 0000:02:00.0 wlp2s0: renamed
        from wlan0

  I am able to query my home wireless router via
  "iw dev wlp2s0 scan", so, I assume all drivers are
  configured correctly dispite conflicting info from
  first dmesg.

2016-07-12:
  Removed gnome desktop.

    # pacman -Rsu gnome gnome-extra gnome-tweak-tool

    Pacman:(Remove) gnome gnome-extra gnome-tweak-tool

  Disk space on / partition went 9% -> 6%.
  (0.03 * 63.4G = 1.9G used by Gnome)

2016-07-13:
  Install final packages to get wireless working in XFCE.
  Following the Arch Linux wireless installation guide.
    Pacman: wicd wicd-gtk xfce4-notifyd

2016-07-14:
  Finish configuring wicd for use with XFCE:

    # systemctl is-enabled wicd
    disabled

    # systemctl enable wicd
    Created symlinks

    /usr/lib/systemd/system/wicd.service →
    /etc/systemd/system/dbus-org.wicd.daemon.service

    /usr/lib/systemd/system/wicd.service →
    /etc/systemd/system/multi-user.target.wants/wicd.service

    Pacman: python2-notify xfce4-notifyd

    # systemctl is-enabled dhcpcd
    enabled

    # systemctl disable dhcpcd
    Removed /etc/systemd/system/multi-user.target.wants/dhcpcd.service.

    # usermod -aG users geoff

  Reboot.

  Wireless now works in a totally automated way in XFCE.
  If not running X, you will need to at least bring up
  dhcpcd via "sudo systemctl start dhcpcd" with eithernet
  cable plugged in.  While possibible to use wicd and
  wpa_supplicant to probe and configure network directly,
  wicd-cli can be used to do so.  Arch Linux Wiki claims
  that once familiar with tle wicd-cli command line tools,
  it is as simple as the GUI tools.

  (2016-08-21: Turns out Wicd will bring up a network form
   CLI-land at boot time, without having to manually start
   dhcpcd, if the network was prior configured to be
   automatically connected to via the GUI in the system
   tray.)

2016-07-14:
  Installed SBT for scala development.  Had it drag in jre8
  as opposed jre7.
    Pacman: sbt

2016-07-14:
  Installed a java8 development environment.
    Pacman:  jdk8-openjdk openjdk8-doc java-openjfx java-openjfx-doc

2016-07-16:
  How to install packages from AUR (Arch User Repository),
  from the Arch_User_Repository of the Arch Linux Wiki:

  1. Acquire the tarball which contains the PKGBUILD and
     possibly other required files, like systemd units
     and patches (but often not the actual code).
  2. Extract the tarball (preferably in a directory set
     aside just for builds from the AUR) with
     tar -xvf pkgname.tar.gz.
  3. Verify that the PKGBUILD and accompanying files are
     not malicious or untrustworthy.
  4. Run makepkg -sri in the directory where the files are
     saved. This will download the code, resolve the
     dependencies with pacman,
     compile it, package it, install the package, and
     finally remove the build-time dependencies, which
     are no longer needed.

2016-07-16:
  Install google-chrome from AUR:

    $ git clone https://aur.archlinux.org/google-chrome.git

  This accomplished steps 1 and 2 above.  Doing this as user
  geoff in /home/geoff/build/AUR/google-chrome_build.  Looks
  like it will install in /opt/google/chrome but with some
  infrastructure (fonts, man pages, docs, licenses, icons)
  in /usr/share.

  Above created the following files: PKGBUILD,
                                     google-chrome.install
                                     google-chrome-stable.sh

  Now do step 4.

     $ makepkg -sri

  Asked for root password.  Also asked
  if I wanted it installed, I said yes.

2016-07-17:
  Installed VLC and some optional dependencies.
    Pacman: vlc qt4 libcdio

2016-07-17:
  Installed shotwell.  For simple touch and image enhancing.
  Also a photo organizer.
    Pacman: shotwell

2016-07-17:
  Was going to install evince, but the install was about to
  to drag in almost 1G of gnome infrastructure.  Installed
  muPDF instead.
    Pacman: mupdf

2016-07-17:
  Installed gimp image retouching,ffmpeg composition,
  and authoring.
    Pacman: gimp

2016-07-17:
  Installed Libre-Office with some latex support.
    Pacman: libreoffice-fresh libreoffice-extension-texmaths
            libreoffice-extension-writer2latex

2016-07-17:
  Installed youtube-dl and some optional dependencies
  (ffmpeg already installed).
    Pacman: yt-download
    Pacman: rtmpdump atomicparsley

2016-07-17:
  Minimal Haskell install from official repos:
    Pacman: ghc cabal-install happy alex

  There are a lot of additional Haskell commponents that could
  be installed.  Best to wait until I am back into programming
  with Haskell.  I intend to avoid using cabal unless absolutley
  necessary - and then only on the end user level.

2016-07-17:
  Sound not working.

  Installed Pulseaudio with recomended dependency.
    Pacman: pulseaudio
    Pacman: pulseaudio-alsa

  Tried installing xfce volume control.
    Pacman: xfce4-mixer

  Put on top panel.  Seems inoperative.

  Try putting login in audio group, still does not work.

    # usermod -aG audio geoff

  Tried using alsamixer and "speaker-test -c 2" both as
  geoff and root.  Doesn't work.  Both in GUI and out.
  Did work before, try uninstalling pulse audio.

    # pacman -R pulseaudio pulseaudio-alsa

    Pacman:(Remove) pulseaudio pulseaudio-alsa

  Reboot

  Didn't work for geoff, but it did if I had root run XFCE
  desktop.  So I shutdown X as root, logged out, back in as
  geoff, and low and behold, it worked!  Lets see what
  happens after a reboot and I login as geoff.

  Reboot

  Sound works when under XFCE as geoff.  I have no idea what
  I could have done to fix things.

  So at this point, pulseaudio not installed.

2016-07-20:
  Installed Gnome Keyring in preparation of getting
  removeable media to automount.  Decided to let XFCE to
  handle this instead of configuring underlying mechanisms.
    Pacman: gnome-keyring

2016-07-20:
  Decided to go with evince as my go to PDF reader.
    Pacman: evince

2016-07-20:
  Install Thunar Volume Manager.

  The gvfs package provides a VFS API to GLib applications.
  Provides a "local" implemtation via POSIX, but also
  provides implementations that go beyond that and allow to
  access files and storage using many protocols, such as
  ftp, http, sftp, dav, nfs. It also provides support for
  trash folders, for cd burning and for monitoring
  interesting devices and volumes on the computer.
    Pacman: gvfs
    Pacman: thunar-volman

2016-07-20:
  Installed bash-completion for convinence.
    Pacman: bash-completion

2016-07-20:
  Figured out why acpid not running, I did not install it.
    Pacman: acpi acpid

  acpi is a userland program to report events,

    $ acpi
    Battery 0: Full, 100%

    $ systemctl is-enabled acpid
    disabled
    $ sudo systemctl enable acpid

  Reboot

    $ systemctl status acpid
    ● acpid.service - ACPI event daemon
       Loaded: loaded (/usr/lib/systemd/system/acpid.service; enabled; vendor preset: disabled)
       Active: active (running) since Thu 2016-07-21 00:53:58 MDT; 9min ago
         Docs: man:acpid(8)
     Main PID: 381 (acpid)
        Tasks: 1 (limit: 512)
       CGroup: /system.slice/acpid.service
               └─381 /usr/bin/acpid --foreground --netlink

    Jul 21 00:53:58 gauss17 systemd[1]: Started ACPI event daemon.
    Jul 21 00:53:59 gauss17 acpid[381]: starting up with netlink and the input layer
    Jul 21 00:53:59 gauss17 acpid[381]: 1 rule loaded
    Jul 21 00:53:59 gauss17 acpid[381]: waiting for events: event logging is off
    Jul 21 00:54:48 gauss17 acpid[381]: client connected from 645[0:1000]
    Jul 21 00:54:48 gauss17 acpid[381]: 1 client rule loaded
    Jul 21 00:54:49 gauss17 acpid[381]: client connected from 645[0:1000]
    Jul 21 00:54:49 gauss17 acpid[381]: 1 client rule loaded

2016-07-21:
  Installed etherape:
    Pacman: etherape

2016-07-22:
  Installed claws-mail:
    Pacman: claws-mail
    Pacman: postfix

  I had to install postfix (sendmail replacement) in order to
  get claws-mail to interact with my local mail.

    # systemctl enable postfix

  So far have not changed the settings in /etc/postfix/main.cf
  from their default vaules,

2016-07-22:
  Installed Scala compiler version 2.11.8 so that I can run
  scala outside the context of SBT.
    Pacman: scala scala-docs scala-sources

2016-07-22:
  Installed wget utility to get web content from CLI.
    Pacman: wget

2016-07-23:
  Noticed that XFCE infrastructure is mounting my removable
  USB HD read only.  Need to fix this.  Will try to do this
  within XFCE before managing removable media in the
  underlying Linux.  (Am I just lazy?  It would be educational
  to do such, but I don't really need access to the removable
  HD outside the GUI environment.)

  Actually, things stay mounted once one exits XFCE.

  I final got to the bottom of my USB hard drive issues.
  The USB HD is NTFS formatted.  It just didn't occur to
  me that it had an MS proprietary format.  All was needed
  was to install NTFS filesystem driver and utilities
  package.
    Pacman: gvfs-afc
    Pacman: ntfs-3g

  The former package, gvfs-afs, gives Apple iOS devices
  access to system similar to what is done in Mac OS X.
  Maybe I should investigate if similar hooks exist for
  android.

2016-07-24:
  Occationally system hangs on boot just after the message:

    Starting Load/Save RF Kill Switch Status...

  I found this on a message board (forgot where) -

    "Be warned that things happen asynchronously ... When
     you manage to log in, check journalctl -b (last boot)
     as root and look for timeouts, failures and dependency
     faults.

     The stuff with rfkill and bluetooth is very volatile
     and unpredictable. It never happens the same way.

     If you find out who's fault it is, you can then make a
     copy of the .service file in /etc/systemd/system/ and
     modify it to make it less strict. We can help if this
     is the case."

  Therefore, I am not going to worry about it.

  On the last boot, jounalctl -b shows some potential
  problems with the builtin camera:

    uvcvideo: Found UVC 1.00 device HD WebCam (1bcf:2c81)
    uvcvideo 1-9:1.0: Entity type for entity Extension 4 was not initialized!`
    uvcvideo 1-9:1.0: Entity type for entity Extension 3 was not initialized!
    uvcvideo 1-9:1.0: Entity type for entity Processing 2 was not initialized!
    uvcvideo 1-9:1.0: Entity type for entity Camera 1 was not initialized!
    input: HD WebCam as /devices/pci0000:00/0000:00:14.0/usb1/1-9/1-9:1.0/input/input11
    usbcore: registered new interface driver uvcvideo
    USB Video Class driver (1.1.1)

  Not sure what these mean.

  Also, some problems I noted before on the NVIDIA drivers:

    Jul 24 15:43:34 gauss17 kernel: nvidia: module license 'NVIDIA' taints kernel.
    Jul 24 15:43:34 gauss17 kernel: Disabling lock debugging due to kernel taint
    ...
    Jul 24 15:43:34 gauss17 kernel: nvidia 0000:01:00.0: enabling device (0406 -> 0407)
    Jul 24 15:43:34 gauss17 kernel: nvidia-nvlink: Nvlink Core is being initialized, major device number 242
    Jul 24 15:43:34 gauss17 kernel: NVRM: loading NVIDIA UNIX x86_64 Kernel Module  367.35  Mon Jul 11 23:14:21 PDT 2016

  After bouncing around on the internet, I beleive these are
  related to the nvidia drives not being able to work with the
  Optimus features of the card and that the nvidia-beta drivers
  address the problem.  I will investigate installing them from
  AUR.  This "beta" version has been around for about 3 years
  so should be stable enough.

2016-07-25:
  Installed GIMP help files.
    Pacman: gimp-help-en

2016-07-25:
  Getting NVIDIA Optimus to work on this laptop: NO!!!!

  Stay away from the beta NVIDIA drivers, sometimes they can
  be more out of date than the official ones in extra.

  The standard way of using "Optimus technology" with the NVIDIA
  drivers is to use the Bumblebee package (aside: lots of
  Transformmers references - Prime is another package to get
  Optimus working with open source drivers).

  From the Bumblebee FAQ:

    "Bumblebee is an effort to make NVIDIA Optimus enabled
     laptops work in GNU/Linux systems. Such feature involves
     two graphics cards with two different power consumption
     profiles plugged in a layered way sharing a single
     framebuffer."

  Bumblebee's use case is by disabling the nvidia card, power
  is saved. This improves battery life. If you need more
  graphical performance, Bumblebee can run the program using
  the Nvidia card.

  My use case: Can I use my Nvidia card only? I don't care about
               power consumption.  When X not running, I want to
               use the card for CUDA programming.

  I "think" this is what is happening now...how can I be sure?
  There is no way to "turn off" either the on board chip set or
  the NVIDIA card in the BIOS.  There is something called
  "reverse PRIME", which denpends on David Airlie's PRIME that
  can run NVIDIA card only (compatible with nouveau and nvidia
  drives - assuming if supported by the card).

  I am "assuming" that the nvidia driver works the NVIDIA
  card only and ignores the Intel chip set. (see 2017-04-15)

2016-07-26:
  Here is confirmation that the Nouveau drivers are not running.

    $ lsmod | egrep -i '(nvidia|nouveau)'
    nvidia_drm             45056  1
    nvidia_modeset        757760  3 nvidia_drm
    nvidia              11182080  56 nvidia_modeset
    drm_kms_helper        114688  2 i915,nvidia_drm
    drm                   294912  8 i915,drm_kms_helper,nvidia_drm

  But the system is seeing both cards:

    $ ls /dev/dri
    card0  card1  controlD64  renderD128  renderD129

  I beleive these lines in my ~/.xinitrc file is telling X to
  use the NVIDIA card:

    xrandr --setprovideroutputsource modesetting NVIDIA-0
    xrandr --auto

  [[ Note from 2017-06-29: The extra/nvidia package blacklists
     the Nouveau drivers. The Intel Chipset just sits there
     with Linux having no drivers to use them. ]]

  Direct Rendering Manager (DRM) is interesting.  Wikipedia
  has a good article:

    "The Direct Rendering Manager (DRM) is a subsystem of the
     Linux kernel responsible for interfacing with GPUs of
     modern video cards. DRM exposes an API that user space
     programs can use to send commands and data to the GPU,
     and perform operations such as configuring the mode setting
     of the display. DRM was first developed as the kernel space
     component of the X Server's Direct Rendering Infrastructure,
     but since then it has been used by other graphic stack
     alternatives such as Wayland.

     User space programs can use the DRM API to command the GPU
     to do hardware accelerated 3D rendering, video decoding as
     well as GPGPU computing."

  Before this, userspace programs usually assumed that each were
  the only entity touching the GPU.  Each set resources in its
  own way, most times ending catastrophically.

  I am assuming that David Airlie's Prime work will eventually
  be folded into DRM and I will not try to "add" it.  In the
  Windows laptop environment, Optimus use case is that the
  integrated chipset is primarily responsible for the video
  rendering and that only certain "blessed" programs (usually
  video games) have access to the NVIDIA GPU.  Once GPU
  processing is complete, "frame buffers?" are PCI bus'ed
  over to the integrated chipset for display.  This is done
  for power management reasons.

  Here is more confirmation that X is only using the NVIDIA GPU -
  the contents of /etc/X11/xorg.conf are:

    Section "Module"
        Load "modesetting"
    EndSection

    Section "Device"
        Identifier "nvidia"
        Driver "nvidia"
        BusID "PCI:1:0:0"
        Option "AllowEmptyInitialConfiguration"
    EndSection

  The Intel chipset is not even mentioned. If anything "fancy"
  was being done regarding offloading graphics rendering, both
  cards would have had to been configured here.

2016-07-26:
  The line
     kernel: nvidia: module license 'NVIDIA' taints kernel
  from journalctl -b only means that the nvidia driver does not
  have a GPL or equivalent license.

2016-07-28:
  From journalctl, there are error
  messages from gauss17 postfix/local:

    [8753]: warning: hash:/etc/postfix/aliases:
              lookup of 'geoff' failed
    [8754]: error: open database /etc/postfix/aliases.db:
              No such file or directory
    [8754]: warning: hash:/etc/postfix/aliases is unavailable.
            open database /etc/postfix/aliases.db:
              No such file or directory

  Gives me a direction to look for why local mail delievery
  is failing.

2016-07-29:
  Installed Vorbis-OGG related tools.
    Pacman: vorbis-tools mp32ogg pyvorbis recordmydesktop vorbisgain
    Pacman: libffado celt jack

2016-07-30:
  To be able to manage gnome-keyring from userland, install
  seahorse.

    Pacman: seahorse

  Install an Erlang development environment.
    Pacman: erlang elixir erlang-docs erlang-unixodbc rebar yaws

2016-07-31:
  Erlang can use GPU.  Also, first steps to get GPU to work
  for number crunching in general.  I was going to install what
  was needed for NVIDIA CUDA, but this proprietary package
  currently does not work for gcc 6.0+.  I will attempt to
  install what is needed for the Open Source equivalent,
  openCL.
    Pacman: erlang-cl
    Pacman: libclc opencl-headers opencl-nvidia luxmark

2016-08-01:
  Some journalctl chatter to indicate gnome-keyring failing.
    ... org.gnome.keyring.SystemPrompter[853]: (gcr-prompter:1196):
          Gtk-WARNING **: cannot open display:
    ... dbus-daemon[853]: Activated service
          'org.gnome.keyring.SystemPrompter' failed:
           Process org.gnome.keyring.SystemPrompter exited with status 1
    ... gnome-keyring-daemon[867]: couldn't initialize prompt:
           GDBus.Error:org.freedesktop.DBus.Error.Spawn.ChildExited:
           Process org.gnome.keyring.SystemPrompter exited with status 1

  Maybe being started too soon, before GUI sufficiently
  brought up?

  Added the line
    dbus-update-activation-environment --systemd DISPLAY
  to the xfce case so that dbus knows what the display is
  in /home/geoff/.xinitrc.

  Now, gnome-keyring failing due to
    gnome-keyring-daemon[6053]: couldn't access control socket:
       /run/user/1000/keyring/control: No such file or directory

  So, the prompt thing was fixed but seems to be missing a
  configuration file?

2016-08-03:
  Enabled dhcpcd on boot, since wicd might need it.
    sudo systemctl enable dhcpcd

  This is currently not necessary in the Heritage Center
  since WICD manually configures that interface.  Need to
  test out with my apartment wireless/ether_cable and
  coffee shop.

2016-08-03:
  Made changes to PAM configuration files so that gnome-keyring
  automatically starts on xfce login.  Created the directory
    /home/geoff/info/ArchLinux/admin/Config_Files/
  to track system changes if they get stepped on.  I changed
  the files "login" and "passwd" in /etc/pam.d based on info
  from Arch Linux wiki.

  [[ eliminated ~/info/ArchLinux/admin on 2020-10-28
     since it has fallen into disuse ]]

  Also, reset default gnome-keyring and geoff linux password
  to agree.  Also as geoff tweaked session-managers startup
  applications to start up all the gnome-keyring component.

  Chrome is still asking me for the keyring password
  when started for the first time.  Do I need to fire
  it off manually in the .xinitrc scripts or is
  org.gnome.keyring.SystemPrompter still broken?

  There was a typo in /etc/pam.d/login which was not autostarting
  the gnome_keyring deamon.  Fixed it.  Now when I login at the
  console daemon is now running.  Chrome still making me type in
  keyring password to "unlock" the keyring.

  Was able to get the hulu password saved and relogged in
  with it in Chrome.  Firefox doesn't seem to be using it.
  Able to view and potentially manupulate hulu password
  in the keyring with seahorse.

  I will just live for now having to manually unlock the
  keyring with my login password.

2016-08-03:
  I am seeing both Intel and NVIDIA controllers

    $ lspci | egrep 'VGA|NVIDIA'
    00:02.0 VGA compatible controller: Intel Corporation HD Graphics
      530 (rev 06)
    01:00.0 3D controller: NVIDIA Corporation GM108M [GeForce 940M]
      (rev a2)

  I beleive the NVIDIA proprietary drivers are functioning
  correctly.

  My question is: Am I just using the NVIDIA GPU only or is it
  functioning in some sort of OPTIMUS mode where the Intel chipset
  is plumbed into the display and the NVIDIA GPU does rendering
  that gets ported over to Intel chipset via PCI bus?  Most info
  I find indicates the former, but many Optimus branded laptops
  don't connect the NVIDIA GPU in anyway to video output.  Sort
  of a poor man's Tesla card.

  To finially get to the bottom of this,
    Pacman: mesa-demos nvdock nvidia-settings

  Running the command

    $ glxinfo | grep NVIDIA
    server glx vendor string: NVIDIA Corporation
    client glx vendor string: NVIDIA Corporation
    OpenGL vendor string: NVIDIA Corporation
    OpenGL core profile version string: 4.5.0 NVIDIA 367.35
    OpenGL core profile shading language version string: 4.50 NVIDIA
    OpenGL version string: 4.5.0 NVIDIA 367.35
    OpenGL shading language version string: 4.50 NVIDIA
    OpenGL ES profile version string: OpenGL ES 3.2 NVIDIA 367.35

  with and without the grep, seems to indicate that only the
  NVIDIA GPU is at play.  I have plumbed X into using only the
  NVIDIA card.  The Intel chipset is just sitting there, so
  the NVIDIA card is talking directly with the LCD laptop
  display.  Running nvidia-settings also indicates that the
  NVIDIA GPU is talking directly to the display.  Various
  internet blogs indicate that under Linux only one of the
  chipsets of an OPTIMUS laptop is being used at anyone time.

2016-08-03:
  Went ahead and installed CUDA infrastructure into /opt/cuda/.

    Pacman: cuda pycuda-headers python-pycuda

  This dragged in gcc 5.4.0 since CUDA doesn't seem to be working
  with gcc 6.0+ right now.

2016-08-03:
  Disabled dhcpcd on boot, since it is giving me trouble withi
  wireless connections.

    $ sudo systemctl disable dhcpcd

  I seem to have problems connecting to wireless networks
  when dhcpcd enabled at boot.  Autoconnect networks connect
  on the link level even without starting XFCE.

2016-08-05:
  Decided to install pulseaudio.  Seems to be becoming the
  defacto standard in Linux desktop environments.

  When running vlc from terminal I see the following error
  messages:

    [00000000020430c8] pulse audio output error: PulseAudio server
       connection failure: Connection refused
    [0000000001f5a148] core libvlc: Running vlc with the default
       interface.Use 'cvlc' to use vlc without interface.

  otherwise, vlc works fine.

  Before installing, I am reading up on pulseaudio and listing
  some factoids:

    Features Pulseaudio gives you.
      Networking support (P2P and server mode)
      Per-application volume controls
      Better cross-platform support
      Dynamic latency adjustment, which can be used to save power

    The main command to configure a running server is pacmdr.:
      Use pacmd --help

    The Arch Linux Pulseaudio troubleshooting guide sometimes
      fixes problems via alsa-mixer and other utilities in
      the alsa-utils package.

    Should be started automatically by desktop environment, but
    can be started and stopped manually.
      $ pulseaudio --start
      $ pulseaudio --kill

    Some of its components have been split out into different
    packages.

      pulseaudio-alsa package:
        Will allow pulseaudio and ALSA to peacefully coexist with
        pulseaudio in charge (recommended).  This will allow ALSA
        devices to use pulseaudio instead of the hardware directly
        and locking other clients out.

      paprefs package:
        GTK GUI for general daemon configuration.

      pavucontrol package:
        GTK GUI for advanced volume control.

      ponymix and pamixer-git(AUR):
        Console (CLI) mixers similar to pavucontrol.

      pasystray(AUR), pasystray-git(AUR):
        System tray apps exist.

  There is a Bluetooth headset setup Arch Linux wiki.  Unless
  one installs older packages from AUR, a bluetooth head set
  will only use pulseaudio,  See the wiki if you ever need to
  go bluetooth.

    Pacman: pulseaudio pulseaudio-alsa paprefs
            pavucontrol ponymix

  Reboot.  No configuration.

  Marked subjective improvement.  Now vlc error stream is:
    [0000000000fae148] core libvlc: Running vlc with the default
       interface. Use 'cvlc' to use vlc without interface.

2016-08-05:
  ogg123 stopped working.  Had to change /etc/libao.conf

    from:
      default_driver=alsa
      dev=default

    to:
      default_driver=pulse

  See https://bbs.archlinux.org/viewtopic.php?id=158070

  Things now just work.  Even from the console, running ogg123
  will cause pulseaudio daemon to come up.  From thunar clicking
  on a music file brings up vlc.  I am happy.

2016-08-05:
  Postfix was not working because it was completely unconfigured.

  I configured it for local delievery only.  See the directory
    /home/geoff/info/ArchLinux/admin/Config_Files/etc/postfix
  for what I did.

  One key step was to run the newaliases cmd as root.  I did it
  from /etc/postfix directory, don't know if location matters.
  It created the /etc/postfix/aliases.db file.

    $ file /etc/postfix/aliases.db
    /etc/postfix/aliases.db: Berkeley DB (Hash, version 9,
                                          native byte-order)

  Local mail delievery now works!  Mail for root gets sent
  to geoff.  Configured all nonlocal email to fail.  The mailx
  command works.

2016-08-06:
  Configured Claws mail also snags the local mail out
  of /var/spool/mail/geoff.

2016-08-11:
  Install Clojure.  Optional dependency rlwrap permits REPL
  to use readline library.
    Pacman: clojure rlwrap

2016-08-13:
  Installed Lieningen Clojure development environment into
  geoff userland.  Lieningen similar to SBT, so probably
  won't use either system Clojure nor system Scala.

  Downloaded a shell script called lein and installed it
  in the geoff ~/local/bin directory.

    cd ~/local/bin directory
    wget https://raw.github.com/technomancy/leiningen/stable/bin/lein

  ~/bin is for "my stuff"; ~/local/bin is for "other's stuff" I
  build/configure; and ~/opt is for external programs/suites I
  install.  The later two used like /usr/local and /opt except
  done in userland.  So far Arch Linux pacman has put nothing in
  /usr/local.  Since now that I am not a totally "unempowered"
  user, maybe /usr/local is a better place than ~/local for this
  type of stuff.  Maybe done via my own pacman packages?

2016-08-13:
  Installed zip and unzip utilities.
    Pacman: zip unzip

2016-08-13:
  Attempting to install and configure the rtorrent client.
    Pacman: rtorrent libtorrent tmux

  The libtorrent library probably not necessary.  tmux allows
  terminals to be unassociated and reassociated with an
  x-windows session.  Similar to screen, not sure how it will
  be used.  Under the geoff user, created a ~/.rtorrent.rc
  file and configured it using the Arch Linux rtorrent wiki.
  In the rc file was the line
    session = /home/geoff/.rtorrent.session
  where I decided to name a directory that enables rtorrent to
  "remembers things" different than the default name of .session,
  and created it too.  Also created watch and torrent directories
  too, also configured in .rtorrent.rc.

  After all this, I realized, that for any of this to work, I
  will need to be able to setup a "port forward" on whatever
  router is connecting me to the Internet.

2016-08-14:
  Installed ABS (Arch Build System) to give me the ability to
  build packages locally that pacman -Syu ... install.  Similar
  in many ways to FreeBSD Ports Collection except that instead of
  installing it, it creates a package that I can use pacman to
  install.
    Pacman: abs

2016-08-14:
  Got rtorrent to work with the help of a tutorial:

    https://harbhag.wordpress.com/2010/06/30/tutorial-using-rtorrent-on-linux-like-a-pro/

  The ncurses program rtorrent uses ^S and ^Q, so I had to do
  some stty magic in the /home/geoff/bin/rt wrapper script to
  turn off their special flow control meaning.  The program
  needs an *.torrent file to know what to download.  Able to
  paste an URL to a *.torrent file into the CLI as well as
  navigate to a *.torrent file I saves in the file system.

  Also possible to configure rtorrent to pick up *.torrent files
  from a ~/watch directory and deliever downloads to a ~/torrent
  directory.

  In a misguided attempt to configure rtorrent as a systemd
  service, I installed a prerequisite for the AUR
   rtorrent-systemd package.

    Pacman: xorg-xhost

  This AUR is more for headless servers running many instances
  of rtorrent.  Also, the use case of tmux and screens - where
  you are running rtorrent in a terminal on a server and attach
  the terminal to various X-servers.

2016-08-14:
  Installed a variety of DVD related software.

    Pacman: libdvdcss libdvdnav brasero unrar handbrake handbrake-cli

2016-08-19:
  Installed TOR (2nd generation onion router) and ARM
  (Anonymizing Relay Monitor).

    Pacman: tor arm

  as first steps in anonymous internet browsing (other activity?).

  Don't Torrent over TOR!  Torrent is already secure, all others
  can deduce is that you are using it.  Torrent is a bandwidth
  hog, also, using it over TOR can compromise TOR!

  Advise for the paranoid:  Don't enable or install plugins into
  the Tor browser.  Watch for https (Tor Browser tries to force
  https).  Don't trust what you download and don't view it while
  online (do not ignore this!!!).  There is a PDF viewer built
  into the Tor browser.  The more Tor users you are around, the
  harder to reverse engineer what you are up to.

  See:
    https://www.torproject.org/download/download.html#warningi

  Installed tor-browser via AUR:
    https://aur.archlinux.org/tor-browser-bin.git

  Build failed due to:
    ERROR: One or more PGP signatures could not be verified!

  As per tor-browser website I ran
    gpg --keyserver pgp.mit.edu --recv-keys 2E1AC68ED40814E0

  Built and installed.

  Questions: What is role of SOCKS5 and do I need to install it?

2016-08-19:
  All the bit torrent sites using something called magnet links.
  I want the actual .torrent files.  There is an AUR called
  "magnet2torrent", but when I tried to build it, it had a
  missing dependency, python-libtorrent-rasterbar, which does
  not seem to be in the AUR anymore.

  Anycase, python-libtorrent-rasterbar seems to be on the
  way to be deprecated.  I'll install a better C++ library
  replacement and wait and see if magnet2torrent gets updated
  to use it:

    Pacman: libtorrent-rasterbar

2016-08-19:
  Installed a space "shoot-em-up" game called astromenace.
    Pacman: astromenace

2016-08-20:
  Heres how to check the mouse polling interval.  Both mice
  are USB mice.

  To get their address:

    $ lsusb
    Bus 002 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub
    Bus 001 Device 004: ID 1bcf:2c81 Sunplus Innovation Technology Inc.
    Bus 001 Device 003: ID 04ca:3015 Lite-On Technology Corp.
    Bus 001 Device 002: ID 046d:c52f Logitech, Inc. Unifying Receiver
    Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub

  Item 3 my touchpad, item 4 is my cordless Logitech mouse.
  In what follows, Ivl is the update interval.
  (Aside: Item 2 is my video camera.  Its update interval is 16ms)

    $ sudo grep -B3 -A7 046d.*c52f /sys/kernel/debug/usb/devices
    T:  Bus=01 Lev=01 Prnt=01 Port=02 Cnt=01 Dev#=  2 Spd=12   MxCh= 0
    D:  Ver= 2.00 Cls=00(>ifc ) Sub=00 Prot=00 MxPS= 8 #Cfgs=  1
    P:  Vendor=046d ProdID=c52f Rev=30.00
    S:  Manufacturer=Logitech
    S:  Product=USB Receiver
    C:* #Ifs= 2 Cfg#= 1 Atr=a0 MxPwr= 98mA
    I:* If#= 0 Alt= 0 #EPs= 1 Cls=03(HID  ) Sub=01 Prot=02 Driver=usbhid
    E:  Ad=81(I) Atr=03(Int.) MxPS=   8 Ivl=2ms
    I:* If#= 1 Alt= 0 #EPs= 1 Cls=03(HID  ) Sub=00 Prot=00 Driver=usbhid
    E:  Ad=82(I) Atr=03(Int.) MxPS=  20 Ivl=2ms

    $ sudo grep -B3 -A7 04ca.*3015 /sys/kernel/debug/usb/devices
    T:  Bus=01 Lev=01 Prnt=01 Port=06 Cnt=02 Dev#=  3 Spd=12   MxCh= 0
    D:  Ver= 2.01 Cls=e0(wlcon) Sub=01 Prot=01 MxPS=64 #Cfgs=  1
    P:  Vendor=04ca ProdID=3015 Rev= 0.01
    C:* #Ifs= 2 Cfg#= 1 Atr=e0 MxPwr=100mA
    I:* If#= 0 Alt= 0 #EPs= 3 Cls=e0(wlcon) Sub=01 Prot=01 Driver=btusb
    E:  Ad=81(I) Atr=03(Int.) MxPS=  16 Ivl=1ms
    E:  Ad=82(I) Atr=02(Bulk) MxPS=  64 Ivl=0ms
    E:  Ad=02(O) Atr=02(Bulk) MxPS=  64 Ivl=0ms
    I:* If#= 1 Alt= 0 #EPs= 2 Cls=e0(wlcon) Sub=01 Prot=01 Driver=btusb
    E:  Ad=83(I) Atr=01(Isoc) MxPS=   0 Ivl=1ms

  Therefore, the Logitech mouse gets updated every 2ms and
  the touch pad gets updated every 1ms.  These are excellent
  and nothing needs to be adjusted.  Polling rates of about
  10ms can affect game performance.

  The Arch Linux Mouse polling rate Wiki covers how to change
  the polling rate via systool and modprobe.

2016-08-20:
  Tried to install a game called aquaria from two AUR,
  aquaria-ose and aquaria-hib.  Now, aquaria-ose is an
  open source engine, built and installed no problem.
  But, aquaria-hib is a wrapper for the commercial data
  files for the game.  Needs the actual data files from
  the Humble Bundle release.  The only "sources" for these
  is the manufacturer or questionally legal torrent sites.
  Torrent sites business models seems to be for you to pay
  to avoid their black hat spy/adware/captcha-ware.
  Lifetime memberships to sites that only been around for
  a year and "popular" for the last couple of months?
  Sounds like a site about ready to be shutdown.

  I have no desire to steal anyone's intellectual property
  nor pay real money for things not really important, like
  games.

  I uninstalled the game-engine:

    $ sudo pacman -Rsu aquaria-ose

  Lesson learned: So far, the only torrent "culture" I have
  found is one looking to ripoff the naive.  Have not yet
  found any equivalent to the pre-internet BBS culture.

  Along the way, I did manage to install cmake as a dependency.

    Pacman: cmake

2016-08-21:
  I am concerned that the Internet is becoming some sort of
  new corporate/government controlled mass media.  Especially
  chilling is the influence certain buiness interests are
  having on the W3C standards organization.  DRM is a disgrace.

  Culture is important.  Several computer cultures evolved into
  an Internet culture - crushing the monopoly of broadcast/cable
  media control of public information access.  I need to stay
  connected to any evolving post-consumerized hidden internet
  cultures.  Unempowered academics created ArXiv is an important
  example of such a (not so hidden) subculture, this time against
  the academic journals designed to keep outsiders out.  Regular
  "Google" searches don't pick up this type of technical info.

  Next step, is to examine Tor website https://www.torproject.org
  for clues to any evolving, possible hidden, clutures I need to
  be aware of.  Also, learn the tools needed for to navigate such
  cultures.  Starting with arm.

2016-08-22:
  Very good technical information on Tor website, with links to
  academic technical papers.

  Topics to follow up on:
  1. Hidden services
  2. Zooko's Triangle relating to hidden services names:
       - Human Readable
       - Decentralized
       - Secure
     Zooko Wilcox-O'Hearn conjecture is that no single kind
     of name can achive more than two.
  3. Replace traditional VPNs, which reveal the exact amount
     and timing of communication - which locations have employees
     working late, which locations have employees consulting
     job-hunting websites, which research divisions are
     communicating with the company's patent lawyers?
  4. ARM (Anonymizing Relay Monitor): The arm command works
     similarly to how top works for system usage.  Provides
     statistics for:
       - bandwidth, cpu, and memory usage
       - relay circuit configuration
       - logging events
       - connection details (ip, hostname, figerprint,
                              consensus data)
  5. Atlas: https://atlas.torproject.org/ site providing
     an overview of the Tor network.
  6. STEM: Python controller library for Tor.

2016-08-22:
  Configured WICD to use google's DNS 8.8.8.8 over comcast's
  DNS 75.75.75.75 on the Heritage Center's two working WIFI
  hotspots.  Not sure if I can trust Google any more than
  Comcast.  Need to research.

2016-08-28:
  Some games and a flight simulator that were installed.
    Pacman: flightgear 0ad 0ad-data

2016-08-29:
  Installed some Haskell Arch Linux packages.
    Pacman: haskell-gtk haskell-connection
    Pacman: haskell-comonad
    Pacman: haskell-contravariant haskell-contravariant-extras
    Pacman: haskell-free
    Pacman: haskell-juicypixels

  Quite a bit of the Haskell ecosystem was pulled in when I
  installed these.

2016-08-30:
  Installed Haskell packages needed to use comonads.
    Pacman: haskell-project-template
    Pacman: haskell-haddock-api haskell-haddock-library
    Pacman: ghc-mod haskell-ghc-mod

  This will allow the use of comonads but not quite enough
  to use codo notation.  The codo-notation Cabal package does
  not seem to be made into an Arch Linux pacman package.

2016-09-01:
  Installed a modern Lisp called Racket.

    Pacman: racket racket-doc

  Formally known as PLT-Scheme.  Very good beginner tutorials
  and documentation.  Might be a good first language for my
  children.  Wish to compare it to Clojure, also a LISP.
  If you familiar with Racket, it makes learning Haskell a
  lot easier.

2016-09-04:
  Seems regular search engines more useful then tor search
  engines for finding *.onion sites.

  Note to paranoid: Use the tor browser for this, even
                    if you are using DuckDuckGo.

2016-09-05:
  Noticed that "man cabal" fails due to read error.  A few
  files in /usr/share/man/man1 have wrong permissions.  Here
  is how I found them:

  # cd /usr/share/man/man1
  # ls -l | egrep -v '(\-rw\-r\-\-r\-\-|^l|^total)'
  -rw------- 1 root root   1045 Aug  6 00:31 cabal.1.gz
  -rwxr-xr-x 1 root root   2055 Jun 22 20:32 google-chrome.1.gz
  -r--r--r-- 1 root root    557 Mar  2  2016 ldns-config.1.gz
  -r--r--r-- 1 root root  76592 Aug 20 14:19 mail.1.gz
  -r--r--r-- 1 root root   3139 Jun 29  2014 shell-quote.1p.gz
  -r--r--r-- 1 root root   1869 Dec  7  2015 toast.1.gz

  To get just the names:

  # ls -l | egrep -v '(\-rw\-r\-\-r\-\-|^l|^total)' | sed 's/.* //'
  cabal.1.gz
  google-chrome.1.gz
  ldns-config.1.gz
  mail.1.gz
  shell-quote.1p.gz
  toast.1.gz

  To fix the problem:

  # chmod 644 $(ls -l | egrep -v '(\-rw\-r\-\-r\-\-|^l|^total)' | sed 's/.* //')

2016-09-10:
  Installed non-free media decodings for gstreamer library.
    Pacman: gst-libav

  I noticed this as a missing optional dependency when doing
  some "pacman -Qi".

2016-09-11:
  Installed X-Screensaver.
    Pacman: xscreensaver

  I can now lock my screen in the coffee shop with a Ctrl-Alt-l.
  Hundreds of screen savers, set up randomly.

2016-09-11:
  Noticed that
    $ pacman -Qi mesa
    ...
    Optional Deps : opengl-man-pages: OpenGL API man pages
                    mesa-vdpau: Accelerated video playback
                    libva-mesa-driver: Accelerated video playback
    ...

  So I am missing some video capability.

2016-09-12:
  Install opengl man pages and accelerated playback functions.

    Pacman: opengl-man-pages
    Pacman: mesa-vdpau libva-mesa-driver

  The last two are optional dependecies for the mesa package.
  Mesa is an open source implementation of opengl.

2016-09-12:
  From the Arch Linux hardware accelleration wiki:

    - For Intel Graphics use VA-API
    - For NVIDIA cards use VDPAU
    - For AMD cards you can use both (with mesa)

  There are two specific types of drivers for VA-API and VDPAU
    - libva-vdpau-driver, which uses VDPAU as backend for VA-API
    - libvdpau-va-gl, which uses VA-API as a backend for VDPAU
    - For pre-2007 cards see XvMC

  Tip: It is recommended to install and configure both VA-API
       and VDPAU to achieve support in different scenarios,
       e.g. Flash doesn't support VA-API but can use the
       VDPAU VA-API backend.

  Warning: Do not use libva-vdpau-driver and libvdpau-va-gl
           together as it will create an (infinite) loop between
           VA-API and VDPAU, which will result in something either
           really bad or really fun.

  OK, for my NVIDIA video card and proprietary drivers, I need
  use the VDPAU facing toward hardware and libva-vdpau-drive
  for an interface to VA-API applications.  The mesa stuff
  implements OpenGL.

  Currently:

    $ pacman -Ss nvidia-utils
    ...
    extra/nvidia-utils 370.28-1 [installed]
        NVIDIA drivers utilities

    $ pacman -Ss libva-vdpau-driver
    extra/libva-vdpau-driver 0.7.4-2
        VDPAU backend for VA API`

    $ pacman -Ss libvdpau-va-gl
    community/libvdpau-va-gl 0.4.0-1
        VDPAU driver with OpenGL/VAAPI backend

  So, install libva-vdpau-driver:

    Pacman: libva-vdpau-driver
    Pacman: vdpauinfo

  Reboot to see what got picked up.

    $ vainfo
    libva info: VA-API version 0.39.2
    libva info: va_getDriverName() returns 0
    libva info: Trying to open /usr/lib/dri/nvidia_drv_video.so
    libva info: Found init function __vaDriverInit_0_35
    Floating point exception (core dumped)

    $ vdpauinfo
    display: :0.0   screen: 0
    Error creating VDPAU device: 1

  Something is wrong.  X seems to be functional.

2016-09-13:
  I "guessed" I would not need the AUR firmware package
  nouveau-fm.

  Actually I guessed right.  Building and installing this package
  just installed data files into /usr/lib/firmware/nouveau where
  it will probably just sit since I am not using the nouveau
  driver.

  After some digging through internet blogs, the errors above
  with vainfo and vdpauinfo, are due to my GEFORCE 940M Optimus
  video card.  It does not have on board video decoding.  I have
  two choices, use the Intel chipset to do this (requires going
  to the open source Nouveau drivers - the NVIDIA drivers package
  blacklists the Nouveau drivers) or just let the CPU do the
  decoding.

  So, uninstalled packages that the NVIDIA card doesn't support,

    Pacman:(Remove) mesa-vdpau  libva-vdpau-driver
    Pacman:(Remove) libva-vdpau-driver

  Running vlc:
    Playing DVD - load average: 0.41, 0.41, 0.32
    Playing MP4 - load average: 0.91, 0.56, 0.38
  So, system not even sweating.

2016-09-17:
  Installing Perl6 via the rakudo AUR package.

  First install some optional dependencies:
    Pacman: gdb, valgrind

  Now, rakudo-git package depends moarvm-git and nap-git from
  the AUR.  Tried pulling down rakudo-git and building it,
  but failed due to above missing dependencies.

    $ git clone https://aur.archlinux.org/rakudo-git.git
    $ git clone https://aur.archlinux.org/moarvm.git
    $ git clone https://aur.archlinux.org/nqp.git
    $ cd moarvm
    $ makepkg -sri
    $ cd ../nqp/
    $ makepkg -sri
    $ cd ../rakudo-git/
    $ makepkg -sri
    ===SORRY!===
    The nqp-m binary is too old

    To automatically clone (git) and build a copy of NQP 2016.09,
    try re-running Configure.pl with the '--gen-moar' option.
    Or, use '--prefix=' to explicitly specify the path where
    the NQP and MoarVM executables can be found that are use to
    build Rakudo.

    ==> ERROR: A failure occurred in build().
        Aborting...

  The npq last updated 2016-08-31.

    $ cd ../npq
    $ git -fetch origin
    $ git status
    On branch master
    Your branch is up-to-date with 'origin/master'.
    Untracked files:

        nqp-2016.08.1-1-any.pkg.tar.xz
        nqp-2016.08.1.tar.gz
        pkg/
        src/

    nothing added to commit but untracked files present
    (use "git add" to track)

  OK, the AUR repo version of npq is out of date.

  Is it possible to build rakudo against my versions in ~/local?

  First, get the AUR versions I just installed out of the way.
  See if I can install what was pulled in from AUR into ~/local.
  (Doing another makepkg will fail since I remove the
  prerequisits.)

    $ sudo pacman -Rsu nqp moarvm
    $ cd src/rakudo
    $ perl Configure.pl --prefix=/home/geoff/local/ --backend=moar --gen-moar

  Well, the first thing the build does is clone npq, go figure.
  Installed a new version of nqp intp ~/local/bin.

    $ make test
    $ make install

  This time all the tests suceeded.

  Perl6 seems to work,  still complains that I should do a
  `panda install Readline`, so lets get panda working.  Using
  the AUR version might require some forcing, so I won't do
  that.  See if the github version will now build.

    $ cd ~/build/Perl_6/panda
    $ git status
    $ rm -rf .panda-work

  Now, both

    $ perl6 bootstrap.pl
    $ perl6 bootstrap.pl --prefix="/home/geoff/local"

  fail in the same way as before.

  Give up until perl6 more stable on Arch.

2016-09-23:
  Installed pypy for python3 with optional tk dependency.
    Pacman: pypy3, tk

  Find all pythagorian triples whose sides are less than 1500.

    pypy3: 11.6047 seconds
    andaconda python 3: 122.9877 seconds

  The JIT compiler makes pure python code run very fast.  As
  I understand it, does not do much for things with C under-
  -the-hood like numpy.

2016-09-25:
  Noticed that after a system shutdown with the command

    $ sudo shutdown -h now

  from the X environment resulted with the wireless not
  coming up after the reboot.  Nor could I find any wireless
  access points in the coffee shop until after the next
  reboot.  Once wireless access established, everything the
  same as before when system rebooted.  Bringing X down
  properly must save "something" "somewhere" to enable the
  network to come up on reboot before anyone logs in.

2016-10-13:
  Been lazy lately and have not kept up on this log lately.
  Going through my shell history to reconstruct what I have
  been up to.

  Decided to use stack as my Haskell programming environment.
  Everything will be local to my regular user "geoff".  The
  Haskell Platform website now recommends the use of stack.

  Uninstalled system wide ghc and lots of haskell "stuff"
  I used Pacman to install to get comonads to work.

    Pacman(Remove): haskell-gtk haskell-connection haskell-comonad
    Pacman(Remove): haskell-contravariant
    Pacman(Remove): haskell-contravariant-extras
    Pacman(Remove): haskell-free haskell-juicypixels
    Pacman(Remove): haskell-project-template haskell-haddock-api
    Pacman(Remove): haskell-haddock-library ghc-mod
    Pacman(Remove): haskell-ghc-mod
    Pacman(Remove): ghc cabal-install happy alex

  From userland, installed stack to /usr/local/bin via

    $ curl -sSL https://get.haskellstack.org/ | sh

  It asked for sudo password once while installing it.
  On CentOS, this trys to use yum (yuck!).  See
  HaskellAdmin.txt for my adventures with stack.

  Other stuff installed -

    Pacman: mplayer
    Pacman: whois

2016-10-15:
  I may have lost some information in this file due to updating
  this file with a version of it in my scheller-linux-environment
  GitHub repo.  To avoid this confusion in the future, I created
  the following symlink:

    $ cd ~/info/ArchLinux/admin
    $ ln -s ~/devel/scheller-linux-environment/info/ArchLinuxAdminLogs

  so now there will only be one copy of my admin logs.  There is
  another subdirectory ~/info/ArchLinux/admin/Config that
  contains specific info about the changes I have made to the
  system configuration files, for example

    $ ls ~/info/ArchLinux/admin/Config_Files/etc/pam.d
    login  login_orig  passwd  passwd_orig

  Unfortunately, I can't share this with the rest of the world
  due to security reasons.

2016-10-22:
  Installed speedtest-cli and iperf to measure internet bandwidth.

    Pacman: speedtest-cli iperf

  speedtest-cli is a python script that gives a
  command-line-interface to the
  http://www.zdnet.com/broadband-speedtest/ website.  I find it
  alot more easy and user friendly than the actual website.

  iperf is both a client and server that can perform TCPi
  speed test between two systems.

    On server run: $ iperf -s
    On client run: $ iperf -c host

  where host is IP of server.  Man page for iperf is quite
  complete.  Can also run UDP tests.

2016-10-24:
  Something wrong with XFCE gui environment.  Not working
  smoothly.

2016-10-25:
  Over last few days I noticed XFCE GUI environment getting
  slower, terminals & browser windows failed to spin up.

  Previously, I have noticed that I am getting quite a
  few Thunar related daemon processes spun up:

    Thunar --sm-client-id 2c76304e3-138f-44e2-9910-e77c65e60ab5 --daemon

  Well, today GUI-land unusable and several hundred of them are
  running.

  I don't know if this has anything to do with it, but the
  XFCE GUI environment really started steadily going downhill
  after a pacman update that brought in gtk/gtk3 stuff.

2016-10-25:
  Try uninstalling Thunar related stuff:

    Pacman(Remove): thunar thunar-archive-plugin
    Pacman(Remove): thunar-media-tags-pluggin thunar-volman

  Before reinstalling, I rebooted.  Not only was Thunar file
  manager still there, but all the daemon processes too.
  XFCE-DE still barely usable.  Punt on the reinstall for
  now, but I suspect I will need thunar-volman to mount
  my external HD.

2016-10-26:
  GUI-land completely unusable until I slew off hundreds of
  these Thunar deamon processes via:

    $ ((jj = 2600)); while (( jj++ < 2826))
    > do
    >    kill -15 $jj
    > done

  in another virtural console.  I left 6 of them running.
  Now, the desktop environment is functioning as it should.

  There is nothing on internet about XFCE/Thunar issues and
  a pacman update when I logged on didn't drag in any possibly
  related gtk/thunar/xfce updates.

2016-10-26:
  I going to research completely redoing my XFCE Desktop
  Environment.  I think I will bring in a Display Manager.
  This, I hope, will make my system more "convensional" and
  thus more close to a tested "configuration."

2016-10-26:
  Installed lightdm display manager

    Pacman: lightdm lightdm-gtk-greater

  and some optional dependencies

    Pacman: accountsservice xorg-server-xephyr

  and enabled it

    $ sudo systemctl enable lightdm

  reboot

  As I suspected, dark screen.  I will need to figure out
  how to configure it to use the NVIDIA card like I did
  for startx in my ~/.xinitrc file.

  But!!! when I jump over to another virtual terminal, and
  run startx, XFCE spins up perfectly with only one
  instance of '/usr/bin/thunar --daemon' running!

2016-10-26:
  No wireless running.  Lets disable lightdm.

    $ sudo systemctl disable lightdm

  and reboot.

  System came back up, started xfce via startx, network
  configured again, but 7 'Thunar --sm-client-id ... --daemon'
  were spun up.

  Interesting...

2016-10-26:
  Every time a "shutdown" from within Xfce, but not "log out",
  the next time I startx, I get one more of these
  'Thunar --sm-client-id ... --daemon' running.  I am up to 11
  of these now.  I will look into Xfce startup configurations.

2016-10-27:
  Finally fixed Xfce GUI-land problems.

  Revisionist history to follow (took a while to work out):

  In 'Sessions and Startup' Xfce config GUI, checked 'Prompt
  on logout' and unchecked 'Launch thunar in daemon mode'.
  Killed off all the running Thunar Daemons.  On 'Log Out'
  checked 'Save session for future logins'.

  On reboot, now only one Thunar runs in Daemon mode.

  So, I have an unconfigured display manager installed that
  I have disabled.  In retrospect, I could have fixed original
  problem with kill command and GUI settings.

  Never had to reinstall thunar, thunar-archive-plugin,
  thunar-media-tags-pluggin, and thunar-volman.  My external
  hard drive mounts just fine.

2016-11-16:
  Updated Google Chrome,

    $ cd ~/build/AUR/google-chrome_build/google-chrome
    $ git pull origin
    $ makepkg -sri

2016-11-19:
  I "Uninstalled" anaconda via

    $ cd ~/opt
    $ rm -rf anaconda3/

  I am finding the Ipython that comes with Arch much better
  configured "out of the box."  Also, I like the direction
  that pypy is taking the language better than that of the
  python scientific stack.  There are too many old fossils
  in the scientific community unwilling to leave Python 2.7
  in the dust.

2016-11-21:
  Noticed /etc/bashrc.pacnew and /etc/local.gen.pacnew files.

  I simply replaced /etc/bashrc with the first, the only
  difference was with prompts, which I override anyway.

  Replaced /etc/local.gen with new version after uncommenting
  the line

    #en_US.UTF-8 UTF-8

  Also /etc/ssh/sshd_config.pacnew, after editting in changes
  to new version, the only differences now are

    # diff sshd_config sshd_config.pacnew
    1c1
    < # $OpenBSD: sshd_config,v 1.98 2016/02/17 05:29:04 djm Exp $
    ---
    > # $OpenBSD: sshd_config,v 1.99 2016/07/11 03:19:44 tedu Exp $
    38d37
    < # obsoletes QuietMode and FascistLogging

  so, I replaced it too.

  Finally, I replaced /etc/pacman.d/mirrorlist with latest
  version.  I uncommented the Worldwide, Canadian, and US
  servers.  Will continue to do this periodically in future
  without noting it in this log file.

2016-11-25:
  Uninstalled flightgear because its data file too big for slow
  coffee shop internat connection making "pacman -Syu" too slow.
  Maintainers might consider breaking up data file into smaller
  chunks.

    Pacman(Remove): flightgear flightgear-data

  Added a git repo viewer,

    Pacman: gitg

2016-12-05:
  Uninstalled 0AD due to data files taking too long to down
  load on slow connections.

    Pacman(Remove): 0ad 0ad-data

2016-12-17:
  Installed blender.

    Pacman: blender

2016-12-17:
  Reset the timezone to East Coast.

    $ timedatectl list-timezones | grep America/Ne
    America/New_York

    $ sudo timedatectl set-timezone America/New_York

2016-12-17:
  Noticed system time about 4 minutes behind my cell
  phone's time.  Install network time deamon ntpd.

    Pacman: ntp

  When I went to figure out how to turn it on, I discovered
  that systemd has a simple client only time deamon built in,
  so I will use it instead.

    Pacman(Remove): ntp

  Now configuren systemd to use ntp time:

    $ sudo timedatectl set-ntp true

2016-12-28:
  Installed the C++ Boost library header files.

    Pacman: boost

  The boost libraries, boost-libs, were already installed.

  When building software with Boost, -I or -L flags not
  needed since headers and libs are installed under /usr/include
  and /usr/lib repectively.

2017-01-11:
  Noticed that both chrome and firefox not displaying asian
  character sets correctly.  Type installing more fonts.

    Pacman: texlive-langjapanese texlive-langchinese

  Did not help.  I got these via:

    $ pacman -Ss font | less

  and looked for "chinese" and "japanese".

  Gnu's gnu-free-fonts, which are a set of free OpenType fonts
  covering the Unicode character set, are installed.

    Pacman: ttf-croscore

  Above are Chrome OS core fonts, also did not help.

    Pacman: adobe-source-han-sans-cn-fonts
    Pacman: adobe-source-han-sans-jp-fonts
    Pacman: adobe-source-han-sans-kr-fonts
    Pacman: adobe-source-han-sans-otc-fonts
    Pacman: adobe-source-han-sans-tw-fonts
    Pacman: opendesktop-fonts otf-ipafont
    Pacman: ttf-mph-2b-damase ttf-sazanami
    Pacman: ttf-hannom ttf-hannom ttf-baekmuk
    Pacman: ttf-hanazono wqy-bitmapfont wqy-microhei
    Pacman: wqy-microhei-lite wqy-zenhei

  Installed everything Chinese, Japanese, and Korean
  font wise I could find.  Now Baidu displays correctly
  in Chrome and Firefox.

2017-01-19:
  Changed time back to Mountain time.

    $ sudo timedatectl set-timezone America/Denver

  Note: Clock in XFCE gui did not update until I
        restarted the XFCE session.

2017-01-25:
  Installed bc.  GNU extension to POSIX command line
  calculator/math language.

    Pacman: bc

  Need to set scale to something greater than 0 for
  division to make sense.  When scale = 0, then
  the % operator is the integer mod operator with
  the usual C language negative value behavior for %.

2017-01-28:
  Installed exiftool to extract metadata from files.

    Pacman: perl-image-exiftool

  Installed this to ensure that JPG files uploaded to
  Facebook did not contain GPS metadata.  This perl
  script seems to work on a large variety of file types.

2017-01-28:
  Installed Markdown.pl perl script to render markdown
  files (like GitHub README.md files) as html.

    Pacman: perl-text-markdown

  Use -html4tags to render as HTML as opposed to XML,
  example -

    $ Markdown.pl -html4tags README.md > README.html

  For more info see:

    https://daringfireball.net/projects/markdown/

  Unfortunately, this version does not quite work the
  same as what GitHub does.

2017-01-29:
  Installing Haskell Stack infrastructure and the Stack
  build tool from the Arch Linux repos

    Pacman: stack haskell-stack

2017-02-01:
  Installed networking components.

    Pacman: python2-iwscan python2-wpactrl

  Noticed following warnings in /var/log/wicd/wicd.log -

    2017/01/21 19:50:13 :: WARNING: python-iwscan not found, falling back to using iwlist scan.
    2017/01/21 19:50:13 :: WARNING: python-wpactrl not found, falling back to using wpa_cli.

  At several wifi hotspots, not all, I've had to configure static IP addresses.

2017-02-01:
  Found the following orphaned packages,

    $ pacman -Qtdq
    cmake
    colord
    elfutils
    enet
    gloox
    gstreamer0.10-base-plugins
    id3lib
    js17
    libgnomeui
    libkeybinder2
    libnm-glib
    miniupnpc
    python-path
    vte

  Removed them via,

    $ sudo pacman -Rns $(pacman -Qtdq)

  Here is what actually got removed,

    gnome-mime-data-2.18.0-7, gnome-vfs-2.24.4-10,
    gstreamer0.10-0.10.36-4, gstreamer0.10-base-0.10.36-3,
    jsoncpp-1.8.0-1, libbonobo-2.32.1-4, libbonoboui-2.24.5-3,
    libgnome-2.32.1-6, libgnome-data-2.32.1-6,
    libgnome-keyring-3.12.0-2, libgusb-0.2.9-1,
    libidl2-0.8.14-4, libnm-1.6.0-4, libuv-1.10.2-1,
    orbit2-2.14.19-3, cmake-3.7.2-1, colord-1.3.4-1,
    elfutils-0.168-1, enet-1.3.13-1, gloox-1.0.17-1,
    gstreamer0.10-base-plugins-0.10.36-3, id3lib-3.8.3-16,
    js17-17.0.0-4  libgnomeui-2.24.5-2, libkeybinder2-0.3.1-1,
    libnm-glib-1.6.0-4, miniupnpc-2.0-1, python-path-8.2.1-1,
    vte-0.28.2-8

2017-02-01:
  List all foreign (usually AUR) packages:

    $ pacman -Qmq
    banshee
    dropbox
    gdata-sharp
    google-chrome
    gudev-sharp
    moarvm
    nouveau-fw
    nqp
    pyogg
    pyvorbis
    rtorrent-systemd
    tor-browser-bin

  I will go through these to see which to update and which
  to remove.

    sudo pacman -Rsu nouveau-fw   <- Don't need (see above).
    sudo pacman -Rsu moarvm nqp   <- Clutter from perl6 build

    sudo pacman -Rsu google-chrome <- Remove AUR built chrome.
    sudo pacman -Syu chromium      <- Replace with chromium

      But now have to chromium-widevine from AUR so Netflix
      will work (sorry rms, i'm a bad boy).

        $ cd ~/build/AUR
        $ git clone https://aur.archlinux.org/chromium-widevine.git
        $ cd chromium-widevine
        $ makepkg -sri

    Pacman: chromium

    I'll continue with this later.

2017-02-03:
  Can't seem to be able to remove net-tools:

    $ sudo pacman -Rsu net-tools
    [sudo] password for geoff:
    checking dependencies...
    warning: removing net-tools from target list
    there is nothing to do

    $ pacman -Ss net-tools
    core/net-tools 1.60.20160710git-1 [installed]
        Configuration tools for Linux networking

    $ whence ifconfig
    /usr/bin/ifconfig

  The only tools I regularly used was ipconfig and netstat.

      For ipconfig, use:

        $ ip addr
        $ ip link

      For netstat, use

        $ ss
        $ ip route

  The warning is due to the -Rs option.  With -R, -s means to
  recursively remove all dependencies provided:

    1. They are not required by any other packages.
    2. They were not explicity installed.

  The command

    $ pacman -Sii net-tools

  shows that net-tools is a dependency for 21 installed packages, one of
  which is wicd.

  Therefore, after net-tools was removed from the list of
  packages to be removed, there was "nothing to do".

2017-02-04:
  Installed haveged, a daemon that generates system entropy;

  This speeds up critical operations in cryptographic programs
  such as gnupg (including the generation of new keyrings).

    Pacman: haveged

    $ sudo systemctl start haveged
    $ sudo systemctl enable haveged

2017-02-04:
  Enabled Intel microcode updates:

    $ cat /boot/loader/entries/arch.conf
    title Arch Linux
    linux /vmlinuz-linux
    initrd /intel-ucode.img
    initrd /initramfs-linux.img
    options root=PARTUUID=fd153bda-5bf1-4a49-9728-4f

  Added the 3rd line above.  I finally configured the
  intel-ucode package I installed back in 2016-07-04.

  Configuration from Arch Linux Wiki:
    https://wiki.archlinux.org/index.php/Microcode

  The file /boot/intel-ucode.img last updated 2016-11-15.

2017-02-15:
  Installed strace and ltrace to track system and shared
  library calls of executables.

    Pacman: strace ltrace

  Installed dnstracer, a command which determines where a
  given Domain Name Server (DNS) gets its information from,
  and follows the chain of DNS servers back to the servers
  which know the data.

    Pacman: dnstracer

2017-02-19:
  I have been using either the XFCE menus to power off/reboot
  the system or "sudo shutdown" command when not in X.  I
  looked into more "native" ways to do these things in Arch.
  After 10's of minutes, I did not find anything definitive
  on this topic in the Arch Wikis.  Based on what I read in
  the systemctl man pages I tried, probably foolishly, from
  within an XFCE session:

    $ systemctl poweroff

  The system went down very fast.  When I rebooted, the
  command "ip link" showed no wireless interface.  Bringing
  up XFCE and several reboots did not bring back the wireless
  interface.  The "dmesg | grep firmware" command did not
  indicate that any of the ath10k drivers were loaded.

  After I did the following, I had my wireless interface
  back:

    $ systemctl is-enabled wicd
    enabled
    $ sudo systemctl disable wicd
    ...
    $ sudo systemctl enable wicd
    ...

  After a reboot, all was fine.  I have no idea whether the
  above commands had any effect or the system would have
  "fixed itself" as I have seen it do before.

  Also, when I brought Chromium up, it complained it was
  improperly shutdown.

  Now,

    $ loginctl show-session $XDG_SESSION_ID --property=Active
    Active=yes
    $ loginctl show-session $XDG_SESSION_ID --property=Remote
    Remote=no

  according to the general trobleshooting page on Arch Wiki,
  this indicates that regular users can use the following
  commands (from the cmdline or put in menus):

    systemctl poweroff
    systemctl reboot
    systemctl hibernate
    systemctl suspend

  assuming the following:

    1. systemd and polkit installed
    2. A polkit authentication agent installed, in my
       case it is polkit-gnome.  There is one for XFCE,
       but it is in AUR.

  What I have been using to shutdown and reboot the system
  are commands from a System V compatibility package:

    $ pacman -Qlq  systemd-sysvcompat
    ...
    /usr/bin/halt
    /usr/bin/init
    /usr/bin/poweroff
    /usr/bin/reboot
    /usr/bin/runlevel
    /usr/bin/shutdown
    /usr/bin/telinit
    ...

  The man pages for these commands have the following -

    Note: These are legacy commands available
          for compatibility only.

  I don't know, the native commands don't seem to play nice
  with XFCE and the System V ones are deprecated.

  Posted this question on Arch Linux Newbie Corner Wiki:

    https://bbs.archlinux.org/viewtopic.php?id=223345

  Got some useful feedback.

02-20-2017:
  Figured out why LibreOffice spell checker not working,
  no English dictionary.

    Pacman: hunspell-en

  Might as well add other functionality too.

  For hyphenation rules:

    Pacman: hyphen-en

  Both hunspell and hyphen packages already installed.

  For grammer checking,

    Pacman: languagetool

  For Thesaurus,

    Pacman: libmythes mythes-en

  Spelling and thesaurus features now work, but not spotting
  obvious grammer mistakes.

03-09-2017:
  Installed timidity++ midi player/daemon.

    Pacman: timidity++ timidity-freepats

  Added to bottom of file /etc/timidity++/timidity.cfg:

    dir /usr/share/timidity/freepats
    source /etc/timidity++/freepats/freepats.cfg

  In Thubar file manager, I associated the .mid extension
  with /usr/bin/timidity.

  Firefox gives me the option to play the file or download
  it.  Chromium just gives me a download box.

03-12-2017:
  During a pacman -Syu, before resolving dependencies, pacman
  asked if I wanted to replace extra/nvidia-libgl with
  extra/nvidia-utils.  I said yes.  Made sure I was not in X
  when I did this.  Also, rebooted before starting X.

03-16-2017:
  Today "sudo pacman -Syu" failed.  From Arch Linux Wiki,

  "The upgrade to ca-certificates-utils 20170307-1 requires
   manual intervention because a symlink which used to be
   generated post-install has been moved into the package
   proper."

   Download packages

     # pacman -Syuw

   Remove conflicting file

     # rm /etc/ssl/certs/ca-certificates.crt

   Perform upgrade

     # pacman -Su
     # sudo pacman -Syu

04-02-2017:
  Today, after "sudo pacman -Syu", I had

    $ ls /etc | grep pacnew
    group.pacnew
    gshadow.pacnew
    passwd.pacnew
    shadow.pacnew

  My heart skipped...

  I checked my e-mail for announcements and the Arch-Linux Wiki,
  (actually did a DuckDuckGo search on "arch linux shadow.pacnew")
  and found that the only changes, as shown in git, are the
  removal of hard-coded uuidd and dbus users, which would get
  added back by the dbus and libutil-linux packages.

  The initial response from the wiki was "Standard answer: Ignore
  group/passwd pacnew files."

  Going forward, I will defer to the gods.

04-02-2017:
  X desktop was broken for about a day.

  From /var/log/pacman.log:

    [2017-04-05 11:59] [ALPM] upgraded linux (4.10.6-1 -> 4.10.8-1)
    [2017-04-06 14:46] [ALPM] upgraded nvidia (378.13-4 -> 378.13-5)

  First entry broke it, second entry fixed it.

    $ egrep 'upgraded (linux|nvidia) ' /var/log/pacman.log > hold

  shows that frequently an nvidia rebuild happens
  after a kernel upgrade

    [2017-02-21 12:27] [ALPM] upgraded linux (4.9.9-1 -> 4.9.11-1)
    [2017-02-21 12:27] [ALPM] upgraded nvidia (378.13-1 -> 378.13-2)

    [2017-03-10 17:51] [ALPM] upgraded linux (4.9.11-1 -> 4.10.1-1)
    [2017-03-10 17:51] [ALPM] upgraded nvidia (378.13-2 -> 378.13-3)

    [2017-03-20 12:53] [ALPM] upgraded linux (4.10.3-1 -> 4.10.4-1)
    [2017-03-20 12:53] [ALPM] upgraded nvidia (378.13-3 -> 378.13-4)

    [2017-04-05 11:59] [ALPM] upgraded linux (4.10.6-1 -> 4.10.8-1)
    [2017-04-06 14:46] [ALPM] upgraded nvidia (378.13-4 -> 378.13-5)

  This pairing happens about 1 every 3 or 4 kernel upgrades.

  Moral - When doing pacman -Syu, if you see a kernel upgrade
          without an accompanning nvdia upgrade, wait a few
          days to see if one comes along.

2017-04-15:
  I have some additional insight into what is going on with the
  Nvidia 940M Optimus inabled card which came with this laptop.

  From the following website with reference to Windows 7:

  http://www.tomshardware.com/forum/368288-33-disable-nvidia-optimus-nvidia-card

  "I've got a solution for you, but I don't know if you're
   gonna like it.  Optimus is integrated into your windows,
   so the only way to get rid of it is to reinstall normal
   Windows 7 version (not the one that came with your laptop;
   though, the same key will work of course)."

  My guess is that ACER also hacked up the UFI firmware to
  not allow the "enduser to screw things up" by disabling
  either GPU because Acer's hacked up Optimus drivers assume
  both Nvidia and Intel video hardware are in place.

  The only use case for Optimus is for business endusers who
  frequently take 6 hour airline flights.

2017-04-18:
  Getting Blu-Ray to work.

  Following -> https://wiki.archlinux.org/index.php/Blu-ray

    Pacman: libaacs libbluray

  From http://www.labdv.com/aacs/ download KEYDB.cfg and
  copy it to the ~/.config/aacs directory.

    $ mkdir ~/.config/aacs; cd ~/.config/aacs
    $ wget http://www.labdv.com/aacs/KEYDB.cfg

  From the Arch Linux Wiki:

  "BD+ mainly works by adding errors to the video stream, not
   enough to make it unwatchable due to constant artifacting."
   Requires downloading "fixup" tables from the internet.
   There is an AUR library to fix this, but "libbdplus stopped
   working a long time ago, and for right now there's no open
   source method of playing discs with BD+ protection."

  Start playback with vlc via command line

    $ vlc bluray://dev/sr0
    $ vlc bluray://dev/sr1

2017-04-24:
  Pacman failure today.

    $ sudo pacman -Syu
    [sudo] password for geoff:
    :: Synchronizing package databases...
     core is up to date
     extra is up to date
     community is up to date
    :: Starting full system upgrade...
    warning: openimageio: local (1.7.13-1) is newer than community (1.7.10-2)
    resolving dependencies...
    looking for conflicting packages...
    error: failed to prepare transaction (could not satisfy dependencies)
    :: banshee: installing libsoup (2.58.0-1) breaks dependency 'libsoup-gnome'

  Lets address error first.  Let's uninstall banshee,
  I never use it.

    $ sudo pacman -Rsu banshee
    $ sudo pacman -Syu          # Now works.

  The pacman update was huge, will reboot after putting back
  some optional dependencies the pacman -Rsu removed.

    $ sudo pacman -Syu mono libgme libmtp webkitgtk2

  Took several reboots before system sorted itself out, kernel
  update snuck by me.

  Now, "pacman -Syu" just giving me the warning, so lets
  address that.

    $ pacman -Qi openimageio
    ...
    Required By     : blender  luxmark  openshadinglanguage
    ...
    $ sudo pacman -Syu openimageio blender luxmark openshadinglanguage
    :: Synchronizing package databases...
     core is up to date
     extra is up to date
     community is up to date
    warning: downgrading package openimageio (1.7.13-1 => 1.7.10-2)
    warning: blender-17:2.78.c-3 is up to date -- reinstalling
    warning: luxmark-3.1-4 is up to date -- reinstalling
    warning: openshadinglanguage-1.7.5-1 is up to date -- reinstalling
    :: Starting full system upgrade...
    resolving dependencies...
    looking for conflicting packages...

    Packages (4) blender-17:2.78.c-3  luxmark-3.1-4  openimageio-1.7.10-2
                 openshadinglanguage-1.7.5-1
    ...

  Now, "sudo pacman -Syu" comes up with no warnings or errors.

  Later in the day, "pacman -Syu" updated openimageio to 1.7.13-2.

2017-04-24:
  Enabling DoD CAC reader and certificates.
  From Arch Wiki Common Access Card page.

    $ sudo pacman -Syu ccid opensc
    $ sudo pacman -Syu pcsc-tools     # Optional

  From /etc/opensc.conf uncomment, in two places, the line

    # enable_pinpad = false;

  Now, enable the service,

    $ sudo systemctl enable pcscd.service

  From http://iase.disa.mil/pki-pke/Pages/tools.aspx
  download:

    Trust Store" ->
      "PKI CA Certificate Bundles: PKCS#7" ->
         "For DoD PKI Only - Version 5.0" (ZIP Download)

  I downloaded them to
  ~/info/CAC/Certificates_PKCS7_v5.0u1_DoD.zip
  and unzipped it.

  Using pscs_scan utility, a Dell CAC keyboard works, Cherry CAC
  reader does not.  pscs_scan identifies when I plug the Dell
  keyboard in and when I insert and remove CAC.

  Configured Firefox browser - installed certs in this order:

    1. DoD_Root_CA_2__0x05__DoD_Root_CA_2.cer
    2. DoD_Root_CA_2__0x05__DoD_Root_CA_3.cer
    3. DoD_Root_CA_2__0x05__DoD_Root_CA_4.cer
    4. Certificates_PKCS7_v5.0u1_DoD.pem.p7b

  Note: Based on info/CAC/Certificates_PKCS7_v5.0u1_DoD/README.txt
        file, I deviated from the Wiki and for #4 above installed
        the pem version instead of the der version.

  Missed this step:

    Preferences ->
      Advanced ->
        Certificates tab ->
          Secuity Divices ->
            Browse for /usr/lib/opensc-pkcs11.so

  Unfortunately, Firefox fails to load module.  Punt for now.

2017-05-20:
  From Arch Linux website, www.archlinux.org, it is stated that
  ca-certicates-utils need manual intervention:

    # pacman -Syuw
    # rm /etc/ssl/certs/ca-certificates.crt
    # pacman -Su

  So, package is installed and symlink still there, hmmm...

  Is the symlink suppose to be there or not?  So,

    $ sudo pacman -Syuw ca-certificates-utils
    $ sudo rm /etc/ssl/certs/ca-certificates.crt
    $ sudo pacman -Syu ca-certificates-utils

  Pacman warned me it was reinstalling package.
  Symlink was recreated.

2017-06-02:
  After a "sudo pacman -Syu", the SBT REPL stopped working
  correctly.  Error message indicated that sbt failed to create
  a terminal.  From /var/log/pacman.log the only thing that might
  relate to this was

  [2017-06-02 13:03] [ALPM] upgraded ncurses (6.0+20170429-1 -> 6.0+20170527-1)

  So,

    $ cd /var/cache/pacman/pkg

    $ ls -tr ncurses-* | tail -3
    ncurses-6.0+20170401-1-x86_64.pkg.tar.xz
    ncurses-6.0+20170429-1-x86_64.pkg.tar.xz
    ncurses-6.0+20170527-1-x86_64.pkg.tar.xz

    $ sudo pacman -U ncurses-6.0+20170429-1-x86_64.pkg.tar.xz

  This downgrade temporarily fixed the problem.  For now, I will
  just pull down the pacman tarballs to /var/cache/pacman/pkg
  with "sudo pacman -Syuw" and wait for either an ncurses or
  sbt upgrade.

  [[ See second 2020-02-02 entry ]]

2017-06-04:
  Pacman update followed by a downgrade of ncurses package,

    $ cd /var/cache/pacman/pkg
    $ sudo pacman -Syuw

  Nothing new ncurses/sbt wise,

    $ sudo pacman -Syu

  SBT broken again, so downgrade ncurses again,

    $ sudo pacman -U ncurses-6.0+20170429-1-x86_64.pkg.tar.xz

  SBT now works again.

2017-06-11:
  Brought ncurses up-to-date.  Temporarily fixing SBT/ncurses
  problem by puting the following in my geoff login's
  ~/.bashrc file,

    regExForXtermType='xterm.*'
    [[ $TERM =~ $regExForXtermType ]] && TERM=xterm

2017-06-20:
  Going to Upgrade the system by adding a Solid State Hard
  Drive and increasing memory to 16GiB.

  Some problems to work around:
    1. This Acer E-14 Laptop (E5-491G-70PX) will require removing
       the motherboard for these upgrades
    2. I forgot the UEFI firmware password
    3. The only place to put the SD HD is to replace the DVD drive

  So, I will have a computer repair shop install the upgrades
  and hopefully break into the UEFI firmwere and reset password.

  Since I will nolonger have the internal DVD drive, I will need
  a USB thumb drive for emergency system recovery/access instead
  of booting off the DVD for such.

2017-06-24:
  Had a small computer shop in Bethlehem PA,

    Super Geek Computers
    Owner - J. Powell
    http://supergeekcomputers.com
    484-202-0260

  upgrade memory to 16GB (8GBx2 DDRL) and replace the internal
  DVD drive with an 128GB SSD.  They easily broke into the UEFI
  firmware and changed the boot order to

    1. USB Thumbdrive
    2. New SSD hard drive

  Unfortuately, they could not reset the UEFI firmware password
  without knowing the old one.  They did give me a link to a
  website that would allow me to break in if I needed.

    http://www.tech-faq.com/how-do-i-reset-an-acer-bios-password.html

  They also gave me a 16GB thumbdrive with the latest bootable
  image of Arch Linux on it.

2017-06-26:
  Instead of moving / to the new drive, I decided to just
  install a fresh version of Arch.  This may clear out some
  old cruft too.  The procedure follows the "readme" file
  on the bootable thumb drive, which closely follows the
  Arch wiki beginners guide.

  Approximate intended disk layout:

    New SSD hardrive:
      sda1 -> /boot     512 MiB
      sda2 -> /          63 GiB

    Old hardrive:
      sdb1 -> <unused>  512 MiB  [Kept for comparison]
      sdb2 -> /extra     64 GiB  [Old / comparison for now]
      sdb3 -> Swap       16 GiB
      sdb4 -> /home     741 GiB

  From paper notes I took during install:

  Boot off of the thumbdrive, ethernet cable plugged in,

    # parted -l
    # timedatectl set-ntp true
    # parted /dev/sda
    (parted) mklabel gpt
    (parted) mkpart ESP fat32 1MiB 513MiB
    (parted) set boot on
    (parted) mkpart primary ext4 513MiB 100%
    (parted) print
    Number  Start   End    Size  File System  Name  Flags
       1    1049KB  538MB  537MB    fat32           boot, esp
       2     538MB  128GB  127GB     ext4
    # mkfs.ext4 /dev/sda2
    # mkfs.fat  /dev/sda1
    # mount /dev/sda2 /mnt
    # mkdir /mnt/home
    # mount /dev/sdb4 /mnt/home
    # mkdir /mnt/boot
    # mount /dev/sda1 /mnt/boot
    # mkdir /mnt/extra
    # mount /dev/sdb2 /mnt/extra

  Editted out all non-US/Canada services from
  the /etc/pacman.d/mirrorlist.

    # pacstrap /mnt base base-devel
    # genfstab -U /mnt >> /mnt/etc/fstab
    # arch-chroot /mnt
    # ln -sf /usr/share/zoneinfo/America/New_York /etc/localtime
    # hwclock --systohc

  Uncomment line `#en_US.UTF-8 UTF-8' in the file /etc/locale.gen

    # locale-gen
    # echo -n 'LANG=en_US.UTF-8' > /etc/locale.conf
    # echo -n gauss17 > /etc/hostname

  Configure /etc/hosts (with tabs):

    127.0.0.1   localhost.localdomaini  localhost
    ::          localhost.localdomain   localhost
    127.0.1.1   gauss17.localdomain     gauss17

    [[ See postfix configuration on 2017-06-30, changed
       /etc/hosts for newaliases.  Also, never was quite
  n     sure about the 127.0.1.1 ]]

    # passwd
    # ^D

  Reboot with USB thumbdrive,

    # mount /dev/sda2 /mnt
    # mount /dev/sda1 /mnt/boot
    # arch-chroot /mnt
    # bootctl --path=/boot install

  Reboot without USB thumbdrive, system failed to boot, forgot
  details.

  Reboot thumbdrive, mount and compare /dev/sda1 to /dev/sdb1.
  Based on the differences, I did:

  Updated /boot/loader/loader.conf to (old version commented out)

    default arch
    timeout 5
    editor 0
    #default 03ab3a86a6b046d1bb4b74b0d52e0e5c-*

  Copied /boot/loader/entries/arch.conf to the new partition,

    title Arch Linux
    linux /vmlinuz-linux
    initrd /initramfs-linux.img
    options root=PARTUUID=fd153bda-5bf1-4a49-9728-4fb11b660949 rw

  These were the only differences, apart from the
  extra/intel-ucode package stuff.  The "magic number"
  fd153bda-5bf1-4a49-9728-4fb11b660949 looks problematic.
  Indeed, as is, it tries to mount /dev/sdb2 instead
  of /dev/sda2 as root.  This results in failure loading
  kernel modules.

    # find /dev -name fd153bda-5bf1-4a49-9728-4fb11b660949
    /dev/disk/by-partuuid/fd153bda-5bf1-4a49-9728-4fb11b660949

    # ls /dev/disk/by-partuuid/
    3beb0f61-e57c-4686-bb35-7ed414194442  8d5e9cb9-1823-46e7-9150-885713ef5fc3
    8a759be3-bd72-44f3-b29c-894eaaa75c30  d6793ae6-1f23-4895-942a-6714e7a06de6
    8d391102-8cbb-4b07-a767-516b7e3bbe94  fd153bda-5bf1-4a49-9728-4fb11b660949

  These are the unique identifies for the 6 partitions I created.
  Booting from the thumbdrive and mounting each via the mount
  cmd, I found that the d6793ae6-1f23-4895-942a-6714e7a06de6
  is the partuuid I need.  Changed last line of
  /boot/loader/entries/arch.conf to

    options root=PARTUUID=d6793ae6-1f23-4895-942a-6714e7a06de6 rw

  and system booted.

  [[ See first entry 2020-02-02 ]]

2017-06-26:
  Added geoff user to system via,

    # useradd -d /home/geoff -c "Geoffrey Scheller" -m geoff
    # passwd geoff

  Since /home/geoff directory already existed, the skeleton
  files from /etc/skel were not copied.  The UID for geoff
  login created was 1000, so I did not have to change ownership
  of the files in /home/geoff.

  Added geoff to wheel group in preparation of adding sudo
  package,

    # usermod -aG wheel geoff

2017-06-26:
  To make sure I am mounting what I should be,

    $ df -h
    Filesystem      Size  Used Avail Use% Mounted on
    dev             7.8G     0  7.8G   0% /dev
    run             7.8G  1.2M  7.8G   1% /run
    /dev/sda2       117G  6.5G  104G   6% /
    tmpfs           7.8G     0  7.8G   0% /dev/shm
    tmpfs           7.8G     0  7.8G   0% /sys/fs/cgroup
    /dev/sda1       511M   33M  479M   7% /boot
    tmpfs           7.8G   12K  7.8G   1% /tmp
    /dev/sdb4       839G   52G  745G   7% /home
    /dev/sdb2        63G   41G   20G  68% /extra
    tmpfs           1.6G  8.0K  1.6G   1% /run/user/1000

2017-06-26:
  Get ethernet working,

    # ip addr
    1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
        link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
        inet 127.0.0.1/8 scope host lo
           valid_lft forever preferred_lft forever
        inet6 ::1/128 scope host
           valid_lft forever preferred_lft forever
    2: enp3s0f1: <BROADCAST,MULTICAST> mtu 1500 qdisc noop state DOWN group default qlen 1000
        link/ether f0:76:1c:cc:c1:05 brd ff:ff:ff:ff:ff:ff
    3: wlp2s0: <BROADCAST,MULTICAST> mtu 1500 qdisc noop state DOWN group default qlen 1000
        link/ether ac:e0:10:8a:3d:85 brd ff:ff:ff:ff:ff:ff

  Good start, linux is seeing the ethernet card.
  Now turn on DHCP

    # systemctl enable dhcpcd

  Reboot,

    # systemctl reboot

  Now check network,

    $ ip addr
    1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
        link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
        inet 127.0.0.1/8 scope host lo
           valid_lft forever preferred_lft forever
        inet6 ::1/128 scope host
           valid_lft forever preferred_lft forever
    2: enp3s0f1: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel state UP group default qlen 1000
        link/ether f0:76:1c:cc:c1:05 brd ff:ff:ff:ff:ff:ff
        inet 192.168.1.47/24 brd 192.168.1.255 scope global enp3s0f1
           valid_lft forever preferred_lft forever
        inet6 fe80::3703:10a7:6c97:d350/64 scope link
           valid_lft forever preferred_lft forever
    3: wlp2s0: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc mq state DOWN group default qlen 1000
        link/ether ac:e0:10:8a:3d:85 brd ff:ff:ff:ff:ff:ff

    $ ping 8.8.8.8
    PING 8.8.8.8 (8.8.8.8) 56(84) bytes of data.
    64 bytes from 8.8.8.8: icmp_seq=1 ttl=47 time=48.5 ms
    64 bytes from 8.8.8.8: icmp_seq=2 ttl=47 time=61.6 ms
    64 bytes from 8.8.8.8: icmp_seq=3 ttl=47 time=95.4 ms
    64 bytes from 8.8.8.8: icmp_seq=4 ttl=47 time=73.9 ms
    64 bytes from 8.8.8.8: icmp_seq=5 ttl=47 time=60.3 ms

2017-06-26:
  Now do a system upgrade,

    # pacman -Syu

  and follow some of what I did above to install stuff,

    # pacman -Syu git python ipython python-nose
    # pacman -Syu sudo

  where I used visudo to allow users of the wheel group
  to use sudo without requiring their password.  I also
  resticted commands to the suggested secure path
  "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
  instead of the user's path.  Also uncommented the "env_keep"
  lines to allow sudo to work cleanly with the users X11 GUI
  environment.

  Install power management tools,

    $ sudo pacman -Syu acpi acpid
    $ sudo systemctl enable acpid

2017-06-27:
  Get wireless working; get XFCE working -

  Bring in nvidia drivers,

    $ sudo pacman -Syu nvidia libglvnd xorg-xrandr

  This dragged in Wayland and alot of other Xorg stuff.

    # cp /extra/etc/X11/xorg.conf /etc/X11

  Reboot.

  Install XFCE,

    $ sudo pacman -Syu xfce4 xfce4-goodies

  and vim and gvim

    $ sudo pacman -Syu gvim

  Reboot.

  XFCE GUI environment seems sharper than before.

  Finally, install wireless related utilities -

    $ sudo pacman -Syu iw wpa_supplicant wicd wicd-gtk xfce4-notifyd
    $ sudo systemctl disable dhcpcd

  Reboot.

  No WIFI interface, wicd also not running.  Try fixing 2nd
  one first, even though first might be causing 2nd?

    $ sudo systemctl enable wicd

  Reboot.

  At the console,

    $ ip addr

    1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
        link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
        inet 127.0.0.1/8 scope host lo
           valid_lft forever preferred_lft forever
        inet6 ::1/128 scope host
           valid_lft forever preferred_lft forever
    2: enp3s0f1: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel state UP group default qlen 1000
        link/ether f0:76:1c:cc:c1:05 brd ff:ff:ff:ff:ff:ff
        inet 192.168.1.47/24 brd 192.168.1.255 scope global enp3s0f1
           valid_lft forever preferred_lft forever
        inet6 fe80::f276:1cff:fecc:c105/64 scope link
           valid_lft forever preferred_lft forever
    3: wlp2s0: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc mq state DOWN group default qlen 1000
        link/ether ac:e0:10:8a:3d:85 brd ff:ff:ff:ff:ff:ff

  So, wicd has taken over the management of the ethernet.

  Now bring X back up,

    $ startx

  I see home wireless network.  Lets see if I can copy over
  the old wireless settings,

    $ sudo cp /extra/etc/wicd/wireless-settings.conf /etc/wicd

  Several reboots.

  Wicd now reliably bring up wireless network on reboot,
  even when not running under X.  About ~30% of time, wlp2s0
  does not come up.  One time system failed to boot due to
  the old rfkill issue.

2017-06-27:
  Installed firefox,

    $ sudo pacman -Syu firefox

  This brought in hunspell, so I might as well drag hunspell
  universe in for Libre-Office.

    $ sudo pacman -Syu hunspell-en hyphen-en languagetool libmythes mythes-en

  And this brought in an open-jdk java8 runtime environment.
  Might as well bring in the development environment too.

    $ sudo pacman -Syu jdk8-openjdk openjdk8-doc java-openjfx java-openjfx-doc

  Some optional media decodings as suggested for dependencies
  of above,

    $ sudo pacman -Syu gst-libav gst-plugins-good gst-plugins-base

  Install vlc,

    $ sudo pacman -Syu vlc
    $ sudo pacman -Syu libdvdcss lirc libcdio ttf-freefont qt4
    $ sudo pacman -Syu libdc1394 libva-vdpau-driver vcdimager lua-socket

  Install youtube-dl and evince,

    $ sudo pacman -Syu youtube-dl evince
    $ sudo pacman -Syu texlive-core texlive-bin
    $ sudo pacman -Syu lyx
    $ sudo pacman -Syu imagemagick-doc

  Install claws e-mail and extras

    $ sudo pacman -Syu claws-mail claws-mail-themes clawsker
    $ sudo pacman -Syu dillo

  Install wget, curl already installed.

    $ sudo pacman -Syu wget

  Install Etherape network monitoring tool,

    $ sudo pacman -Syu etherape

2017-06-27:
  Install pulseaudio software,

    $ sudo pacman -Syu pulseaudio pulseaudio-alsa paprefs pavucontrol ponymix

  as notes above show, some extra configuration is needed.

2017-06-27:
  Install SBT,

    $ sudo pacman -Syu sbt

  Install Rust locally fot geoff login,

    $ curl -f https://sh.rustup.rs > rust.sh
    $ chmod u+x rust.sh
    $ ./rust.sh

  $ ls -l ~/.cargo/bin
  total 79828
  -rwxr-xr-x 7 geoff geoff 11676416 Jun 27 20:06 cargo
  -rwxr-xr-x 7 geoff geoff 11676416 Jun 27 20:06 rls
  -rwxr-xr-x 7 geoff geoff 11676416 Jun 27 20:06 rustc
  -rwxr-xr-x 7 geoff geoff 11676416 Jun 27 20:06 rustdoc
  -rwxr-xr-x 7 geoff geoff 11676416 Jun 27 20:06 rust-gdb
  -rwxr-xr-x 7 geoff geoff 11676416 Jun 27 20:06 rust-lldb
  -rwxr-xr-x 7 geoff geoff 11676416 Jun 27 20:06 rustup

  Refine changes to ~/.bash_profile where rust.sh
  put ~/.cargo/bin on PATH.

2017-06-28:
  Reset timezone to Mountain time,

    $ timedatectl list-timezones | grep Denver
    America/Denver

    $ sudo timedatectl set-timezone America/Denver

  Use systemd built-in NTP deamon

    $ sudo timedatectl set-ntp true

2017-06-28:
  Finish configuring pulseaudio, try running XFCE as root,

    $ su -
    $ cp /home/geoff/.xinitrc .
    $ startx

  VLC won't run as root.  Log out and log into XFCE as geoff.
  Still no sound with VLC.

    $ pulseaudio --start

  Still no sound, "fiddle" with VLC controls, got sound.
  Restart vlc, got sound immediately.

  Reboot, log into XFCE as geoff, VLC works with sound
  off-the-bat.

  Well, next time I rebuild the system, I will try to nail down
  exactly what in the above trashing made pulseaudio work.

  Note, doesn't seem to be a /etc/libao.conf to edit
  (see 2016-08-05).

  But, ... when I went to install vorbis-tools,

    $ sudo pacman -Syu vorbis-tools

  It pulled in the libao package containing /etc/libao.conf.
  Made same changes to it as before,

    from:
      default_driver=alsa
      dev=default

    to:
      default_driver=pulse

  Reboot,

  Now ogg123 works from commandline outside of X as well as in X.

2017-06-28:
  Installed NTFS drives to be able to write to ntfs file systems,
  (see 2016-07-23).

    $ sudo pacman -Syu gvfs-afc ntfs-3g

  Able to read/write to my external NTFS formatted hard drive.

2017-06-28:
  Installed speedtest and iperf (see 2017-06-28 for more details).

    $ sudo pacman -Syu speedtest-cli iperf

2017-06-28:
  Installed daemon that generates system entropy;

    $ sudo pacman -Syu haveged
    $ sudo systemctl enable haveged

2017-06-28:
  Installing Haskell Stack build tool.

    $ sudo pacman -Syu stack

2017-06-28:
  Gave root minimal .bashrc and .bash_profile

  /root/bash_profile:

    [[ -f ~/.bashrc ]] && . ~/.bashrc

  /root/bashrc:

     set -o vi

2017-06-29:
  Going back through these notes, here are topics I wish to hit,

    2016-07-17 libreoffice-fresh              x
    2016-07-20 bash-completion                x
    2016-07-22 postfix                        x
    2016-08-05 configure postfix              x
    2016-07-29 mp32ogg, pulseaudio-jack       x
    2016-07-30 seahorse                       x
    2016-08-13 zip, unzip                     x
    2016-08-14 brasero                        x
    2016-09-11 xscreensaver                   x
    2017-02-04 intel-ucode + configure it     x
    2017-02-15: strace ltrace + dnstracer     x
    2017-04-18 configure blu-ray              x
    pypy3                                     x
    dropbox                                   x

2017-06-29:
  An announcement on the Arch Linux Wiki page dated ???
  indicates that NVIDIA Optimus cards now work without extra
  configuration.

  So, I removed extra configuration from ~/.xinitrc added above
  to get Optimus card to work.  Content of file now

    session=${1:-xfce}

    case $session in
        gnome          ) exec gnome-session;;
        gnome-classic  ) exec gnome-session --session=gnome-classic;;
        xfce           ) exec startxfce4;;
        *              ) exec $1;;
    esac

  After this change, XFCE seems to come up faster.

  Also, gnome-keyring was not installed.  The Arch Linux PGP
  keyring, core/archlinux-keyring was installed instead.  That
  is why I did not repeat the PAM configuratons mentioned on
  2016-08-03.

  Finally, removed /etc/X11/xorg.conf that I put in place
  earlier.  I believe, except for perhaps ~/.xinitrc, XFCE
  completely unconfigured and using NVIDIA card.  On enduser
  level, XFCE still personalized from previous incarnation.

2017-06-30:
  Today I updated the steps from 2017-06-26 that I took paper
  notes on.

  Will continue making updates for the items I mentioned on 2017-06-29.

    $ sudo pacman -Syu bash-completion zip unzip strace ltrace dns-tracer
    $ sudo pacman -Syu seahorse brasero
    $ sudo pacman -Syu mp32ogg pulseaudio-jack
    $ sudo pacman -Syu libreoffice-fresh
    $ sudo pacman -Syu xscreensaver
    $ sudo pacman -Syu pypy3

  The following will need some extra configuration.

    $ sudo pacman -Syu libaacs   (for bluray)
    $ sudo pacman -Syu postfix
    $ sudo pacman -Syu intel-ucode

2017-06-30:
  To configure intel-ucode, added 3rd line to
  /boot/loader/entries/arch.conf/boot/loader/entries/arch.conf

    title Arch Linux
    linux /vmlinuz-linux
    initrd /intel-ucode.img
    initrd /initramfs-linux.img
    options root=PARTUUID=d6793ae6-1f23-4895-942a-6714e7a06de6 rw

  Comparing

    $ journalctl -xb

  before and after addition of above line, we now have on reboot

    Jun 30 17:01:03 gauss17 kernel: microcode: microcode updated early to revision 0xba, date = 2017-04-09

  Thus confirming that intel microcode is being updated.

2017-06-30:
  Configure postfix.

    aliases_orig(<)  aliases(>):
      < #root:		you
      > root:		geoff

    diff main.cf_orig(<)  main.cf(>):
    > myhostname = gauss17
    > mydomain = localdomain
    < #myorigin = $myhostname
    > myorigin = $myhostname
    < #inet_interfaces = $myhostname, localhost
    > inet_interfaces = $myhostname, localhost
    > mydestination = $myhostname, localhost.$mydomain, localhost
    > mynetworks_style = host
    >
    > # Added by geoff so that external mail errors out and
    > # does not get stuck in a queue forever
    > #
    > default_transport = error:outside mail is not deliverable

  Also changed /etc/hosts to

    127.0.0.1   localhost.localdomain   localhost   gauss17
    ::1         localhost.localdomain   localhost   gauss17

  (with tabs) to make newaliases command happy.

    # cd /etc/postfix/
    # newaliases

  Finally turn it on for next reboot,

    # systemctl enable postfix

  Reboot.

  Works with mailx and Claws Mail.  Claws Mail removes it
  from /var/spool/mail/geoff.  Also, root's email gets
  forwarded to the geoff user.

2017-07-01:
  Following Blu-Ray configuration from 2017-04-18.

    $ cd ~/.config/aacs
    $ mv KEYDB.cfg KEYDB.cfg_old
    $ wget http://www.labdv.com/aacs/KEYDB.cfg
    $ ls -s -h
    total 5.1M
    2.8M KEYDB.cfg	2.4M KEYDB.cfg_old

2017-07-01:
  Up to now, everything installed on the rebuilt system has
  been from the official Arch Repos.  I wish to install Dropbox
  from AUR.

  Note: News item on www.archlinux.org/ - abs deprecated, use asp
        instead.  I have installed neither.

  Finally, install Dropbox from AUR:

    $ mkdir ~/build/Dropbox; cd ~/build/Dropbox
    $ git clone https://aur.archlinux.org/dropbox.git
    $ cd dropbox/
    $ git fetch; git status
    On branch master
    Your branch is up-to-date with 'origin/master'.
    nothing to commit, working tree clean
    $ makepkg -sri

    Lets see if this install and the config info in my home
    directory enough to kick off dropbox:

    Reboot.

    And it worked, Dropbox app in the top right system tray.

2017-07-01:
  Install Shotwell.

    $sudo pacman -Syu shotwell

2017-07-01:
  I consider the SSD hardrive and 16GiB memory upgdades complete.

  I only reinstalled the tools I am actually using or want
  at hand.

  To help enable a future rebuild to go faster,

  All explcitly installed packages:

    $ pacman -Qet
    acpi 1.7-1
    acpid 2.0.28-1
    autoconf 2.69-4
    automake 1.15-2
    bison 3.0.4-2
    brasero 3.12.1-2
    claws-mail-themes 20140629-1
    clawsker 1.0.1-1
    dnstracer 1.9-5
    dropbox 29.4.20-1
    etherape 0.9.15-1
    evince 3.24.0+8+ga8363215-1
    fakeroot 1.21-2
    firefox 54.0.1-1
    flex 2.6.4-1
    gtk-xfce-engine 2.10.1-1
    gvim 8.0.0628-1
    haveged 1.9.1-2
    hunspell-en 2017.01.22-2
    hyphen-en 2.8.8-1
    intel-ucode 20170511-1
    iperf 2.0.9-1
    iputils 20161105.1f2bb12-2
    ipython 5.3.0-1
    iw 4.9-1
    java-openjfx-doc 8.u121-1
    jfsutils 1.1.15-4
    languagetool 3.7-1
    libaacs 0.9.0-1
    libreoffice-fresh 5.3.4-1
    licenses 20140629-2
    logrotate 3.12.2-1
    ltrace 0.7.3-2
    lyx 2.2.3-2
    make 4.2.1-2
    man-db 2.7.6.1-2
    man-pages 4.11-1
    mousepad 0.4.0-2
    mp32ogg 0.11-10
    mythes-en 20060306-3
    nano 2.8.5-1
    netctl 1.12-2
    nvidia 381.22-3
    openjdk8-doc 8.u131-1
    orage 4.12.1-3
    pacman 5.0.2-1
    paprefs 0.9.10-6
    patch 2.7.5-1
    pciutils 3.5.4-1
    pcmciautils 018-7
    pkg-config 0.29.2-1
    ponymix 5-1
    procps-ng 3.3.12-1
    pulseaudio-jack 10.0-3
    pypy3 5.8.0-1
    reiserfsprogs 3.6.25-1
    ristretto 0.8.2-1
    sbt 1:0.13.13-1
    seahorse 3.20.0+94+g4c671a78-1
    shotwell 2:0.26.2-1
    speedtest-cli 1.0.6-1
    stack 1.4.0-98
    strace 4.17-1
    sudo 1.8.20.p2-1
    unzip 6.0-12
    usbutils 008-1
    vi 1:070224-2
    vlc 2.2.6-1
    wget 1.19.1-2
    which 2.21-2
    xfburn 0.5.4-3
    xfce4-appfinder 4.12.0-4
    xfce4-artwork 0.1.1a_git20110420-4
    xfce4-battery-plugin 1.1.0-1
    xfce4-clipman-plugin 1.4.1-1
    xfce4-cpufreq-plugin 1.1.3-1
    xfce4-cpugraph-plugin 1.0.5-4
    xfce4-datetime-plugin 0.7.0-1
    xfce4-dict 0.8.0-1
    xfce4-diskperf-plugin 2.6.1-1
    xfce4-eyes-plugin 4.4.5-1
    xfce4-fsguard-plugin 1.1.0-1
    xfce4-genmon-plugin 4.0.0-1
    xfce4-mailwatch-plugin 1.2.0-7
    xfce4-mount-plugin 1.1.2-1
    xfce4-mpc-plugin 0.5.0-1
    xfce4-netload-plugin 1.3.1-1
    xfce4-notes-plugin 1.8.1-2
    xfce4-power-manager 1.6.0.41.g9daecb5-1
    xfce4-pulseaudio-plugin 0.2.5+30+g1c7b487-1
    xfce4-screenshooter 1.9.1-1
    xfce4-sensors-plugin 1.2.6-3
    xfce4-session 4.12.1-7
    xfce4-settings 4.12.1-1
    xfce4-smartbookmark-plugin 0.5.0-1
    xfce4-systemload-plugin 1.2.1-1
    xfce4-taskmanager 1.2.0-1
    xfce4-terminal 0.8.5.1-1
    xfce4-time-out-plugin 1.0.2-2
    xfce4-timer-plugin 1.6.0-4
    xfce4-verve-plugin 1.1.0-1
    xfce4-wavelan-plugin 0.6.0-1
    xfce4-weather-plugin 0.8.9-1
    xfce4-whiskermenu-plugin 1.7.2-2
    xfce4-xkb-plugin 0.7.1-2
    xfdesktop 4.12.4-1
    xfwm4-themes 4.10.0-2
    xorg-xrandr 1.5.0-1
    youtube-dl 2017.06.25-1
    zip 3.0-7

    I think some of these are from package bundles like xfce and xfice-goodies.

  All foreign packages:

    $ pacman -Qmq
    dropbox

2017-07-03:
  Something is pulling in gnome-keyring,

    $ pacman -Ss keyring | grep -A 1 '\[installed\]'
    core/archlinux-keyring 20170611-1 [installed]
        Arch Linux PGP keyring
    extra/gnome-keyring 1:3.20.0+57+g9db67ef6-1 (gnome) [installed]
        Stores passwords and encryption keys

  Lets see what it is,

    $ pacman -Sii gnome-keyring
    Repository      : extra
    Name            : gnome-keyring
    Groups          : gnome
    Depends On      : gcr  libcap-ng  pam
    Optional Deps   : None
    Required By     : deepin-daemon  geary  seahorse  sugar
    Optional For    : chromium  deja-dup  git  libgnome-keyring  libsecret
                      lifereamate-session-manager  mysql-workbench
                      remmina  xfce4-session

  Looks like seahorse brought it in,

    $ pacman -Sii seahorse
    Repository      : extra
    Description     : GNOME application for managing PGP keys.
    Depends On      : gtk3  gcr  libsecret  libsoup  desktop-file-utils  dconf
                      gpgme  gnome-keyring

  Since I don't want multiple PGP keyring infrastructures running
  around,

    $ sudo pacman -R seahorse gnome-keyring

  After reboot, Claws e-mail is still asking me for PGP passphase
  when I send e-mail with PGP signature.

2017-07-06:
  Install ldns package which replaces functionality of the
  deprecated former core/dnsutils package.

    $ sudo pacman -Syu ldns

  The drill program replces dig and hosts, and to a lesser
  extent the nslookup package.  The getent program is a better
  replacement to the nslookup command than drill.

  The old System V dns utilities were deprecated several
  years ago.  There is a compatibility package I choose
  not to instll this time around.  These compatibity utilities
  are closely associated with Bind.

2017-07-06:
  Installed rust tool chain.

    $ sudo pacman -Syu rustup
    $ pacman -Qlq rustup
    /usr/
    /usr/bin/
    /usr/bin/cargo
    /usr/bin/rls
    /usr/bin/rust-gdb
    /usr/bin/rust-lldb
    /usr/bin/rustc
    /usr/bin/rustdoc
    /usr/bin/rustup
    /usr/share/
    /usr/share/bash-completion/
    /usr/share/bash-completion/completions/
    /usr/share/bash-completion/completions/rustup
    /usr/share/fish/
    /usr/share/fish/completions/
    /usr/share/fish/completions/rustup.fish
    /usr/share/zsh/
    /usr/share/zsh/site-functions/
    /usr/share/zsh/site-functions/_rustup

  I was not expecting to get the compiler centrally installed.

2017-07-11:
  Reinstalled chrome since firefox could not view Netflix.

    $ cd ~/build/AUR/google-chrome_build/google-chrome
    $ git pull
    $ makepkg -sri

  Now all foreign packages,

    $ pacman -Qmq
    dropbox
    google-chrome

2017-07-13:
  Optimize the pacman database.

    $ sudo pacman-optimize

  Bash script attempts to localize the many small files
  that make up the pacman database.

2017-07-13:
  Figured out how to hibernate the system.

    $ systemctl hybrid-sleep

  Works as a regular user.  System completely powers off.
  Powers back up very fast, even though the gauss17 swap
  partian is on the slow HD.

2017-07-16:
  Swapped in mirrorlist.pacnew and used the command

     $ rankmirrors -v /etc/pacman.d/mirrorlist

  to rank the US, Canada, and German servers.

2017-07-22:
  Uninstalled sbt,

    $ sudo pacman -Rsu sbt

  and installed sbt version 0.13.15 locally into ~/opt/sbt.
  I wanted my sbt builds to be more consistent across my
  various Linux and Windows10 operating systems.

  Actually, Arch sbt version downloaded sbt version I used
  under Windows10 based on a project/build.properties file I
  committed to my GITHUB repo.

2017-07-27:
  Replace Wicd with NetworkManager.

  NetworkManager was developed by Redhat and is the default
  in Gnome.  In case I go to 3G internet solution, NetworkManager
  has support for this.  Better support VPN, which also might
  be a future possibility.  Also, hope this cures having to
  configure static IP's in some wifi hotspots.

    $ sudo pacman -Syu networkmanager nm-connection-editor \
                       networkmanager-dispatcher-sshd dhclient

  First two items needed for functionality.  Haven't reconfigured
  sshd since the rebuild, hence third item.  Forth item for
  requesting a routeable IPv6 address.

  I'm guessing second item replaces package network-manager-applet
  mentioned in the Network-Manager Arch Wiki. [[Bad guess]]

  Now, unconfigure Wicd an configure NetworkManager:

    $ sudo systemctl disable wicd
    Removed /etc/systemd/system/dbus-org.wicd.daemon.service.
    Removed /etc/systemd/system/multi-user.target.wants/wicd.service.

    $ sudo systemctl enable NetworkManager
    Created symlink /etc/systemd/system/dbus-org.freedesktop.NetworkManager.service → /usr/lib/systemd/system/NetworkManager.service.
    Created symlink /etc/systemd/system/multi-user.target.wants/NetworkManager.service → /usr/lib/systemd/system/NetworkManager.service.
    Created symlink /etc/systemd/system/dbus-org.freedesktop.nm-dispatcher.service → /usr/lib/systemd/system/NetworkManager-dispatcher.service.

  Reboot.

    $ journalctl -b | egrep  "dhc"
    Jul 27 11:55:40 gauss17 NetworkManager[375]: <info>  [1501178140.2879] dhcp-init: Using DHCP client 'dhclient'

  a good sign.

  When I log into XFCE, looks like the network applet in my topr
  panel is Wicd specific, gives warning message: "Could not
  connect to wicd's D-Bus interface..."

  Missing

    $ pacman -Ss network-manager-applet
    extra/network-manager-applet 1.8.2-1
        Applet for managing network connections

  So, lets try bringing the wifi connection back up via nmcli:

  For info,

    $ man nmcli
    $ man nmcli-examples

  List devices to connect to (-p for pretty),

    $ nmcli -p device wifi list
    ============================
      Wi-Fi scan list (wlp2s0)
    ============================
    *  SSID         MODE   CHAN  RATE       SIGNAL  BARS  SECURITY
    --------------------------------------------------------------------
       MotoG3 8195  Infra  1     54 Mbit/s  52      ▂▄__  WPA2
       2100-429     Infra  1     54 Mbit/s  29      ▂___  WPA2

  The nmcli-examples page has a good example of a NetworkManager
  dispatcher script to make Ethernet and Wi-Fi mutually exclusive.

  Examples seem more ethernet oriented.  Don't see getting around
  having to configure text files, so I will punt and go back to
  Wicd to pacman in the missing network-manager-applet package.

  Installed network-manager-applet

    $ sudo pacman -Syu network-manager-applet

  and reconfigured system back to NetworkManager.

  XFCE did not know anything about nm-applet until I ran it
  from the command line.  After that, it integrated itself
  into my XFCE startup settings.  Just clicking on a wifi
  connection does not bring up a configuration menu, I had
  to configure through the "Connect to hidden WiFi Network"
  menu.  Deactivated the Wicd applet counterpart to nm-applet.

2017-07-29:
  Made Ethernet and WiFi mutually exclusive.  Plugging in an
  Ethernet cable causes WiFi to go into Airplane mode.

  Put the following script,

    #!/bin/bash
    #
    # Added by grscheller to make Ethernet and WiFi
    # mutually exclusive.  Code taken from example 12
    # of the nmcli-examples man page.
    #
    export LC_ALL=C

    enable_disable_wifi ()
    {
        result=$(nmcli dev | grep "ethernet" | grep -w "connected")
        if [ -n "$result" ]
        then
            nmcli radio wifi off
        else
            nmcli radio wifi on
        fi
    }

    if [ "$2" = "up" ]
    then
        enable_disable_wifi
    fi

    if [ "$2" = "down" ]
    then
        enable_disable_wifi
    fi

  Into /etc/NetworkManager/dispatcher.d/70-wifi-wired-exclusive

    $ sudo chmod 700 /etc/NetworkManager/dispatcher.d/70-wifi-wired-exclusive
    $ ls -l /etc/NetworkManager/dispatcher.d/70-wifi-wired-exclusive
    -rwx------ 1 root root 469 Jul 29 11:02 /etc/NetworkManager/dispatcher.d/70-wifi-wired-exclusive

2017-09-29:
  After a kernel update, system shutdown hangs waiting for two
  stopped jobs to terminate.  One is a Network Manager process,
  the other WPA Supplement.

  Tried uninstalling wicd and wicd-gtk, since it is unlikely I
  will ever return to them.

    $ sudo pacman -R wicd wicd-gtk
    $ sudo pacman -Syu

  Did not help the stopped processes to terminate.

2017-10-09:
  The system hangs or takes long time to shut down, but not
  when I am not using wireless.  At the console, getting an
  error message from a kernel thread regarding something
  "tainting the kernel."  It suggested a workarond to gag
  the message which I have tried:

    # echo 0 > /proc/sys/kernel/hung_task_timeout_secs

  I'll see if this helps or is persistent across reboots.

2017-10-28:
  Problem from 2017-10-09 gradually went away, won't worry
  about it.

2017-12-02:
  Replaced xscreensaver with xscreensaver-arch-logo from AUR.

    $ cd ~/build/AUR
    $ git clone https://aur.archlinux.org/xscreensaver-arch-logo.git
    $ cd xscreensaver-arch-logo/
    $ makepkg -sri

  Updated Google Chrome

    $ cd ~/build/AUR/google-chrome_build/google-chrome
    $ git pull    # Needed to remove untracked file eula_text.html
    $ makepkg -sri

2017-12-12:
  Today I need to print a document to a networked HP Office Jet Pro 8610
  printer.  First install, enable, and start cups,

    $ sudo pacman -Syu cups
    $ sudo systemctl enable org.cups.cupsd.service
    $ sudo systemctl start org.cups.cupsd.service

  No complaints, now do a reboot.

    $ journalctl -b | grep -i cups
    Dec 12 09:51:57 gauss17 systemd[1]: Listening on CUPS Scheduler.
    Dec 12 09:51:57 gauss17 systemd[1]: Started CUPS Scheduler.

  There is a CUPS cli interface, but since printing to an
  actual printer is something I rarely do, I want something
  GUI and idiot proof.  I looked into installing the KDE Network
  Manager, but this would drag in way too much KDE for my XFCE
  minimalistic approach.

  There appears to be a CUPS web interface running
  on: localhost:631

  Doesn't seem to see the HP Officejet Pro 8610.  Talked to my
  son Jason who said he downloaded the HP drivers from

    https://developers.hp.com/hp-linux-imaging-and-printing

  and got working via a usb connection for his Arch Linux
  computer.  The pacakage was called HPLIP.  Lets check Arch
  Repos first.

    $ pacman -Ss hplip
    extra/hplip 3.17.11-1
        Drivers for HP DeskJet, OfficeJet, Photosmart,
        Business Inkjet and some LaserJet

    $ sudo pacman -Syu hplip

  From the optional depends list,

    $ sudo pacman -Syu sane xsane
    $ sudo pacman -Syu rpcbind

  first to give faxing capabilities, the second I "think" it
  needs to enable networking use.  The CUPS service on
  localhost 631 was not finding it.

    $ systemctl enable rpcbind.service

  Reboot, since remote proceedure call service has to be
  started before other services.

  CUPS servce still not finding it.  After some poking around
  on Stackoverflow I found that I had to run hp-setup,

    $ sudo /usr/bin/hp-setup -i 192.168.1.17

  The -i ran it as a CLI, would had to install QT libraries
  to run it as a GUI.  Was able to print a test page.
  Printed another page from a browser.

2017-12-12:
  Added systemadm GUI front-end for systemctl.

    $ sudo pacman -Syu systemd-ui

  To connect to systemd system manager (default)

    $ systemadm --system

  To connect to systemd manager of the calling user

    $ systemadm --user

  Also, can launch from the Applications -> System GUI menu.

2017-12-30:
  Added utility which can be used to control NUMA policy for
  processes or shared memory.

  NUMA (stands for Non-Uniform Memory Access).  Presumably
  this is a good thing for Intel i7 processes.

    $ journalctl -b | grep NUMA
    Dec 30 13:14:25 gauss17 kernel: No NUMA configuration found

    $ sudo pacman -Syu numactl

  reboot,

    $ journalctl -b | grep NUMA
    Dec 30 17:43:39 gauss17 kernel: No NUMA configuration found

  some configuration needed?

    $ numactl --show
    policy: default
    preferred node: current
    physcpubind: 0 1 2 3 4 5 6 7
    cpubind: 0
    nodebind: 0
    membind: 0

    $ numactl --hardware
    available: 1 nodes (0)
    node 0 cpus: 0 1 2 3 4 5 6 7
    node 0 size: 15931 MB
    node 0 free: 14474 MB
    node distances:
    node   0
      0:  10

  From the man page, numactl runs processes with a specific
  NUMA scheduling or memory placement policy.  The policy is
  set for command and inherited by all of its children.
  In addition it can set persistent policy for shared memory
  segments or files.

  More info found here:

    https://www.sharcnet.ca/help/index.php/Using_numactl

  You can use numactl to control how your program uses memory
  quite precisely, controlling which CPUs are used to execute
  a program and which memory nodes are used. Quite often,
  simply using numactl to require that the program uses only
  local memory can result in much improved performance.
  This can be achieved by using numactl with flag -l.

    $ numctl --localalloc <my-multi-threaded-program>

  The tradeoff is that the program can use only local memory,
  which is less than the total memory, and will fail if it
  tries to allocate more memory when the local memory is
  already full.

2018-02-07:

  Removed ghc-static.

    $ sudo pacman -Rsu ghc-static
    checking dependencies...

    Packages (2) ghc-8.2.2-1  ghc-static-8.2.2-1
    ...

  Seems to have removed ghc too!  Let's renstall it:

    $ pacman -Syu ghc

  Only reinstall the ghc package, not the ghc-static package.
  Now, install cabel-install.

    $ pacman -Syu cabal-install

2018-02-10:
  Today pacman -Syu failed.

    libxfont: removing fontsproto breaks dependency 'fontsproto>=2.1.3'

  Seems to be upgrading a lot of X11 stuff.  From Arch Linux
  forums, libfont has been ophaned in 2017.

    $ pacman -Ss libxfont
    extra/libxfont2 2.0.3-1 [installed]
        X11 font rasterisation library

  So, lets remove it

    $ sudo pacman -Rs libxfont
    checking dependencies...

    Packages (1) libxfont-1.5.3-1

    Total Removed Size:  0.29 MiB
    ...

  Now do

    $ sudo pacman -Syu

  While sorting this out, there has been some major core and
  extra updates, so along with a major X11 upgrade, I am
  getting a kernel upgrade and NVIDIA upgrade.  Reboot needed.

2018-02-10:
  Glad to see Linux kernel developers are on the ball.

    $ journalctl -b
    -- Logs begin at Mon 2017-06-26 15:38:08 MDT, end at Sat 2018-02-10 11:39:09 MST. --
    Feb 10 11:26:37 gauss17 kernel: microcode: microcode updated early to revision 0xc2, date = 2017-11-16
    Feb 10 11:26:37 gauss17 kernel: Linux version 4.15.2-2-ARCH (builduser@heftig-7084) (gcc version 7.3.0 (GCC)) #1 SMP PREEM
    Feb 10 11:26:37 gauss17 kernel: Command line: initrd=\intel-ucode.img initrd=\initramfs-linux.img root=PARTUUID=d6793ae6-1
    Feb 10 11:26:37 gauss17 kernel: KERNEL supported cpus:
    Feb 10 11:26:37 gauss17 kernel:   Intel GenuineIntel
    Feb 10 11:26:37 gauss17 kernel:   AMD AuthenticAMD
    Feb 10 11:26:37 gauss17 kernel:   Centaur CentaurHauls
    Feb 10 11:26:37 gauss17 kernel: Intel Spectre v2 broken microcode detected; disabling Speculation Control

  This is way I use a "rolling distribution" like Arch.

2018-02-14:
  Today I will attempt to install the prerequisites needed to
  allow using the Arch system Python for GPU based Tensorflow
  Deep-Learning programming with Keras. I am using the book
  "Deep Learning with Python" by François Chollet.
  Appendix A covers how to install the environment for Ubuntu.
  I will be using it as a rough guide for Arch.

  First make sure we are not conflating things with other
  Arch updates:

     $ sudo pacman -Syu

  Install pip, Arch's default Python environment in Python 3.6.4.

     $ sudo pacman -Syu python-pip
     $ pip --version
     pip 9.0.1 from /usr/lib/python3.6/site-packages (python 3.6)

  Next the appendix uses sudo pip to install tensorflow-gpu
  into the Python environment.  "Pacman -Ss tensorflow" tells
  me that there are four flavors, basic, with CPU optimizations,
  with GPU optimizations, and with both.  Lets go with the last one:

     $ sudo pacman -Syu tensorflow-opt-cuda python-tensorflow-opt-cuda

  This also drags in:

     absl-py
     blas
     cblas
     cuda-9.1.85-1
     cudnn-7.0.5-2
     gcc6-6.4.1-5
     gcc6-libs-6.4.1-5
     lapack
     opencl-nvidia
     protobuf
     pycuda-headers
     python-numpy
     python-protobuf
     python-pycuda
     python-pytools

  Pacman is indicating some optional dependencies:

     gdb: for cuda-gdb
     java-runtime: for nsight & nvvp [installed]
     tensorboard: for tensorflow-opt-cuda & python-tensorflow-opt-cuda
     python-nose: for python-numpy [installed]

  These recommendations seem reasonable

     $ sudo pacman -Syu gdb tensorboard

  Note the symlinks that were installed:

     /opt/cuda/bin/gcc -> /usr/bin/gcc-6
     /opt/cuda/bin/g++ -> /usr/bin/g++-6

  So, when doing cuda programming, I will need to put the
  /opt/cuda/bin directory in my path before /usr/bin.

  Next, install some more of the Python scientific stack:

     $ sudo pacman -Syu python-scipy python-matplotlib python-yaml

  To install Keras files to disk quickly and efficiently, install

     $ sudo pacman -Syu python-h5py

  which brought in

     cython
     hdf5
     libaec

  Install some visualization tools

     $ sudo pacman -Syu python-pydot

  which brought in

     graphviz
     gts

  also, since opencl-nvidia was brought in.

     $ sudo pacman -Syu python-pyopencl

  Now, appendix installs python-opencv.  OpenCV is a computer
  vision library.  Wondering if they meant OpenCL?  Doesn't
  seem to be an python-opencv in the Arch Repos

    $ pacman -Ss opencv
    extra/opencv 3.4.0-2
        Open Source Computer Vision Library
    extra/opencv-samples 3.4.0-2
        Open Source Computer Vision Library (samples)

  Let's see what we can do,

    $ sudo pacman -Syu opencv opencv-samples
    $ pip install python-opencv
    Collecting python-opencv
      Could not find a version that satisfies the requirement python-opencv (from versions: )
    No matching distribution found for python-opencv

  Oh well, I tried.

  I can skip over the setting up of the GPU, Pacman did this
  for me via dependencies.

  Finally, install Keras,

    $ cd ~/build
    $ git clone https://github.com/fchollet/keras
    $ cd keras
    $ sudo python setup.py install

  I think I am done! ... Nope.  Python is not finding
  module keras.  The python setup script installed a
  Keras-2.1.4-py3.6.egg file here:
  /usr/lib/python3.6/site-packages but there are no other
  "egg" files there, just directories and egg.info
  directories.  Had root blow the egg file away.

  Try installing it not from the git clone,

    $ sudo pip install keras

  It installed the same version, but this time in a similar
  format to what is already there.  Python now imports it.

2018-02-25:
  For the Keras libraries I installed, I had to go in as
  root to fix the permissions on the Python modules.  Seems
  that "other" didn't have any permisions.  Did a "chmod o+rx"
  on directories and a "chmod o+r" on the files.

2018-03-01:
  Orphan packages,

    $ pacman -Qtdq
    ethtool
    gmime
    gtksourceview2
    haskell-binary-tagged
    haskell-cmark
    haskell-either
    haskell-errors
    haskell-extensible-exceptions
    haskell-filemanip
    haskell-hit
    haskell-lifted-async
    haskell-monad-unlift
    haskell-monadrandom
    haskell-safe-exceptions
    haskell-text-binary
    haskell-vector-binary-instances
    libtracker-sparql
    libtxc_dxtn
    net-tools
    python2-dbus
    python2-urwid
    wireless_tools
    xorg-fonts-misc

  Removed them all with several rounds of

    $ sudo pacman -Rsu ...

2018-03-01:
  From vlc stderr I get:

    core audio output error: cannot add user audio filter "equalizer" (skipped)

  Tried adding

    $ sudo pacman -Syu pulseaudio-equalizer

  but still get same error.

2018-03-02:
  Continue pulseaudio-equalizer issues from yesterday.

  When I run qpaeq from the pulseaudio-equalizer package,

    $ qpaeq
    There was an error connecting to pulseaudio, please make sure you have the pulseaudio dbus module loaded, exiting...

  From the PalseAudio-ArchWiki page, it suggests to put the line

    ### Load the integrated PulseAudio equalizer and D-Bus module
    load-module module-equalizer-sink
    load-module module-dbus-protocol

  into either

     /etc/pulse/default.pa or ~/.config/pulse/default.pa

  I created the later and just put the above lines into it.
  I hope it works similarly to /etc/bash_profile and
  ~/.bash_profile. [Bad choice, see below.]

  After reboot, not only don't I have sound, but no wireless
  network either.

    $ systemctl --failed --all --user
    UNIT                 LOAD   ACTIVE SUB    DESCRIPTION
    ● pulseaudio.service loaded failed failed Sound Service
    ● pulseaudio.socket  loaded failed failed Sound System

    $ journalctl -b --user
    ...systemd[519]: Stopped Sound Service.
    ...systemd[519]: Starting Sound Service...
    ...pulseaudio[594]: W: [pulseaudio] module-equalizer-sink.c:
       module-equalizer-sink is currently unsupported, and can sometimes
       cause PulseAudio crashes, increased latency or audible artifacts.
    ...pulseaudio[594]: W: [pulseaudio] module-equalizer-sink.c: If you're
       facing audio problems, try unloading this module as a potential
       workaround.
    ...pulseaudio[594]: E: [pulseaudio] module-equalizer-sink.c: Master sink
       not found
    ...pulseaudio[594]: E: [pulseaudio] module.c: Failed to load module
       "module-equalizer-sink" (argument: ""): initialization failed.
    ...pulseaudio[594]: E: [pulseaudio] main.c: Module load failed.
    ...pulseaudio[594]: E: [pulseaudio] main.c: Failed to initialize daemon.
    ...systemd[519]: pulseaudio.service: Main process exited, code=exited,
       status=1/FAILURE
    ...systemd[519]: pulseaudio.service: Failed with result 'exit-code'.
    ...systemd[519]: Failed to start Sound Service.

  I'll remove file I created and reboot.

  Sound is back, but no wifi.  When I do a

    $ journalctl -f

  and hit the Fn-f3 key, I get

    ...ACPI group/action undefined: button/wlan / WLAN

  After another reboot, wifi is back. Gremlins? Hit Fn-f3 odd
  number of times?

  Back to pulseaudio issues.  The above error message seems
  to indicate that "module-equalizer-sink.c" is currently
  unsupported.

    $ find /usr -name module-equalizer-sink* 2>/dev/null
    /usr/lib/pulse-11.1/modules/module-equalizer-sink.so

    $ pacman -Qo /usr/lib/pulse-11.1/modules/module-equalizer-sink.so
    /usr/lib/pulse-11.1/modules/module-equalizer-sink.so is owned by pulseaudio-equalizer 11.1-1

  Maybe should punt with the equalizer, but if I continue,
  I would try and put the configurations lines I tried into
  /etc/pulse/default.pa instead.  Let's see what happens.

  Reboot.

  Everything still works, I "think" pavucontrol has gained some
  functionality.  Still get the error message

    core audio output error: cannot add user audio filter "equalizer" (skipped)

  when vlc is started.  Though it does not cache changes to its
  equalizer settings between runs.  Have no idea where vlc's
  equalizer functionality is implemented, within vlc? past down
  to pa?

2018-03-02:
  According to the Arch Linux PulseAudio Wiki,

    https://wiki.archlinux.org/index.php/PulseAudio

  I should have copied /etc/pulse/default.pa to
  ~/.config/pulse/default.pa and made my changes.

  I'll do as recommended.

2018-03-02:
  More pulseaudio wrangling, here is what I finally put
  into ~/.config/pulse/defaults.pa,

    #!/usr/bin/pulseaudio -nF

    .include /etc/pulse/default.pa

    ### Load the integrated PulseAudio equalizer and D-Bus module
    load-module module-equalizer-sink
    load-module module-dbus-protocol

  Don't think the #! is necessary, probably used by developers
  while debugging the deamon.  Also, the .include minimizes
  having to keep an eye out for /etc/pulse/default.pa.pacnew
  files.

    $ pacmd list-sinks|egrep -i 'index:|name:'
      index: 0
      name: <alsa_output.pci-0000_00_1f.3.analog-stereo>
    * index: 1
      name: <combined>
      index: 2
      name: <combined.equalizer>

  The * denotes the default channel.

  The qpaeq command now launches a Python based GUI where
  I can adjust frequency settings and save them.  It seems
  to be adjusting the <combined.equalized> channel.  I need
  to figure out how to make this the default channel.

  Some nomenclature, you send audio to "sinks" (sound cards,
  servers, process), you receive audio from "sources" (capture
  devices, processes).

  To list sources,

    $ pacmd list-sources|egrep -i 'device\.string|name:'
    name: <alsa_output.pci-0000_00_1f.3.analog-stereo.monitor>
        device.string = "0"
    name: <alsa_input.pci-0000_00_1f.3.analog-stereo>
        device.string = "front:0"
    name: <combined.monitor>
    name: <combined.equalizer.monitor>

  For now I am going to set the default sink, and leave sources
  alone.  File ~/.config/pulse/defauls.pa is now,

    #!/usr/bin/pulseaudio -nF

    .include /etc/pulse/default.pa

    ### Load the integrated PulseAudio equalizer and D-Bus module
    load-module module-equalizer-sink
    load-module module-dbus-protocol

    ### Set default sink
    set-default-sink combined.equalizer

  Reboot,

    $ systemctl --failed --all --user
    0 loaded units listed.

  To show all installed unit files,
  use 'systemctl list-unit-files'.

    $ pacmd list-sinks|egrep -i 'index:|name:'
      index: 0
          name: <alsa_output.pci-0000_00_1f.3.analog-stereo>
      index: 1
         name: <combined>
    * index: 2
         name: <combined.equalizer>

  But, no sound initially with vlc.  Messing around with
  pauvcontrol, I got sound and adjusting the equilizer with
  qpaeq.  Thought about adding combined.equalizer.monitor
  as a "source" to see if things defaulted correctly on
  reboot, but decided to just reboot and see if problem
  repeated itself.  Something else happeded.  Now, vlc
  played "out of the box" but qpaeq had no effect.  Also,

    $ pacmd list-sinks|egrep -i 'index:|name:'
    * index: 0
          name: <alsa_output.pci-0000_00_1f.3.analog-stereo>
      index: 1
          name: <combined>
      index: 2
          name: <alsa_output.pci-0000_00_1f.3.analog-stereo.equalizer>

  Now, the equalizer is on this ALSA device!

2018-03-02:
  Final form for pulseaudio default.pa,

    $ cat .config/pulse/default.pa
    #!/usr/bin/pulseaudio -nF

    .include /etc/pulse/default.pa

    ### Load the integrated PulseAudio equalizer and D-Bus module
    load-module module-equalizer-sink
    load-module module-dbus-protocol

    ### Set default sink (where audio is sent)
    set-default-sink alsa_output.pci-0000_00_1f.3.analog-stereo.equalizer

  This worked with both vlc and chrome running together and qpaeq
  manipulating their combined output, while pavucontrol could
  independently adjust their volumes.

2018-03-05:
  Noticed that Arch was not updating Rust toolchain.  Removed
  the rustup package via pacman and manually by rm -rf ~/.cargo
  directory.  Reinstalled Rust locally, see 2017-06-27 for how.

  Installed version is now,

    $ rustc --version
    rustc 1.24.1 (d3ae9a9e0 2018-02-27)

2018-03-07:
  I been readng the XFCE Arch Wiki and as a result, I'll try some
  changes.

  gnome-keyring:
  I have been getting along fine without it, and the wiki does not
  seem to indicate whether or not it is a desirable thing to run.

    Pros: Don't have to remember password schema.
          Can enable/disable it with XFCE settings.
          Some WiFi wpa2/psk hotspots connecton issues solved.
    Cons: By enabling it, gpg-agent & ssh-agent not launched.
          Have to mess with PAM to unlock keyring on login
          automatically.  Have to figure out how to backup
          keyring.

  For now, won't do anything.

  Preferred applications have no effect:
  I noticed that different applications will launch firefox
  instead of chrome, even though chrome is configured as the
  default.  Wiki says the xorg-xprop package needs to be
  installed for xdg-open and xdg-settings to detect and
  integrate with XFCE desktop environment correctly.

    $ pacman -Ss xorg-xprop
    extra/xorg-xprop 1.2.2-1 (xorg-apps xorg)
        Property displayer for X

  Installed it and rebooted.

    $ xdg-settings get default-web-browser
    google-chrome.desktop

  above command worked before and after install.

  Launching XFCE from command line:
  The Wiki refered me to the XFCE online documentation

    http://docs.xfce.org/xfce/xfce4-session/advanced

  which recommends when not using a desktop manager to
  start XFCE with an option to run the desktop with an
  active ConsoleKit.

    $ startxfce4 --with-ck-launch

  So, I updated ~/.xinitrc file to

    session=${1:-xfce}

    case $session in
        gnome          ) exec gnome-session;;
        gnome-classic  ) exec gnome-session --session=gnome-classic;;
        xfce           ) exec startxfce4 --with-ck-launch;;
        *              ) exec $1;;
    esac

  The web page says:

    The Xfce Desktop requires an active ConsoleKit session to
    function properly. ConsoleKit is used for system actions
    like shutdown, suspend and (un)mounting devices (through
    Polkit for authorization). In case you use a desktop manager,
    the DM will take care of that. For console starts this is
    a bit different.

  Well, didn't work.

    $ pacman -Ss consolekit with-ck-launch

  Can't find any packages.  From the freedesktop.org website,

    https://www.freedesktop.org/wiki/Software/ConsoleKit/

  it says:

    ConsoleKit is currently not actively maintained. The focus
    has shifted to the built-in seat/user/session management
    of Software/systemd called systemd-logind!

  So I removed --with-ck-launch from .xinitrc.  I need to check
  the dates of crap I find in internet forums!

2018-03-08:
  Installed java 9 jdk and jre,

    $ sudo pacman -Syu jdk9-openjdk jre9-openjdk openjdk9-doc
    ...
    Default Java environment is already set to 'java-8-openjdk'
    See 'archlinux-java help' to change it
    ...

  Only optional dependency not already installed is java-rhino.

    $ pacman -Ss java-rhino
    extra/java-rhino 1.7.7.1-1
        Open-source implementation of JavaScript written entirely in Java - JAR

  Sounds interesting,

    $ sudo pacman -Syu java-rhino

  Now,

   $ archlinux-java status
   Available Java environments:
     java-8-openjdk (default)
     java-9-openjdk

  also, Java is going to 6-month rolling releases with Java 10
  slated to come out 20 March 2018.  (Java 10.0.2 will be
  last "free as in beer" release of Oracle's Java.)  Java will
  start a new numbering system starting with Java 10.

    Java SE 10 -> Java 18.3
    Java SE 11 -> Java 18.9-LTS   (LTS will be 3 years)

  Therefore, for now, I will make java 9 the default version.

    $ sudo archlinux-java set java-9-openjdk

2018-03-11:
  Enabling compiling Haskell locally statically.

    $ sudo pacman -Syu ghc-static haskell-ghc-paths

  The second package brings names reversed engineered from
  the GHC build system into the GHC.Paths module.

    $ ghci
    GHCi, version 8.2.2: http://www.haskell.org/ghc/  :? for help
    Prelude> import GHC.Paths as GP
    Prelude GP> GP.ghc
    "/usr/bin/ghc-8.2.2"
    Prelude GP> GP.docdir
    "/usr/share/doc/ghc/html/libraries/base-4.10.1.0"
    Prelude GP> GP.ghc_pkg
    "/usr/bin/ghc-pkg-8.2.2"
    Prelude GP> GP.libdir
    "/usr/lib/ghc-8.2.2"

  The upstream of this package is maintained by Simon Marlow.

  Does not seem to contain any statically linked libraries.

    $ pacman -Qlq haskell-ghc-paths
    /usr/
    /usr/lib/
    /usr/lib/ghc-8.2.2/
    /usr/lib/ghc-8.2.2/site-local/
    /usr/lib/ghc-8.2.2/site-local/ghc-paths-0.1.0.9/
    /usr/lib/ghc-8.2.2/site-local/ghc-paths-0.1.0.9/GHC/
    /usr/lib/ghc-8.2.2/site-local/ghc-paths-0.1.0.9/GHC/Paths.dyn_hi
    /usr/lib/libHSghc-paths-0.1.0.9-jtXMj34IrEDKFvgWnrf0G-ghc8.2.2.so
    /usr/share/
    /usr/share/doc/
    /usr/share/doc/haskell-ghc-paths/
    /usr/share/haskell/
    /usr/share/haskell/register/
    /usr/share/haskell/register/haskell-ghc-paths.sh
    /usr/share/haskell/unregister/
    /usr/share/haskell/unregister/haskell-ghc-paths.sh
    /usr/share/licenses/
    /usr/share/licenses/haskell-ghc-paths/
    /usr/share/licenses/haskell-ghc-paths/LICENSE

  No *.a files.  Makes sense, we want it to give information
  on the system it runs on, not the system it is compiled on.

2018-04-14:
  Installed python virtualenv tool,

    $ sudo pacman -Syu python-virtualenv

  I wonder to what degree Anaconda's & Canopy's virtual
  environment mechanisms derive from this.

2018-04-17:
  Updated Rust installation, not using Arch version.

    $ rustup self update
    info: checking for self-updates

    $ rustup install stable
    info: syncing channel updates for 'stable-x86_64-unknown-linux-gnu'
    info: latest update on 2018-03-29, rust version 1.25.0 (84203cac6 2018-03-25)
    info: downloading component 'rustc'
    info: downloading component 'rust-std'
    info: downloading component 'cargo'
    info: downloading component 'rust-docs'
    info: removing component 'rustc'
    info: removing component 'rust-std'
    info: removing component 'cargo'
    info: removing component 'rust-docs'
    info: installing component 'rustc'
    info: installing component 'rust-std'
    info: installing component 'cargo'
    info: installing component 'rust-docs'

    $ rustc --version
    rustc 1.25.0 (84203cac6 2018-03-25)

  Install rust.vim Vim plugin for rust language:

  First install the Vundle plug-in manager for Vim,

    $ git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim

  Added Vundle configuration lines to .vimrc as per

    https://github.com/VundleVim/Vundle.vim

  also, added line

    Plugin 'rust-lang/rust.vim'

  to the appropriate section of the Vundle configuration as per

    https://github.com/rust-lang/rust.vim

  Configured the plugin from within vim via

    :PluginInstall

  To get help with Vundle, from within vim

    :h vundle

2018-04-18:
  Added Syntastic plugin.  Put in the Vundle section of .vimrc

    Plugin 'vim-syntastic/syntastic'

  Configured Syntastic as per

    https://github.com/vim-syntastic/syntastic

  by putting the following lines

    set statusline+=%#warningmsg#
    set statusline+=%{SyntasticStatuslineFlag()}
    set statusline+=%*

    let g:syntastic_always_populate_loc_list = 1
    let g:syntastic_auto_loc_list = 1
    let g:syntastic_check_on_open = 1
    let g:syntastic_check_on_wq = 0

  Needed to explicitly turn syntax on in .vimrc to get
  syntax colors.

  Need to verify, but subjectly syntax colors are better
  for different programming file types than with raw vim.

  Not sure if syntax checking is not working or if I just
  don't know how to use it yet.

  Good news, syntax checking works as advertised
  with :w a C file.

2018-04-19:
  Swapped in a new /etc/pacman.d/mirrorlist

  After uncommenting the Wordwide, Canada, German,
  Netherlands and United States servers, used the command

     $ rankmirrors -v /etc/pacman.d/mirrorlist

  to rank these servers.  Kept the top 25.  One Worldwide,
  the rest in the United States.

2018-04-21:
  Someone was knocking on my door while gauss17 was directly
  connected directly connected to the Internet.

  From Etherage I noticed alot of ssh activity from
  222.186.52.123.

  Partial output from "journalctl -u sshd":
    ...
    sshd[24200]: pam_tally(sshd:auth): Tally overflowed for user root
    sshd[24200]: pam_unix(sshd:auth): authentication failure; logname= uid=0 euid=0 tty=ssh ruser= rhost=222.186.52.123  user=root
    sshd[24200]: Failed password for root from 222.186.52.123 port 62002 ssh2
    sshd[24200]: pam_tally(sshd:auth): Tally overflowed for user root
    sshd[24200]: Failed password for root from 222.186.52.123 port 62002 ssh2
    sshd[24200]: pam_tally(sshd:auth): Tally overflowed for user root
    sshd[24200]: Failed password for root from 222.186.52.123 port 62002 ssh2
    sshd[24200]: error: maximum authentication attempts exceeded for root from 222.186.52.123 port 62002 ssh2 [preauth]
    sshd[24200]: Disconnecting authenticating user root 222.186.52.123 port 62002: Too many authentication failures [preauth]
    sshd[24200]: PAM 2 more authentication failures; logname= uid=0 euid=0 tty=ssh ruser= rhost=222.186.52.123  user=root
    sshd[24204]: pam_tally(sshd:auth): Tally overflowed for user root
    sshd[24204]: pam_unix(sshd:auth): authentication failure; logname= uid=0 euid=0 tty=ssh ruser= rhost=222.186.52.123  user=root
    sshd[24204]: Failed password for root from 222.186.52.123 port 31380 ssh2
    sshd[24204]: pam_tally(sshd:auth): Tally overflowed for user root
    sshd[24204]: Failed password for root from 222.186.52.123 port 31380 ssh2
    sshd[24204]: pam_tally(sshd:auth): Tally overflowed for user root
    sshd[24204]: Failed password for root from 222.186.52.123 port 31380 ssh2
    sshd[24204]: error: maximum authentication attempts exceeded for root from 222.186.52.123 port 31380 ssh2 [preauth]
    sshd[24204]: Disconnecting authenticating user root 222.186.52.123 port 31380: Too many authentication failures [preauth]
    ...

  Before I rebuilt gauss17, I had moved the ssh port to 30303,
  lets move it somewhere else, not allow passwd ssh, and deny
  root direct ssh access.

  Edit /etc/ssh/sshd_config:

    Port <snip> (uncommented, default was 22)
    PermitRootLogin no (uncommented, default was prohibit-password)
    PasswordAuthentication no (uncommented, default was yes)
    ChallengeResponseAuthentication no (already set)

  See 2018-04-23.

2019-04-22:
  Following up from yesterday, since I tightened up on sshd
  security, I am not seeing any unusual activity using
  `journalctl -u sshd -f' running all night.

  Data mined journalctl logs:

  Distinct login names blackhats used:

    $ for ii in 0 1 2
    > do
    >  journalctl -u sshd -b -${ii}|grep ' Failed password for '
    > done|sed 's/ from .*$//'|sed 's/invalid user //'|sed 's/^.* for //'|sort|uniq
    1234
    admin
    bot
    deploybot
    git
    hduser
    mc
    mobile
    monitor
    oracle
    pi
    postgres
    probe
    public
    root
    serveur
    share
    sinusbot
    support
    test
    teste
    tmax
    ts3
    ubnt
    ubuntu
    user
    usuario

  Lets make a report,

  No, I did not type the following in at the command line,
  I editted the command line in "set -o vi" mode via <esc>v

    $ for login in $(for ii in 0 1 2
    >   do
    >     journalctl -u sshd -b -${ii}|grep ' Failed password for '
    >   done|sed 's/ from .*$//'|sed 's/invalid user //
    >                                 s/^.* for //'      |sort|uniq)
    > do
    >   for ii in 0 1 2
    >   do
    >     journalctl -u sshd -b -${ii}|grep ' Failed password for '|grep ${login}|sed 's/invalid user //
    >                                                                                  s/ from / /
    >                                                                                  s/ port / /
    >                                                                                  s/ ssh2$//'
    >   done|sed 's/^.* for //'
    > done|sort -V > hold1

  Report looks like,

    $ cat hold1 | head -6
    1234 5.101.40.81 49279
    1234 5.101.40.81 49279
    admin 5.101.40.81 39284
    admin 5.101.40.81 39284
    admin 5.101.40.81 39284
    admin 5.101.40.81 52845

  Number of distinct blackhat ssh attemps in last 2 days before sshd lockdown:

    $ cat hold1 | wc -l
    9791

 Generate subreport of uniq IPs and logins,

    $ sed 's/ [0-9]*$//' hold1|uniq|sed 's|\(.*\) \(.*\)|\2 \1|'|sort -V > hold2

 Editted contents of hold2:

    5.101.40.81 1234
    5.101.40.81 admin
    5.186.77.62 deploybot hduser mc oracle public root test
    14.231.139.150 admin
    42.7.26.61 root
    42.159.246.3 admin
    82.146.42.42 share tmax usuario
    85.0.188.83 ts3
    88.247.140.8 pi
    91.77.79.79 admin
    103.89.88.220 root
    103.99.2.136 root
    103.210.135.136 support
    113.190.217.166 admin
    115.84.92.207 admin
    119.42.127.166 admin
    121.176.81.18 admin
    123.21.201.113 root
    128.199.164.110 root
    140.143.64.105 sinusbot ubuntu
    159.192.127.131 support
    177.182.145.25 root
    178.253.236.44 ubnt
    178.253.237.83 user
    179.52.234.254 admin
    181.211.61.197 admin
    185.17.134.167 root
    185.143.223.77 bot monitor
    186.47.169.239 admin
    186.148.172.130 root
    187.189.225.37 admin
    189.108.183.115 git postgres root
    192.34.60.79 admin probe root serveur teste ubuntu
    197.48.250.11 admin
    211.117.11.149 root
    212.129.38.148 admin mobile monitor pi root ubnt
    217.128.127.128 admin
    218.65.30.25 root
    222.82.138.209 admin
    222.186.52.123 root

  Does not look like I am specifically being targeted.

  Number of failed ssh logins attempts per IP

    $ for ip in $(for ip2 in $(sed 's/\(^.*\) .*/\1/' hold2)
    >             do
    >               echo $ip2
    >             done|uniq)
    > do
    >   echo ${ip} $(grep " ${ip} " hold1|wc -l)
    > done | sort -g -k 2,2 -r
    222.186.52.123 6547
    42.7.26.61 2943
    212.129.38.148 80
    218.65.30.25 60
    5.186.77.62 21
    192.34.60.79 18
    5.101.40.81 16
    42.159.246.3 12
    222.82.138.209 12
    103.210.135.136 12
    82.146.42.42 10
    140.143.64.105 5
    88.247.140.8 4
    189.108.183.115 4
    185.143.223.77 4
    211.117.11.149 3
    177.182.145.25 3
    91.77.79.79 2
    85.0.188.83 2
    217.128.127.128 2
    197.48.250.11 2
    187.189.225.37 2
    186.47.169.239 2
    181.211.61.197 2
    179.52.234.254 2
    178.253.236.44 2
    159.192.127.131 2
    14.231.139.150 2
    121.176.81.18 2
    119.42.127.166 2
    115.84.92.207 2
    113.190.217.166 2
    186.148.172.130 1
    185.17.134.167 1
    178.253.237.83 1
    128.199.164.110 1
    123.21.201.113 1
    103.99.2.136 1
    103.89.88.220 1

  The top 4 offenders are:

    222.186.52.123 6547 -> China Zhenjiang Chinanet Jiangsu Province Network (Beijing)
    42.7.26.61     2943 -> China Anshan Unicom Liaoning Province Network (Beijing)
    212.129.38.148   80 -> France Paris Online S.a.s. (Paris)
    218.65.30.25     60 -> China Xinyu Chinanet Jiangxi Province Network (Beijing)

  What did I get out of this:

  1. I should upgrade my firewall enabled wireless router to
     IPv6 so I am not tempted to plug my Linux computer
     directly into my cable "modem."
  2. If I ever did this for a living, do it in Python.
  3. Learned a little bit more about grep, sed, and sort options.
  4. Confirmed I was not being targetted specifically.
  5. Realtively certain that I have not been hacked, at least
     not by anyone of comperable expertise as myself.

2018-04-23:
  Forgot to enable the sshd.socket service,

  Configure systemd to listen for sshd trafic

      # systemctl edit --full sshd.socket

    where we changed ListenStream=22 to ListenStream=<snip>

    Enable on boot:

      # systemctl enable sshd.socket

2018-05-08:
  Did /etc/..../*.pacnew merging.  Mostly updating comments.

  Factoid: systemd now maintains
               /etc/{passwd,shadow,gshadow,group}
           The only reason to manually update them is to update
           the comments, so these *.pacnew files can be safely
           deleted.  The new versions of these files are just
           subs with root's info in them.

2018-05-17:
  Installed a vulnerability scanner,

    $ sudo pacman -Syu vulscan

  brought in nmap.

2018-05-22:
  Decided to try out the Cinnamon Desktop environment.

  First, updated ~/.xinitrc:

    session=${1:-xfce}

    case $session in
        xfce           ) exec startxfce4;;
        cinnamon       ) exec cinnamon-session;;
        *              ) exec $1;;
    esac

  Next, install some packages useful to Cinnamon, sone may be
  useful to XFCE too,

    $ sudo pacman -Syu system-config-printer blueberry gnome-screenshot

  this brought in:

    bluez-5.49-4  bluez-tools-0.2.0-1  gnome-bluetooth-3.28.0-1
    gobject-introspection-runtime-1.56.1-1
    pulseaudio-bluetooth-11.1-1  pygobject-devel-3.28.2-1
    python-cairo-1.17.0-1  python-chardet-3.0.4-1
    python-gobject-3.28.2-1  python-idna-2.6-1
    python-pycups-1.9.73-3  python-pycurl-7.43.0.1-1
    python-requests-2.18.4-1  python-urllib3-1.22-1
    python2-dbus-1.2.6-1  python2-gobject-3.28.2-1
    python2-setproctitle-1.1.10-2  blueberry-1.2.0-1
    gnome-screenshot-3.26.0-1  system-config-printer-1.5.11-2

  Finally bring in Cinnamon itself,

    sudo pacman -Syu cinnamon

  which brought in

    accountsservice-0.6.49-1  caribou-0.4.21+60+gec9041b-1
    cinnamon-control-center-3.8.0-1  cinnamon-desktop-3.8.1-1
    cinnamon-menus-3.8.1-1  cinnamon-screensaver-3.8.1-1
    cinnamon-session-3.8.1-1  cinnamon-settings-daemon-3.8.2-1
    cjs-3.8.0-1  clutter-1.26.2-1  clutter-gtk-1.8.4-1
    cogl-1.22.2+10+g3baa2d7a-1  exempi-2.4.5-1
    gnome-backgrounds-3.28.0-1  libgnomekbd-3.26.0+5+g1c1b585-1
    muffin-3.8.1-1  nemo-3.8.2-1
    python-atspi-2.26.0-1 python-pam-1.8.3-1
    python-pillow-5.1.0-1 python-psutil-5.4.5-1
    python-pyinotify-0.9.6-3 python-setproctitle-1.1.10-2
    python-xapp-1.2.0-1
    xapps-1.2.1-1  zenity-3.28.1-1
    cinnamon-3.8.3-1

  Now lets test,

      $ startx

  brings up XFCE as it should, but both

      $ startx cinnamon
      $ startx xfce

  don't work, seems that

      $ startx

  passes no arguments to ~/.xinitrc but

      $ startx foobar

  passes "$@" = "xterm" "foobar" to it.  The /usr/bin/startx
  script is your typical lowest common denomiator
  Posix/System V/BSD Bourne Shell script.  As such, it is
  horribly overly complicated being totally compatible with
  every possible Unix system ever invented.
  Also impossible to change because you can't test it
  on "every possible Unix system ever invented."  To get
  around this ugly wart, I changed ~/.xinitrc to

      session=${2:-cinnamon}

      case $session in
          xfce           ) exec startxfce4;;
          cinnamon       ) exec cinnamon-session;;
          *              ) exec $2;;
      esac

  I defaulted it to cinnamon because xfce has only 4 letters
  and I don't have to think how to spell it.

  See Userland_Adminlog for adventures in configuring Cinnamon.

2018-06-27:
  Installed East Asian fonts.  Like I did on 2017-01-11 with
  previous incarnation of gauss17.

  Used

    $ pacman -Ss fonts|egrep -i -B 1 'japanese|chinese|korean'

  to get names of font packages.  Now Baidu seems to display
  correctly.

2018-07-06:
  Meeded to use my PC's built in SD card reader, so installed
  the utilities for exFAT file system.

    $ sudo pacman -Syu exfat-utils

  Note:
    Package community/exfat-utils uses the extra/fuse2 package.
    Utilities that use fuse2 work in user space, not kernel
    space, so expect a performance hit.  The filesystems which
    use fuse2 are:

      exfat-utils
      gvfs
      ntfs-3g

2018-08-18:
  Looked into Scala Natively.  Uses Clang.  Decided to build
  in Clang toolchain support as a first step.

    $ sudo pacman -Syu clang zapcc

  zapcc is a "fast"  CC compiler.  Not sure what they mean,
  compiles fast or runs fast?  Supposively creates memory
  efficient code useful for large C++ programs.

2018-18-18:

  Seems sbt is broken:

    $ sbt

    The java installation you have is not up to date
    requires at least version 1.6+, you have
    version 10.0 2018-07-17

    Please go to http://www.java.com/getjava/ and download
    a valid Java Runtime and install before running

  Alot of internet chatter regarding this from April.

    $ whence sbt
    /home/geoff/opt/sbt/bin/sbt
    /usr/bin/sbt

  Problem goes away when I use Arch version.  Got rid of local
  version.

    $ rm -rf ~/opt/sbt/

  Check what is installed,

   $ pacman -Ss sbt
    community/sbt 1:1.1.4-1 [installed]
        The interactive build tool

2018-09-23:
  Install GNOME 3 (gnome-shell)

    $ sudo pacman -Syu gnome gnome-extra gnome-shell-extensions

  also, added the following line to the case statement
  to the ~/.xinitrc file.

    gnome          ) exec gnome-session;;

  Cinnonmon started with no problem.

  Started Gnome-shell via

    $ startx gnome

  See notes/gnome3Conf.md for how I configured Gnome 3.

2018-09-25:
  Installed htop after discovering that top was reverted to the
  original top command:

    Pacman: htop

2018-09-25:
  Installed Gnome-shell Clipboard Indicator extension from AUR.

    $ mkdir -p ~/build/AUR/gnome-extensions; cd ~/build/AUR/gnome-extensions
    $ git clone https://aur.archlinux.org/gnome-shell-extension-clipboard-indicator-git.git
    $ cd gnome-shell-extension-clipboard-indicator-git
    $ makepkg -sri

2018-10-07:
  Updated Rust environment installed locally in my home directory.

    $ rustup self update
    $ rustup update
    $ rustc --version
    rustc 1.29.1 (b801ae664 2018-09-20)

2018-10-07:
  Remove orphan packages.

    $ pacman -Qtdq
    cython
    dcadec
    flite
    gcc54
    gcc6
    gconfmm
    glew
    gtkglext
    haskell-cpphs
    haskell-deepseq-generics
    haskell-foundation
    haskell-hastache
    haskell-microlens-mtl
    haskell-mime-mail
    haskell-mmorph
    haskell-pid1
    haskell-prelude-extras
    haskell-semigroups
    haskell-stringsearch
    haskell-uri-bytestring
    hunspell-en_AU
    hunspell-en_CA
    hunspell-en_GB
    js
    lcms
    libcloudproviders
    libglademm
    libgnomecanvas
    libmagick6
    openjpeg
    python-pyqt4
    schroedinger
    sip
    xine-lib

    $ sudo pacman -Rns $(pacman -Qtdq)

2018-10-17:
  Boldly removed XFCE and Cinnamon.

    $ sudo pacman -Rsu cinnamon
    $ sudo pacman -Rsu xfce4
    $ sudo pacman -Rsu xfce4-goodies
    $ sudo pacman -Rsu xfce4

  See what got orphaned.

    $ pacman -Qtdq
    haskell-mwc-random

    $ sudo pacman -Rsu haskell-mwc-random

  Which removed

    haskell-math-functions
    haskell-vector-th-unbox
    haskell-mwc-random

  Probably had nothing to do with removing
  xfce4 and cinnamon DE's.

2018-10-17:
  OK, startx was removed.  Have to research the alternatives.

    $ pacman -Ss startx
    community/sx 2.1-1
        Simple alternative to startx(1) for starting an Xorg server.

2018-10-18:
  This is what I what,

    $ pacman -Ss xorg-xinit
    extra/xorg-xinit 1.4.0-3
        X.Org initialisation program

  So, install it

    $ sudo pacman -Syu xorg-xinit

  Also brought in xorg-xauth.  Once installed, startx worked
  as it usually does.

  Research this, I find that I already have the gnome display
  manager, gdm, installed.

    $ whence gdm
    /usr/bin/gdm

  Let's us see its status

    $ systemctl status gdm
    ● gdm.service - GNOME Display Manager
       Loaded: loaded (/usr/lib/systemd/system/gdm.service; disabled; vendor preset>
       Active: inactive (dead)

  Usual systemctl mechanism to

     sudo systemctl (start|stop|restart|try-restart) gdm
     sudo systemctl (enable|disable) gdm

2018-10-18:
  When gdm enabled and system rebooted, get the login GUI
  on <ctrl>+<alt>+F1.  When I log in, I get the "Black Screen
  of Death" on both <ctlr>+<alt>+F1 & <ctrl>+<alt>+F2.  Able
  to login on the other virtual terminals.

  Tried moving ~/.xintrc aside, but this not help.

  Seems that gdm is launched on TTY1 and it spwans
  the user login session in TTY2.  Unfortunately, I am
  getting the "black screen of death" in TTY2.

  Tried uncommenting in /etc/gdm/custom.conf the line

    #WaylandEnable=false

  but behavior was the same.  Did this because Wayland
  and NVIDIA don't get along with each other at this time.

  Repeated /etc/X11/xorg.conf and .xinitrc changes I made
  back on 2016-07-09 (and removed on 2017-06-29).  Before
  I make any GDM changes, make sure I can still launch
  gnome-shell via startx.

  Using startx still works.  I am using the Arch-Wiki article:

    https://wiki.archlinux.org/index.php/NVIDIA_Optimus

  where I am getting this information.  For GDM it says
  "Make sure that GDM use X as default backend."  So
  uncommenting the line in /etc/gdm/custom.conf as I tried
  above.

  Created two files,

    /etc/xdg/autostart/optimus.desktop
    /usr/share/gdm/greeter/autostart/optimus.desktop

  with the contents:

    [Desktop Entry]
    Type=Application
    Name=Optimus
    Exec=sh -c "xrandr --setprovideroutputsource modesetting NVIDIA-0; xrandr --auto"
    NoDisplay=true
    X-GNOME-Autostart-Phase=DisplayServer

  Still does not work.  I am becoming wearly of magical
  incantations that I don't know what they do, so I will
  stick with startx for a while longer.

  It may be just my imagination, but my desktop backgraound seems
  to be a lot sharper.

2018-10-19:
  Got GDM to work!

  Created file /etc/xprofile with the contents,

    xrandr --setprovideroutputsource modesetting NVIDIA-0
    xrandr --auto

  and enabled the service via

    $ sudo systemctl enable gdm.service

  rebooted and login screen came up on TTY1.  After logging
  in, my X session was on TTY3 with the login screen still
  running on TTY1.  Next time it came up on TTY2.

  The .bashrc hook configured my initial environment, note,
  ~/.bash_profile was not sourced!  But my .bashrc hooked worked.

    $ env|grep -i bash
    BASHRC_NON_INTERACTIVE=0
    BASHRC_INTERACTIVE=1
    BASH_INITCONF=1
    SHELL=/bin/bash
    BASH_FUNC_bash_initconf_ran%%=() {  return 0

    $ path
    /home/geoff/.cargo/bin
    /home/geoff/.local/bin
    /home/geoff/local/bin
    /usr/local/bin
    /usr/local/sbin
    /usr/bin
    /opt/cuda/bin
    /usr/lib/jvm/default/bin
    /usr/bin/site_perl
    /usr/bin/vendor_perl
    /usr/bin/core_perl
    /home/geoff/bin

  Let's see if I can log out shut the system down at the console.

  Yes, also I can reboot from within the X-session.

  I updated ~/.xinitrc file to:

    unset -f bash_initconf_ran

    [ -f /etc/xprofile ] && . /etc/xprofile

    session=${2:-gnome}

    case $session in
        gnome          ) exec gnome-session;;
        xfce           ) exec startxfce4;;
        cinnamon       ) exec cinnamon-session;;
        *              ) exec $2;;
    esac

  The Arch-Wiki xprofile page indicates that both
  ~/.xinitrc and /etc/gdm/Xsession needs to source
  /etc/xprofile and/or ~/.xprofile.  Remember, these
  are run under POSIX sh, not bash.

  Aside: pretty sure "unset -f" never was in the
         AT&T SYS V Bourne shell, I think it
         is a ksh-ism.

  Now, only one place I need to keep the xrandr
  commands straight.

2018-10-20:
  Removing these two files I created on 2018-10-18
  did not affect anything,

    /etc/xdg/autostart/optimus.desktop
    /usr/share/gdm/greeter/autostart/optimus.desktop

2018-10-20:
  The purpose of the XDG Autostart directories

    /etc/xdg/autostart/
    ~/.config/autostart/

  is to launch applications on DE startup and removable
  media mounting.  The entries, with the same filename
  in the later location overide entries in the former.

  To disable a system-wide entry, create an overriding
  entry containing

    Hidden=true

  This mechanism is used by any DE that supports the
  Freedesktop.org standard.

2018-10-20:
  The purpose of /usr/share/gdm/greeter/autostart/
  allows applications to run on the initialization
  of the GDM login screen on TTY1, before any users
  log in.

2018-10-23:
  Installed 7-Zip file archiver.  High compression
  ratios.  Can add passwords to archive.

    $ sudo pacman -Syu p7zip

  See the 7z, 7za, 7zr man pages.

2018-12-08:
  Command "sudo pacman -Syu" failed.  Something called zapcc
  wanted to install files owned by clang.

    $ sudo pacman -Rsc zapcc
    checking dependencies...

    Packages (2) z3-4.8.3-1  zapcc-5.0-1
    ...

  Then upgrade went fine.  After that reinstalled z3 with no
  issues.

  Originally installed zapcc on 2018-08-18 as first step in
  installing Scala Natively, which I never followed through with.

2018-12-24:
  Installed the traditional /usr/bin/time utility.

    $ sudo pacman -Syu time

  Note that time is also a bash built-in, so if you want to use
  the GNU version of time, use complete path name.

  Bash version handles whole pipelines.  The GNU version can
  report on other useful information.  The Linux manpages are
  their own pacman package, so man time reported on
  /usr/bin/time without the time package being installed.

2019-01-24:
  Installed a light weight, POSIX compliant shell call Dash.

    $ sudo pacman -Syu dash

  Reason was`that when bash is in POSIX compliant mode via

    $ bash -o posix

  bash extensions are not disabled!  By "compliant" they mean
  that if you limit yourself to a POSIX compliant subset of
  bash, then bash will behave as closely as possible to the
  POSIX standard.

2019-02-05:
  Using gdm, Gnome Display Manager, my login geoff fails to
  launch GNOME desktop, the only one installed right now.

  I have been messing with the ~/.bash* files, but login
  fails even when I use /etc/skel files.

  Disables gdm

    # systemctl disable gdm

  and rebooted.  No trouble launching a Gnome3 desktop
  session.

  Try creating a new user and see if it works for them,

    # useradd -d /home/jorblow -c "Joe Blow" -m jb
    # passwd jb

  No problem logging in at VT04 as jb.

  Enable gdm,

    # systemctl enable gdm

  and reboot.

  Able to login as jb, not geoff.

  lets look for differences between these two users:

    $ journalctl -b | grep -E '(geoff|jb)'
    ... gdm-password][854]: pam_unix(gdm-password:session): session opened for user jb by (uid=0)
    ... systemd-logind[530]: New session 2 of user jb.
    ... systemd[892]: pam_unix(systemd-user:session): session opened for user jb by (uid=0)
    ... systemd[1]: Started Session 2 of user jb.
    ... /usr/lib/gdm-x-session[908]: localuser:jb being added to access control list
    ... gdm-password][854]: pam_unix(gdm-password:session): session closed for user jb
    ... systemd[893]: pam_unix(systemd-user:session): session closed for user jb
    ... gdm-password][1858]: pam_unix(gdm-password:session): session opened for user geoff by (uid=0)
    ... systemd-logind[530]: New session 4 of user geoff.
    ... systemd[1862]: pam_unix(systemd-user:session): session opened for user geoff by (uid=0)
    ... systemd[1]: Started Session 4 of user geoff.
    ... /usr/lib/gdm-x-session[1878]: /home/geoff/.profile: line 20: source: .bashrc: file not found
    ... gdm-password][1858]: pam_unix(gdm-password:session): session closed for user geoff
    ...

  Humm... /home/geoff/.profile??? seems to be an earlier version
  of .bash_profile.  Let's see what happens if we blow it away.

  Works!!!  Logged into a GNOME3 desktop session via gdm as geoff
  with no problem.

  Don't know why the presence of .profile should do this, the
  default shell for geoff is bash, see the entry in /etc/passwd:

    geoff:x:1000:1000:Geoffrey Scheller:/home/geoff:/bin/bash

  Bash man page says: "... it looks for ~/.bash_profile,
  ~/.bash_login, and ~/.profile, in  that order, and reads
  and executes commands from the first one that exists and
  is readable."

  It is not Bash that is doing it,

    ... /usr/lib/gdm-x-session[1878]: /home/geoff/.profile: line 20: source: .bashrc: file not found

  Maybe GNOME3 is trying to "grok" the user environment???
  Both dash and sh (bash run as sh) fail to source files
  unless "." in on the PATH with similar verbiage, ... and
  I don't put "." on the PATH.

2019-02-05:
  While poking around journalctl logs, I noticed:

    ... NetworkManager[533]: <warn>  [1549415350.5391] \
    device (wlp2s0): wifi-scan: active scanning for \
    networks due to profiles with wifi.hidden=yes. \
    This makes you trackable

2019-02-07:
  Remove the script
    /etc/NetworkManager/dispatcher.d/70-wifi-wired-exclusive
  which I installed on 2017-07-29.  This shut the wifi-downi
  when an Ethernet cable was plugged into system.  Got in my
  way when I wanted to adjust wifi settings while plugged
  directly into my cable modem.  Don't currently have a need
  for this.

  Now, lets not be so trackable (see last 2019-02-05 above),

    # cd /etc/wicd
    # grep 'hidden = True' wireless-settings.conf | wc
      9      27     126

  So, I went in and delete all entries out with "Hidden = True"
  out.

  Also, reenabled SSID broadcasting on my apartment router.
  Disconnected Ethernet and plugged it directly from the the
  cable "modem" to the wireless router.

  Reboot.

  Arch came up and immediately attached to the wireless router,
  even though I had just BLOWN AWAY ALL OF THE CONFIGURATION INFO
  from  /etc/wicd/wireless-settings.conf???

  Files wired-settings.conf & wireless-settings.conf were dated
  Jul 27 2017 but contain info of places I went to after that.

  I not sure how any of this networking crap works anymore.

  Now,

    # grep 'hidden = True' wireless-settings.conf | wc
    0       0       0

  but still

    $ journalctl -b | grep -i 'trackable'
    Feb 07 00:47:57 gauss17 NetworkManager[539]: <warn>  [1549525677.7327] device (wlp2s0): wifi-scan: active scanning for networks due to profiles with wifi.hidden=yes. This makes you trackable

  It does say NetworkManager,

    $ ps -fu root | grep NetworkManager
    root       539     1  0 00:47 ?        00:00:08 /usr/bin/NetworkManager --no-daemon

  Manpage for NetworkManager got me /etc/NetworkManager/ and
  there is a directory called system-connections/.  This directory
  contains a file for each wireless connection.

  Well, these notes clearly show that on 2017-07-27 I replace Wicd
  with NetworkManager.  Explains why wireless-settings.conf
  was not being used.  I am an idiot, but at least now
  a :-) idiot.

  There are 17 files with "hidden=true", some of which I know
  the SSID's get broadcast.  Since I want to "walk lightly,"
  I'll move these files to root's home.  If NetworkManager is
  continuously broadcasting this collection, I am continuously
  broadcasting a fingerprint!

  Logged into wireless router and got network confuration
  before reboot.

  Reboot.

  Just needed the SSID, and connected to my apartment router
  the first try.  No "hidden=true" in the file genaerated in
  /etc/NetworkManager/system-connections/.

2019-03-06:
  Noticed that man -k did not work.  Manually as root ran mandb
  and it fixed it.

  But why is it not being updated?  In the olde days, it was
  kicked off via cron.  Probably some systemd service now-a-days?

  Internet seaching shows most people want to turn it off, along
  with updatedb, to increase boot time.

    $ sudo pacman -Ss man-db
    core/man-db 2.8.5-2 (base) [installed]
        A utility for reading man pages

    $ sudo pacman -Ss mlocate
    core/mlocate 0.26.git.20170220-1 [installed]
        Merging locate/updatedb implementation

  I had to install mlocate.

  But when I try to enable them, I get

    $ sudo systemctl enable man-db.service
    The unit files have no installation config (WantedBy=, RequiredBy=, Also=,
    Alias= settings in the [Install] section, and DefaultInstance= for template
    units). This means they are not meant to be enabled using systemctl.

    Possible reasons for having this kind of units are:
    • A unit may be statically enabled by being symlinked from another unit's
      .wants/ or .requires/ directory.
    • A unit's purpose may be to act as a helper for some other unit which has
      a requirement dependency on it.
    • A unit may be started when needed via activation (socket, path, timer,
      D-Bus, udev, scripted systemctl call, ...).
    • In case of template units, the unit is meant to be enabled with some
      instance name specified.

    $ sudo systemctl enable updatedb.service
    The unit files have no installation config (WantedBy=, RequiredBy=, Also=,
    Alias= settings in the [Install] section, and DefaultInstance= for template
    units). This means they are not meant to be enabled using systemctl.

    Possible reasons for having this kind of units are:
    • A unit may be statically enabled by being symlinked from another unit's
      .wants/ or .requires/ directory.
    • A unit's purpose may be to act as a helper for some other unit which has
      a requirement dependency on it.
    • A unit may be started when needed via activation (socket, path, timer,
      D-Bus, udev, scripted systemctl call, ...).
    • In case of template units, the unit is meant to be enabled with some
      instance name specified.

  So, need to figure out what I need to enable to get these
  to update.

    $ sudo systemctl enable man-db.timer
    Created symlink /etc/systemd/system/timers.target.wants/man-db.timer → /usr/lib/systemd/system/man-db.timer.

    $ sudo systemctl enable updatedb.timer
    The unit files have no installation config (WantedBy=, RequiredBy=, Also=,
    Alias= settings in the [Install] section, and DefaultInstance= for template
    units). This means they are not meant to be enabled using systemctl.

  Got, half of it

    $ pacman -Qlq man-db | grep systemd
    /usr/lib/systemd/
    /usr/lib/systemd/system/
    /usr/lib/systemd/system/man-db.service
    /usr/lib/systemd/system/man-db.timer
    /usr/lib/systemd/system/multi-user.target.wants/
    /usr/lib/systemd/system/multi-user.target.wants/man-db.timer

    $ pacman -Qlq mlocate | grep systemd
    /usr/lib/systemd/
    /usr/lib/systemd/system/
    /usr/lib/systemd/system/multi-user.target.wants/
    /usr/lib/systemd/system/multi-user.target.wants/updatedb.timer
    /usr/lib/systemd/system/updatedb.service
    /usr/lib/systemd/system/updatedb.timer

    $ locate passwd
    locate: can not stat () `/var/lib/mlocate/mlocate.db': No such file or directory

    # updatedb

    $ locate passwd
    /etc/passwd
    /etc/passwd-
    /etc/pam.d/chgpasswd
    /etc/pam.d/chpasswd
    /etc/pam.d/passwd
    ...

  The updatedb ran reasonably quickly.

  I can start the updatedb.service, but cannot enable neither it
  nor updatedb.timer.

    $ date
    Thu Mar  7 00:33:53 MST 2019

    $ sudo systemctl start updatedb.service

    $ systemctl status updatedb.service
    ● updatedb.service - Update locate database
       Loaded: loaded (/usr/lib/systemd/system/updatedb.service; static; vendor preset: disabled)
       Active: inactive (dead) since Thu 2019-03-07 00:34:00 MST; 4s ago
      Process: 4682 ExecStart=/usr/bin/updatedb (code=exited, status=0/SUCCESS)
     Main PID: 4682 (code=exited, status=0/SUCCESS)

    Mar 07 00:34:00 gauss17 systemd[1]: Starting Update locate database...
    Mar 07 00:34:00 gauss17 systemd[1]: updatedb.service: Succeeded.
    Mar 07 00:34:00 gauss17 systemd[1]: Started Update locate database.

    $ sudo updatedb

    $ sudo systemctl enable updatedb.timer
    The unit files have no installation config (WantedBy=, RequiredBy=, Also=,
    Alias= settings in the [Install] section, and DefaultInstance= for template
    units). This means they are not meant to be enabled using systemctl.

    Possible reasons for having this kind of units are:
    • A unit may be statically enabled by being symlinked from another unit's
      .wants/ or .requires/ directory.
    • A unit's purpose may be to act as a helper for some other unit which has
      a requirement dependency on it.
    • A unit may be started when needed via activation (socket, path, timer,
      D-Bus, udev, scripted systemctl call, ...).
    • In case of template units, the unit is meant to be enabled with some
      instance name specified.

  I rarely use locate, so for now I can live with

    $ sudo updatedb; locate foobar
    /home/geoff/.cinnamon/spices.cache/applet/rwall@typicalfoobar.png

2019-03-24:
  Installed glxinfo as part of mesa-demos package

     $ glxinfo -B
     name of display: :1
     display: :1  screen: 0
     direct rendering: Yes
     Memory info (GL_NVX_gpu_memory_info):
         Dedicated video memory: 2048 MB
         Total available memory: 2048 MB
         Currently available dedicated video memory: 1840 MB
     OpenGL vendor string: NVIDIA Corporation
     OpenGL renderer string: GeForce 940M/PCIe/SSE2
     OpenGL core profile version string: 4.6.0 NVIDIA 418.56
     OpenGL core profile shading language version string: 4.60 NVIDIA
     OpenGL core profile context flags: (none)
     OpenGL core profile profile mask: core profile

     OpenGL version string: 4.6.0 NVIDIA 418.56
     OpenGL shading language version string: 4.60 NVIDIA
     OpenGL context flags: (none)
     OpenGL profile mask: (none)

     OpenGL ES profile version string: OpenGL ES 3.2 NVIDIA 418.56
     OpenGL ES profile shading language version string: OpenGL ES GLSL ES 3.20

  When run from the console,

     $ glxinfo -B
     Error: Unable to open display

  so it is an X thing, not a driver thing.  Also, a lot of neat
  graphics demo programs installed, to see what they are,

     $ pacman -Qlq mesa-demos | grep '/bin/'

2019-03-25:
  Noticed typo when I created user jb home directory,
  from /etc/profile:

    jb:x:1001:1001:Joe Blow://home/jorblow:/bin/bash

  Fixed it via

    # usermod -d /home/joeblow -m jb

  This changed home directory in system files and moved user jb's
  files to new location.

  /etc/passwd now reads

    jb:x:1001:1001:Joe Blow:/home/joeblow:/bin/bash

  The home directory name deliberately not the same as
  the login name.

2019-03-30: (Prelude)
  Decided to look into using the Intel graphics chipset for the
  desktop GUI while retaining the ability to use the NVIDIA card
  for OpenCL/CUDA.  Basically OpenGL on the integrated Intel
  Chipset.

  1. Hopefully this will allow me to migrate my windowing
     environment to Wayland.
  2. Frees up resources for the NVidia card.
  3. Might not play 3D games as well, but I don't play 3D games.
  4. Makes me feel better by being less reliant on proprietary
     NVidia drivers.

  The second time I rebuilt the system, it was much easier
  getting the Optimus card working as the primary video driver.

  Now,

    $ lspci -k | grep -A 2 -E "(VGA|3D)"
    00:02.0 VGA compatible controller: Intel Corporation HD Graphics 530 (rev 06)
    Subsystem: Acer Incorporated [ALI] HD Graphics 530
    Kernel driver in use: i915
    --
    01:00.0 3D controller: NVIDIA Corporation GM108M [GeForce 940M] (rev a2)
    Subsystem: Acer Incorporated [ALI] GM108M [GeForce 940M]
    Kernel driver in use: nvidia

  but back on 2016-07-08, before installing NVidia drivers I got

    $ lspci -k | grep -A 2 -E "(VGA|3D)"
    00:02.0 VGA compatible controller: Intel Corporation Skylake Integrated Graphics (rev 06)
    Subsystem: Acer Incorporated [ALI] Device 0979
    Kernel driver in use: i915
    --
    01:00.0 3D controller: NVIDIA Corporation GM108M [GeForce 940M] (rev a2)
    Subsystem: Acer Incorporated [ALI] Device 097a
    Kernel modules: nouveau

  and after installing them, I had

    $ lspci -k | egrep -A 2 "(VGA|3D)"
    00:02.0 VGA compatible controller: Intel Corporation Skylake Integrated Graphics (rev 06)
    Subsystem: Acer Incorporated [ALI] Device 0979
    Kernel driver in use: i915
    --
    01:00.0 3D controller: NVIDIA Corporation
       GM108M [GeForce 940M] (rev a2) Subsystem: Acer Incorporated [ALI] Device 097a
    Kernel driver in use: nvidia

  If I am understanding these, I already have the Intel drivers
  installed and don't need the Nouveau driver at all.

  BIG MISUNDERSTANDING on my part:
  Nouveau is not "the generic linux graphics driver" for Linux,
  it is the open source driver for NVidia cards on Linux (and
  now also NetBSD 7).

  At this point, I beleive that my Optimus NVidia card is
  "floating", that is not directly connected to my laptop
  screen.  It is rendering all the X-Org video processing,
  using the prorietary nvidia driver, and using DRM (Direct
  Rendering Management) to relay "kernel memory buffers" to
  the Intel i915 driver to display to my laptop screen.

  See: https://en.wikipedia.org/wiki/Direct_Rendering_Manager
  See: https://devtalk.nvidia.com/default/topic/957814/linux/prime-and-prime-synchronization/

  So, I do want to go to Wayland, I still want to use the
  NVidia card primarily for OpenCL/CUDA unrelated to graphics
  functionality, but would not mind utilizing it to offload 3D
  rendering tasks.

  Is Bumblebee an option?  The Archwiki page says it will never
  support Vulkan.

  What is Valkan?

    https://wiki.archlinux.org/index.php/Vulkan
    https://www.khronos.org/vulkan/

  From the Khronos webpage

    Vulkan is a new generation graphics and compute API
    that provides high-efficiency, cross-platform access
    to modern GPUs used in a wide variety of devices
    from PCs and consoles to mobile phones and embedded
    platforms

  Who is the Khronos group?

    Khronos royalty-free open standards for 3D graphics,
    Virtual and Augmented Reality, Parallel Computing,
    Neural Networks, and Vision Processing.

  I think I know the direction I want to take.

2019-03-30: (Step 1: Rip out stuff)
  To minimize dependency issues, lets rip out some of the more
  proprietary tools I have never gotten around to using.

    $ sudo pacman -Rsu cuda
    checking dependencies...
    warning: removing cuda from target list
    warning: removing opencl-nvidia from target list
     there is nothing to do

    $ sudo pacman -Rc cuda
    checking dependencies...

    Packages (8) cudnn-7.5.0.56-1  python-pycuda-2018.1.1-5
                 python-pytorch-cuda-1.0.1-5  python-tensorflow-opt-cuda-1.13.1-4
                 python-tensorflow-serving-api-1.13.0-1  tensorboard-1.13.1-1
                 tensorflow-opt-cuda-1.13.1-4  cuda-10.1.105-6

    Total Removed Size:  9476.38 MiB

    :: Do you want to remove these packages? [Y/n]
    :: Processing package changes...
    (1/8) removing tensorboard                         [######################] 100%
    (2/8) removing python-tensorflow-serving-api       [######################] 100%
    (3/8) removing tensorflow-opt-cuda                 [######################] 100%
    (4/8) removing python-tensorflow-opt-cuda          [######################] 100%
    (5/8) removing python-pytorch-cuda                 [######################] 100%
    (6/8) removing python-pycuda                       [######################] 100%
    (7/8) removing cudnn                               [######################] 100%
    (8/8) removing cuda                                [######################] 100%
    :: Running post-transaction hooks...
    (1/1) Arming ConditionNeedsUpdate...

  Lets see if anything "broke":

    $ conda activate pytorch
    (pytorch) $ ./verify.py
    Randon 5 by 3 "tensor":
    tensor([[0.8226, 0.8734, 0.9897],
            [0.5831, 0.7660, 0.4855],
            [0.1376, 0.8236, 0.7894],
            [0.8839, 0.8824, 0.4311],
            [0.6184, 0.7979, 0.5740]])

    CUDA is available.

  Anaconda Cuda stuff still works.

    $ glxinfo -B
    name of display: :1
    display: :1  screen: 0
    direct rendering: Yes
    Memory info (GL_NVX_gpu_memory_info):
        Dedicated video memory: 2048 MB
        Total available memory: 2048 MB
        Currently available dedicated video memory: 1657 MB
    OpenGL vendor string: NVIDIA Corporation
    OpenGL renderer string: GeForce 940M/PCIe/SSE2
    OpenGL core profile version string: 4.6.0 NVIDIA 418.56
    OpenGL core profile shading language version string: 4.60 NVIDIA
    OpenGL core profile context flags: (none)
    OpenGL core profile profile mask: core profile

    OpenGL version string: 4.6.0 NVIDIA 418.56
    OpenGL shading language version string: 4.60 NVIDIA
    OpenGL context flags: (none)
    OpenGL profile mask: (none)

    OpenGL ES profile version string: OpenGL ES 3.2 NVIDIA 418.56
    OpenGL ES profile shading language version string: OpenGL ES GLSL ES 3.20

  So, driver/hardware still same.  Remove the OpenCL
  development tools.

    $ sudo pacman -Rsu ocl-icd opencl-headers opencl-nvidia pyopencl-headers python-pyopencl
    checking dependencies...
    :: libmagick optionally requires ocl-icd: OpenCL support
    :: nvidia-utils optionally requires opencl-nvidia: OpenCL support
    :: opencv optionally requires opencl-icd-loader: For coding with OpenCL

    Packages (11) python-beaker-1.10.1-1  python-cffi-1.12.2-1  python-mako-1.0.8-1
                  python-ply-3.11-2  python-pycparser-2.19-1
                  python-pytools-2019.1-1  ocl-icd-2.2.12-3
                  opencl-headers-2:2.2.20170516-2  opencl-nvidia-418.56-1
                  pyopencl-headers-1:2018.2.5-1  python-pyopencl-1:2018.2.5-1

    Total Removed Size:  82.99 MiB

    :: Do you want to remove these packages? [Y/n]
    :: Processing package changes...
    ( 1/11) removing python-pyopencl                   [######################] 100%
    ( 2/11) removing python-pytools                    [######################] 100%
    ( 3/11) removing python-mako                       [######################] 100%
    ( 4/11) removing python-beaker                     [######################] 100%
    ( 5/11) removing python-cffi                       [######################] 100%
    ( 6/11) removing python-pycparser                  [######################] 100%
    ( 7/11) removing python-ply                        [######################] 100%
    ( 8/11) removing pyopencl-headers                  [######################] 100%
    ( 9/11) removing opencl-nvidia                     [######################] 100%
    (10/11) removing opencl-headers                    [######################] 100%
    (11/11) removing ocl-icd                           [######################] 100%
    :: Running post-transaction hooks...
    (1/1) Arming ConditionNeedsUpdate...

  Anaconda pytorch stuff still working.

2019-03-30: (Step 2: attempt to run Xorg off Intel Chipset)
  Attrmpt to run Xorg off of the i915 Intel driver instead of
  the nvidia driver.

    $ xrandr --listproviders
    Providers: number : 2
    Provider 0: id: 0x22a cap: 0x1, Source Output crtcs: 0 outputs: 0 associated providers: 1 name:NVIDIA-0
    Provider 1: id: 0x45 cap: 0xf, Source Output, Sink Output, Source Offload, Sink Offload crtcs: 3 outputs: 3 associated providers: 1 name:modesetting

  Back on 2018-10-19 I got the DM to work by creating
  the following /etc/xprofile file:

    $ cat /etc/xprofile
    #
    # /etc/xprofile
    #
    # Configuration for an ACER E-14 laptop (E5-491G-70PX)
    # to accommodate an NVIDIA GEFORCE 940m OPTIMUS video
    # card run as the sole GPU.
    #
    xrandr --setprovideroutputsource modesetting NVIDIA-0
    xrandr --auto

  Was going to try "adjusting" /etc/xprofle by replacing
  the first line with

    xrandr --setprovideroffloadsink NVIDIA-0 modesetting

  and was surprised that it "worked"... But under closer
  examination, nothing seemed to have changed.  Found that
  the startup scripts no longer even looks at /etc/xprofile.
  After deleting both /etc/xprofile and ~/.xprofile Gnome
  Desktop started up as usual.

  Something has changed since 2018-10-19, Gnome Shell
  was recently upgraded.  Currently on my system there
  are two separate X-sessions going with different users.
  Yeah, things have changed.

  Well, there are no "user/root" configuration files which
  points to one chipset over the other.  I'm back to my old
  question of what is running what graphics chipwise.

  The output of "glxinfo -B" above seems to indicate that
  it is the NVidia card calling the shots.

    $ echo $XDG_SESSION_TYPE
    x11

  Still running X11.

  Another misunderstanding on my part, RandR is an Xorg
  extension, so xrandr commands in /etc/xprofile were
  talking to the X-Server.

  According to these websites.

    https://www.makeuseof.com/tag/using-linux-with-wayland/
    https://wiki.archlinux.org/index.php/wayland

  Gnome Desktop will work with NVidia cards.  NVidia cards
  use EGLStreams instead of GBM.  Gnome implements EGLStreams.

2019-03-30: (Step 3: be bold and just switch to Wayland)

  Lets see what we currently got installed Wayland-wise:

    $ pacman -Qs wayland
    local/egl-wayland 1.1.2-1
        EGLStream-based Wayland external platform
    local/libva 2.4.0-1
        Video Acceleration (VA) API for Linux
    local/wayland 1.17.0-1
        A computer display server protocol
    local/wayland-protocols 1.17-1
        Specifications of extended Wayland protocols
    local/xorg-server-xwayland 1.20.4-1 (xorg)
        run X clients under wayland

  Hummm... wayland already installed.  Lets reinstall and
  throw weston in too.

    $ sudo pacman -Syu wayland weston
    :: Synchronizing package databases...
     core is up to date
     extra is up to date
     community is up to date
    warning: wayland-1.17.0-1 is up to date -- reinstalling
    :: Starting full system upgrade...
    resolving dependencies...
    looking for conflicting packages...

    Packages (2) wayland-1.17.0-1  weston-6.0.0-1

    Total Download Size:   1.19 MiB
    Total Installed Size:  5.50 MiB
    Net Upgrade Size:      4.78 MiB

    :: Proceed with installation? [Y/n]
    :: Retrieving packages...
     weston-6.0.0-1-x86_64   1215.8 KiB  1289K/s 00:01 [######################] 100%
    (2/2) checking keys in keyring                     [######################] 100%
    (2/2) checking package integrity                   [######################] 100%
    (2/2) loading package files                        [######################] 100%
    (2/2) checking for file conflicts                  [######################] 100%
    (2/2) checking available disk space                [######################] 100%
    :: Processing package changes...
    (1/2) reinstalling wayland                         [######################] 100%
    (2/2) installing weston                            [######################] 100%
    :: Running post-transaction hooks...
    (1/1) Arming ConditionNeedsUpdate...

  Lets throw some more stuff in

    $ sudo pacman -Syu qt5-wayland wayland-docs imv
    :: Synchronizing package databases...
     core is up to date
     extra is up to date
     community is up to date
    :: Starting full system upgrade...
    resolving dependencies...
    looking for conflicting packages...

    Packages (7) freeimage-3.18.0-2  jxrlib-0.2.1-3  qt5-declarative-5.12.2-1
                 sdl2_ttf-2.0.15-1  imv-3.0.0-3  qt5-wayland-5.12.2-1
                 wayland-docs-1.17.0-1

    Total Download Size:    5.38 MiB
    Total Installed Size:  27.46 MiB

    :: Proceed with installation? [Y/n]
    :: Retrieving packages...
     qt5-declarative-5.1...     3.9 MiB   714K/s 00:06 [######################] 100%
     qt5-wayland-5.12.2-...   812.2 KiB   799K/s 00:01 [######################] 100%
     wayland-docs-1.17.0...   181.4 KiB   779K/s 00:00 [######################] 100%
     sdl2_ttf-2.0.15-1-x...    17.6 KiB   880K/s 00:00 [######################] 100%
     jxrlib-0.2.1-3-x86_64    203.3 KiB   671K/s 00:00 [######################] 100%
     freeimage-3.18.0-2-...   301.0 KiB   971K/s 00:00 [######################] 100%
     imv-3.0.0-3-x86_64        27.8 KiB  1388K/s 00:00 [######################] 100%
    (7/7) checking keys in keyring                     [######################] 100%
    (7/7) checking package integrity                   [######################] 100%
    (7/7) loading package files                        [######################] 100%
    (7/7) checking for file conflicts                  [######################] 100%
    (7/7) checking available disk space                [######################] 100%
    :: Processing package changes...
    (1/7) installing qt5-declarative                   [######################] 100%
    (2/7) installing qt5-wayland                       [######################] 100%
    (3/7) installing wayland-docs                      [######################] 100%
    (4/7) installing jxrlib                            [######################] 100%
    Optional dependencies for jxrlib
        java-runtime: Java bindings [installed]
    (5/7) installing freeimage                         [######################] 100%
    (6/7) installing sdl2_ttf                          [######################] 100%
    (7/7) installing imv                               [######################] 100%
    :: Running post-transaction hooks...
    (1/2) Arming ConditionNeedsUpdate...
    (2/2) Updating the desktop file MIME type cache.

  Reboot.

    $ loginctl
    SESSION  UID USER  SEAT  TTY
          2 1000 geoff seat0 tty2
         c1  120 gdm   seat0 tty1

    2 sessions listed.

    $ loginctl show-session 2 -p Type
    Type=x11

    $ echo $XDG_SESSION_TYPE
    x11

  Still running X11.  Lets start poking things with a stick:

    $ sudo pacman -Rsu xorg
    checking dependencies...
    warning: removing xorg-xrdb from target list
    warning: removing xorg-server from target list
    warning: removing xorg-xhost from target list
    warning: removing xorg-mkfontscale from target list
    warning: removing xorg-server-xwayland from target list
    warning: removing xorg-xmodmap from target list
    warning: removing xorg-fonts-encodings from target list
    warning: removing xorg-xset from target list
    warning: removing xorg-bdftopcf from target list
    warning: removing xorg-font-util from target list
    warning: removing xorg-xauth from target list
    warning: removing libfontenc from target list
    warning: removing libxfont2 from target list
    warning: removing xorg-server-common from target list
    warning: removing xf86-input-libinput from target list
    warning: removing xorg-xkbcomp from target list
    warning: removing xorg-setxkbmap from target list
    :: xdg-utils optionally requires xorg-xprop: for Xfce support in xdg-open

    Packages (4) xorg-xlsatoms-1.1.3-1  xorg-xlsclients-1.1.4-1  xorg-xprop-1.2.4-1
                 xorg-xrandr-1.5.0-2

    Total Removed Size:  0.25 MiB

    :: Do you want to remove these packages? [Y/n]
    :: Processing package changes...
    (1/4) removing xorg-xrandr                   [######################] 100%
    (2/4) removing xorg-xprop                    [######################] 100%
    (3/4) removing xorg-xlsclients               [######################] 100%
    (4/4) removing xorg-xlsatoms                 [######################] 100%
    :: Running post-transaction hooks...
    (1/1) Arming ConditionNeedsUpdate...

  Lost xrandr, reboot, no wayland.

  Added to /etc/environment

    MUTTER_ALLOW_HYBRID_GPUS=1

  Reboot, no wayland.

  From Archwiki article on Kernel mode setting,

    https://wiki.archlinux.org/index.php/kernel_mode_setting#Early_KMS_start

  Added to empty parens

    MODULES=(i915)

  Reboot, still x11.  Backing out above two changes.

2019-03-31:
  Reinstalled xorg-xrandr pacman package.  It provides a
  cmdline interface libXrandr library.  Previously, at
  least 5 months ago, the X server did not automatically
  enable displays attached to the non-NVIDIA graphics
  device in this type of configuration.

    $ xrandr --setprovideroutputsource modesetting NVIDIA-0
    $ xrandr --auto

  These commands did this.  What is confusing to me is that
  the term "modesetting" is the name of the Intel interface.
  I think it is short for "mode setting driver".

2019-03-31:
  Looked into blacklisting both nouveau and nvidia drivers
  but nouveau seem to not want to die.  Also messing
  around with mkinitcpio makes me nervous without having
  a "throw away system" I can practice on.

  Lets try uninstalling both nvidia and nouveau packages

    $ sudo pacman -Rsu nvidia xf86-video-nouveau
    $ sudo pacman -Rsu libvdpau nccl nvidia-utils pycuda-headers

  Still finds the nouveau driver!

    $ pacman -Qlq mesa|grep nouveau
    /usr/lib/dri/nouveau_dri.so
    /usr/lib/dri/nouveau_vieux_dri.so

    $ pacman -Ss mesa|grep -B1 open-sourc
    extra/mesa 19.0.1-2 [installed]
        An open-source implementation of the OpenGL specification

  Windowing system without OpenGL functionality, doesn't sound
  too useful.

  At this point, I think I would have to uninstall the NVIDIA
  card from the laptop for the Intel Chipset to be used, or
  some deep hackery that might make the system unusable.  Or
  ask the Arch mailing list and have to explain way I am doing
  this.

  The real problem in that the NVIDIA card does not use the
  kernel's DMR (Digital Management Resources) but something
  called nvidia-dmr which only interacts with Xorg.  I am
  beginning to understand way Linus Torvalds is so pissed off.

  Lets put things back together again.

    $ sudo pacman -Syu nvidia xf86-video-nouveau libvdpau nccl nvidia-utils pycuda-headers
    :: Synchronizing package databases...
     core is up to date
     extra is up to date
     community is up to date
    :: Starting full system upgrade...
    resolving dependencies...
    looking for conflicting packages...

    Packages (8) egl-wayland-1.1.2-1  eglexternalplatform-1.0+3+g7c8f8e2-1  libvdpau-1.2-1  nccl-2.4.2-4  nvidia-418.56-3  nvidia-utils-418.56-1  pycuda-headers-2018.1.1-5  xf86-video-nouveau-1.0.16-1

    Total Installed Size:  357.83 MiB
    Net Upgrade Size:      357.53 MiB

    checking keyring...
    checking package integrity...
    loading package files...
    checking for file conflicts...
    checking available disk space...
    :: Processing package changes...
    installing eglexternalplatform...
    installing egl-wayland...
    installing nvidia-utils...
    If you run into trouble with CUDA not being available, run nvidia-modprobe first.
    Optional dependencies for nvidia-utils
        nvidia-settings: configuration tool
        xorg-server-devel: nvidia-xconfig
        opencl-nvidia: OpenCL support
    installing nvidia...
    installing xf86-video-nouveau...
    reinstalling libvdpau...
    installing nccl...
    installing pycuda-headers...
    :: Running post-transaction hooks...
    (1/4) Updating linux module dependencies...
    (2/4) Reloading system manager configuration...
    (3/4) Creating system user accounts...
    (4/4) Arming ConditionNeedsUpdate...

  Reboot.  Launch Gnome 3 via startx.

    $ lspci -k | grep -A 2 -E "(VGA|3D)"
    00:02.0 VGA compatible controller: Intel Corporation HD Graphics 530 (rev 06)
        Subsystem: Acer Incorporated [ALI] HD Graphics 530
        Kernel driver in use: i915
    --
    01:00.0 3D controller: NVIDIA Corporation GM108M [GeForce 940M] (rev a2)
        Subsystem: Acer Incorporated [ALI] GM108M [GeForce 940M]
        Kernel driver in use: nvidia

    $ loginctl
    SESSION  UID USER  SEAT  TTY
          1 1000 geoff seat0 tty1

  With startx, loginctl sees me as just logged into the
  virtual terminal.  Good to know.

    $ sudo systemctl enable gdm

  Reboot.

    $ loginctl show-session 2 -p Type
    Type=x11

    $ lsmod | grep -E '(drm|nvidia|i915|Used by)'
    Module                  Size  Used by
    nvidia_drm             53248  8
    nvidia_modeset       1089536  5 nvidia_drm
    i915                 2162688  4
    nvidia              17637376  420 nvidia_modeset
    i2c_algo_bit           16384  1 i915
    drm_kms_helper        208896  2 nvidia_drm,i915
    drm                   499712  12 drm_kms_helper,nvidia_drm,i915
    intel_gtt              24576  1 i915
    ipmi_msghandler        65536  2 ipmi_devintf,nvidia
    agpgart                53248  2 intel_gtt,drm
    syscopyarea            16384  1 drm_kms_helper
    sysfillrect            16384  1 drm_kms_helper
    sysimgblt              16384  1 drm_kms_helper
    fb_sys_fops            16384  1 drm_kms_helper

2019-04-13:
  Decided to better configure gauss17 for OpenPGP functionality.

  Initially following the following guide:

    https://github.com/lfit/itpol/blob/master/protecting-code-integrity.md

  - PGP (Pretty Good Privacy) - original commercial software
  - OpenPGP - IETF standard compatible with original PGP tool
  - GnuPG (Gnu Privacy Guard) - free software implementing OpenPGP
  - gpg - command-line tool for GnuPG

  I will use PGP (mot GnuPG, GPG, or OpenPGP) as an adjective:

    - PGP key
    - PGP signature
    - PGP keyserver

  Extremely simplified overview,

    - public key known by everyone
    - private key known only by owner

  What I have,

    $ gpg --version | head -1
    gpg (GnuPG) 2.2.15

  Types of keys,

    [S] key used for signing
    [E] key used for encryption
    [A] key used for authentication
    [C] key used for certifying other keys

  There is no technical difference between a "master key"
  and associated "sub keys".  At creation time keys are
  assigned functional limitations by giving them specific
  capabilities.

  The key carrying the [C] capability is considered the
  "master" key.  It is the only key used to

    - add or revoke other keys ("subkeys") with [S|E|A]
      capabilities
    - add, change or revoke identities (uids) associated
      with a key
    - add or change the expiration date on itself or
      any subkey
    - sign other people's keys for the web of trust purposes

  Two flavors of use in the wild,

    - Web of Trust (WOT) - the ideal
    - Trust on First Use (TOFU) - what usually gets done

  In the Free Software World, the [C] key is considered your
  digital identity.

  1. Decide upon a pass phrase, for now to exist only in my mind.

  At this point the guide seems excessively paranoid for my
  needs.  Pacman doesn't know about a package called paperkey.
  Also, guide recommends using Yubikey based 2-factor
  authentication.

  I feel I am fighting an existing PGP infarstructure,
  consider the Joe Blow user I created

    [jb@gauss17 ~]$ gpg --list-keys
    gpg: directory '/home/joeblow/.gnupg' created
    gpg: keybox '/home/joeblow/.gnupg/pubring.kbx' created
    gpg: /home/joeblow/.gnupg/trustdb.gpg: trustdb created

    [jb@gauss17 ~]$ gpg --list-keys
    [jb@gauss17 ~]$

2019-04-14:
  Continue grokking PGP infrastructure.

  Until I understand the gpg command better, I am hesitant about
  putting its output in this public log.  I may need to "snip".

    $ gpg --list-keys
    /home/geoff/.gnupg/pubring.kbx
    ------------------------------
    pub   rsa2048 2016-08-07 [SCEA]
          <snip>
    uid           [ultimate] Geoffrey Scheller <geoffrey@scheller.com>
    sub   rsa2048 2016-08-07 [SEA]

    pub   rsa4096 2014-12-15 [C] [expires: 2020-08-24]
          EF6E286DDA85EA2A4BA7DE684E2C6E8793298290
    uid           [ unknown] Tor Browser Developers (signing key) <torbrowser@torproject.org>

    pub   rsa4096 2015-12-13 [SC] [expired: 2017-12-12]
          2B081ECE15BDF2CA70E1A492927912051716CE39
    uid           [ expired] Magnus Therning <magnus@therning.org>

  I seem to have a key and a subkey from when I first
  installed and configured Claws e-mail client.  Since
  going to Gnome, I have been using Evolution as my e-mail
  client.  Probably this key the one I still currently use
  in TOFU mode.

2019-04-16:
  Install pacman-contrib package,

     $ sudo pacman -Syu pacman-contrib

  mostly for the pactree command.

  Orphaned packages:

     $ pacman -Qdtq
     absl-py
     gamin
     gcc7
     gtk2-perl
     haskell-gitrev
     haskell-src-meta
     idnkit
     libnm-gtk
     python-astor
     python-gast
     python-grpcio
     python-keras-applications
     python-keras-preprocessing
     python-markdown
     python-protobuf
     python-sphinx_rtd_theme
     python-sphinxcontrib-websupport
     python-sqlalchemy
     python-tensorflow-estimator
     python-termcolor
     python-werkzeug
     python-wheel
     python-whoosh
     python2-dbus
     python2-gobject
     python2-setproctitle

  Removed the orphans,

     $ sudo pacman -Rs $(pacman -Qdtq)


2019-07-17:
  Removed the claws mail packages, using Evolution now.

     $ sudo pacman -Rsu claws-mail claws-mail-themes clawsker

2019-09-10:
  Upgrade Google Chrome.

    $ cd ~/build/AUR/google-chrome_build/google-chrome
    $ pacman -Qs google-chrome
    local/google-chrome 74.0.3729.131-1
        The popular and trusted web browser by Google (Stable Channel)
    $ git pull
    $ makepkg -sri
    $ pacman -Qs google-chrome
    local/google-chrome 77.0.3865.75-1
        The popular and trusted web browser by Google (Stable Channel)

2019-09-14:
  Build and install MS OneDrive.  Following instructions from here

    https://github.com/abraunegg/onedrive/blob/master/docs/INSTALL.md

  I want an easier way to share files between Linux and Win10.

    $ cd ~/build
    $ mkdir OneDriveBuild; cd OneDriveBuild
    $ git clone https://github.com/abraunegg/onedrive

  Update everything first

    $ sudo pacman -Syu
    $ systemctl reboot

  Needs these dependencies:

    libcurl
    SQLite > 3.7.15
    Digital Mars D Compiler

    $ sudo pacman -Syu dmd

  Pacman also pulled in libphoboas.

  Now build it with notifications.  Systemd services files
  will be installed in the appropriate locations.

    $ cd ~/build/OneDriveBuild/onedrive
    $ ./configure -enable-notifications
    $ make clean
    rm -f onedrive onedrive.o version
    rm -rf autom4te.cache
    rm -f config.log config.status
    $ make
    $ sudo make install
    $ sudo make install
    /usr/bin/install -c -D onedrive /usr/local/bin/onedrive
    /usr/bin/install -c -D onedrive.1 /usr/local/share/man/man1/onedrive.1
    /usr/bin/install -c -D -m 644 contrib/logrotate/onedrive.logrotate \
                                  /usr/local/etc/logrotate.d/onedrive
    mkdir -p /usr/local/share/doc/onedrive
    /usr/bin/install -c -D -m 644 README.md config LICENSE CHANGELOG.md \
                                  docs/Docker.md docs/INSTALL.md \
                                  docs/Office365.md docs/USAGE.md \
                                  /usr/local/share/doc/onedrive
    /usr/bin/install -c -d -m 0755 /usr/lib/systemd/user \
                                   /usr/lib/systemd/system
    /usr/bin/install -c -m 0644 contrib/systemd/onedrive@.service \
                                /usr/lib/systemd/system
    /usr/bin/install -c -m 0644 contrib/systemd/onedrive.service \
                                /usr/lib/systemd/user

  Lets see what systemd knows

    $ systemctl status onedrive
    Unit onedrive.service could not be found.

  Try a reboot.

    $ systemctl reboot

    $ systemctl status onedrive
    Unit onedrive.service could not be found.

  I'll worry about this later.

  Now, following the directions from here

    https://github.com/abraunegg/onedrive/blob/master/docs/USAGE.md

  to configure onedrive and connect it to my Microsoft account.

    $ onedrive
    Authorize this app visiting:

    <snip>

    Enter the response uri: ^C

  Well, when I follow the link in a browser, I sign in and all
  I get is a blank webpage... no "response url".  This happens
  in both Linux and Windows browsers.

  The onedrive CLI command is consistently giving me the same
  URL whenever I run it.

  According to this link,

    https://www.maketecheasier.com/sync-onedrive-linux/

  it is the URL of the blank white page that it wants you
  to paste into the terminal window.

  Well, something worked

    $ onedrive
    Authorize this app visiting:

    <snip>

    Enter the response uri: <snip>

    --synchronize or --monitor missing from your command options or use --help for further assistance

    No OneDrive sync will be performed without either of these two arguments being present

    $ onedrive

    --synchronize or --monitor missing frohttps://login.microsoftonline.com/common/oauth2/nativeclient?code=M851d4046-38bb-e950-2700-e3b902c37ce2m your command options or use --help for further assistance

    No OneDrive sync will be performed without either of these two arguments being present

    $ onedrive --synchronize
    Initializing the Synchronization Engine ...
    Syncing changes from OneDrive ...
    Processing 9 changes
    Creating directory: Documents
    Downloading file Getting started with OneDrive.pdf ... done.
    Downloading file night_sea_rocks_landscape-1920x1080.jpg ... done.
    Creating directory: Pictures
    Downloading file Pictures/night_sea_rocks_landscape-1920x1080.jpg ... done.
    Creating directory: Pictures/Screenshots

  It synced the "public?" folders, but not the "Personal Vault".
  Moved my test file to ~/OneDrive/Documents and created another.

    $ onedrive --synchronize

  and same files available on Linux and Win10.

  For now, I'll ignore the systemd service.  I like the
  manual nature more than the Windows autoupdates.

  [[ See second entry 2020-02-01 ]]

2020-02-01:
  Added another phoney user jd aka "Jane Doe".

    # useradd -d /home/janedoe -c "Jane Doe" -m jd
    # passwd jd
    # passwd jd

  Primarily to test "out of the box" Gnome3.

2020-02-01:
  Got onedrive to synch.

  I think the bloody Chrome and Firefox browsers are logging
  me right into my MS account automatically.  At which point
  you are redirected to a blank webpage.  Paste the URL of
  this blank page into the terminal window at the
  "Enter the response uri:" prompt.

  Well it worked, but not exactly intuitive.  Especially when
  I assumed that I hadn't even logged into my MS account.

2020-02-02:
  When I reinstalled Arch back on 2017-06-26, I had to reverse
  engineer /boot/loader/loader.conf and poke around /dev to
  find the correct PARTUUID to use in loader.conf by mounting
  each partition to see what was in it.

  To get this info directly, I could have used the blkid command.

    $ blkid
    /dev/sdb1: UUID="BC00-6365" BLOCK_SIZE="512" TYPE="vfat"
        PARTUUID="8d391102-8cbb-4b07-a767-516b7e3bbe94"
    /dev/sdb2: UUID="4b1b0623-c1d0-4da9-8164-20ee74253def" BLOCK_SIZE="4096" TYPE="ext4"
        PARTUUID="fd153bda-5bf1-4a49-9728-4fb11b660949"
    /dev/sdb3: UUID="a5945738-343f-4cfb-ad76-8ca012eb2576" TYPE="swap"
        PARTUUID="3beb0f61-e57c-4686-bb35-7ed414194442"
    /dev/sdb4: UUID="833c2579-bc84-463a-96a4-89478bd89e9e" BLOCK_SIZE="4096" TYPE="ext4"
        PARTUUID="8a759be3-bd72-44f3-b29c-894eaaa75c30"
    /dev/sda1: UUID="A024-8139" BLOCK_SIZE="512" TYPE="vfat"
        PARTUUID="8d5e9cb9-1823-46e7-9150-885713ef5fc3"
    /dev/sda2: UUID="0859da7c-f429-470d-818f-d3951b5d89af" BLOCK_SIZE="4096" TYPE="ext4"
        PARTUUID="d6793ae6-1f23-4895-942a-6714e7a06de6"

  tl;dr: Hey, today's date is a palidrone!

2020-02-02:
  On 2017-06-02 I needed to downdrade the ncurses package.
  The problem was that every time a did "sudo pacman -Syu"
  the package was upgraded.  The proper way to have stopped
  this from happening was to edit the /etc/pacman.conf file
  as follows:

    #Pacman won't upgrade packages listed in IgnorePkg and members of IgnoreGroup
    IgnorePkg   = ncurses
    #IgnoreGroup =

  The second entry, IgnoreGroup, is for package groups like
  base-devel or qt5.

    $ pacman -Qgq dlang
    dmd
    libphobos

    $ pacman -Sgq dlang
    dcd
    dfmt
    dmd
    dmd-docs
    dscanner
    dtools
    dub
    ldc
    liblphobos
    libphobos

  tl;dr: There seems to be both a base package and a base group,

    $ pacman -Qg | cut -f1 -d\ | uniq | sort
    base
    base-devel
    default
    dlang
    dlang-dmd
    gnome
    gnome-extra
    ipa-fonts
    pro-audio
    pyqt5
    qt
    qt5
    telepathy
    texlive-lang
    texlive-most
    vulkan-develpcmciautils
    xorg
    xorg-apps
    xorg-drivers
    xorg-fonts

    $ pacman -Qg base
    base gcc-libs
    base pcmciautils

    $ pacman -Sg base
    base gcc-libs

    $ pacman -Qs '^base$'
    local/base 2-2
        Minimal package set to define a basic Arch Linux installation
    local/gcc-libs 9.2.0-4 (base)
        Runtime libraries shipped by GCC
    local/pcmciautils 018-8 (base)
        Utilities for inserting and removing PCMCIA cards

  Why doesn't pcmciautils show up with "pacman -Sg base"???

2020-02-09:
  Going to start backing up selective things I don't want
  to lose to an external harddrive.

  First instal Rsync utility:

    $ sudo pacman -Syu rsync

  Moved everything in ~/devel not cloned from elsewhere
  to ~/devel/local.

  The directories I want to backup are:

    ~/devel/local
    ~/.config  <- selected items
    ~/info
    ~/local   <- removed everything installed there (really dated)
    ~/Music
    ~/Pictures
    ~/Videos   <- selected items

  Made directory on my external HD for my user.

    $ mkdir /run/media/geoff/BUSLINK/geoffBackup/

  Added bash script ~/bin/backup to bin directory.  Basically
  a wrapper for the "rsync -av --delete" command.

  Also, rsync does not like how the Evolution e-mail
  client stores its files.  The evolution-backup utility
  also will safely shut evolution down before before
  creating a backup tarball.

    $ /usr/lib/evolution/evolution-backup --help
    Usage:
      evolution-backup [OPTION…]

    Help Options:
      -h, --help               Show help options
      --help-all               Show all help options
      --help-gtk               Show GTK+ Options

    Application Options:
      --backup                 Back up Evolution directory
      --restore                Restore Evolution directory
      --check                  Check Evolution Back up
      --restart                Restart Evolution
      --gui                    With Graphical User Interface
      --display=DISPLAY        X display to use

2020-02-16:
  Root drive filling up.

    $ df -h
    Filesystem      Size  Used Avail Use% Mounted on
    dev             7.8G     0  7.8G   0% /dev
    run             7.8G  1.6M  7.8G   1% /run
    /dev/sda2       117G  103G  8.2G  93% /
    tmpfs           7.8G  181M  7.6G   3% /dev/shm
    tmpfs           7.8G     0  7.8G   0% /sys/fs/cgroup
    tmpfs           7.8G  172K  7.8G   1% /tmp
    /dev/sda1       511M   48M  464M  10% /boot
    /dev/sdb4       839G  175G  622G  22% /home
    /dev/sdb2        63G  2.9G   57G   5% /extra
    tmpfs           1.6G   20K  1.6G   1% /run/user/120
    tmpfs           1.6G   52K  1.6G   1% /run/user/1000

  Pacman cache is filling up,

    $ sudo du -h /var/cache/pacman/ | tail -1
    81G     /var/cache/pacman/

  Lets clean it out,

    $ sudo pacman -Sc
    Packages to keep:
      All locally installed packages

    Cache directory: /var/cache/pacman/pkg/
    :: Do you want to remove all other packages from cache? [Y/n]
    removing old packages from cache...

    Database directory: /var/lib/pacman/
    :: Do you want to remove unused repositories? [Y/n]
    removing unused sync repositories...

  Check again,

    $ df -h
    Filesystem      Size  Used Avail Use% Mounted on
    dev             7.8G     0  7.8G   0% /dev
    run             7.8G  1.6M  7.8G   1% /run
    /dev/sda2       117G   25G   86G  23% /
    tmpfs           7.8G  181M  7.6G   3% /dev/shm
    tmpfs           7.8G     0  7.8G   0% /sys/fs/cgroup
    tmpfs           7.8G  172K  7.8G   1% /tmp
    /dev/sda1       511M   48M  464M  10% /boot
    /dev/sdb4       839G  175G  622G  22% /home
    /dev/sdb2        63G  2.9G   57G   5% /extra
    tmpfs           1.6G   20K  1.6G   1% /run/user/120
    tmpfs           1.6G   52K  1.6G   1% /run/user/1000

  Lets do some more Pacman clean up.  List orphan packages,

    $ pacman -Qdt
    geoip 1.6.12-1
    gtksourceview3 3.24.11-1
    gtkspell3 3.0.10-2
    haskell-aeson-compat 0.3.9-71
    haskell-bindings-uname 0.1-12
    haskell-pretty-show 1.9.5-8
    haskell-store 0.7.2-4
    haskell-tagstream-conduit 0.5.5.3-326
    js52 52.9.0-3
    leveldb 1.22-1
    libevent 2.1.11-5
    libgovirt 0.3.6-1
    libmp4v2 2.0.0-5
    libnm-glib 1.18.5dev+12+ga8746f48ca-1
    libplacebo 1.29.1-1
    mozilla-common 1.4-5
    python-sip-pyqt5 4.19.19-3
    source-highlight 3.1.9-2

  Remove then,

    $ sudo pacman -Rns $(pacman -Qdtq)

  Update, then reboot.

    $ sudo pacman -Syu

2020-02-16:
  Never used gvim, so remove it.  Note, gvim package currently
  provides vim executable.

    $ sudo pacman -Rns gvim
    $ sudo pacman -Syu vim

2020-02-28:
  Installed Skype for Linux from AUX.

    $ cd ~/build/AUR/
    $ mkdir skype_build
    $ cd skype_build/
    $ git clone https://aur.archlinux.org/skypeforlinux-stable-bin.git
    $ cd skypeforlinux-stable-bin/
    $ makepkg -sri
    $ pacman -Qs skype
    local/skypeforlinux-stable-bin 8.56.0.103-1
        Skype for Linux - Stable/Release Version
    $ digpath '*skype*'
    /usr/bin/skypeforlinux

  Once I lauched and configured it, I pinned it to Gnome
  Activities menu next to Zoom.

  Uses my MS geoffrey@scheller.com account.

2020-02-16:
  Installed pacutils with Pacman.

  Installs the following commands:

    paccapability
    paccheck
    pacconf
    pacfile
    pacinfo
    pacini
    pacinstall
    paclog
    pacremove
    pacrepairdb
    pacrepairfile
    pacreport
    pacsift
    pacsync
    pactrans

2020-03-29:
  Installed pkgstats package via packman,  Sends a report to the
  Arch maintainers weekly on what packages are installed.

2020-04-16:
  Had to take manual intervention for Pacman.
  As per Arch website.

    $ sudo pacman -Syu --overwrite /usr/lib\*/p11-kit-trust.so

2020-05-30:
  After about 4 years with the geoff login, I am having Gnome3
  desktop problems.  Probably accumulated cruft.  Right now all
  my Gnome extensions are grayed out in Tweaks.  For a while I
  have been seeing desktop differences between geoff and the
  jb & jd logins.

  I am moving over to a new login: grs

    $ sudo useradd -d /home/grs -c Geoffrey -G wheel -m grs
    $ id geoff
    uid=1000(geoff) gid=1000(geoff) groups=1000(geoff),10(wheel)
    $ id grs
    uid=1003(grs) gid=1003(grs) groups=1003(grs),10(wheel)

  Got a lot to do to move my identity over to the new login.

2020-05-30:
  Before proceeding with the switch, lets see if I can use the
  Gnome website: https://extensions.gnome.org/ to add my beloved
  clipboard extension.

  First I added the Chrome Extension browser plugin via link
  provided.  Indicates that I need to add the "native host
  connector."  Seems to be an AUR package:

    https://aur.archlinux.org/packages/chrome-gnome-shell-git
    Description: Native connector for integration with extensions.gnome.org

  Back on 2018-09-25 I installed something called "Gnome-shell
  Clipboard Indicator Extension" from AUR.

    $ pacman -Qs gnome-shell
    local/gnome-shell 1:3.36.2+7+ge4199c71c-1 (gnome)
        Next generation desktop shell
    local/gnome-shell-extension-clipboard-indicator-git 20171121-1
        Adds a clipboard indicator to the top panel, and saves clipboard history
    local/gnome-shell-extensions 3.36.2-1 (gnome)
        Extensions for GNOME shell, including classic mode

  Let's uninstall the latter two since now I want to manage Gnome
  Extensions through Gnome/Chrome.

    $ sudo pacman -Rsu gnome-shell-extension-clipboard-indicator-git
    $ sudo pacman -Rsu gnome-shell-extensions

  Do a reboot.

    $ cd build/AUR
    $ git clone https://aur.archlinux.org/chrome-gnome-shell-git.git
    $ cd chrome-gnome-shell-git/
    $ makepkg -sri

  Do a reboot.

  From Chrome browser went to https://extensions.gnome.org/ and
  went to install "Clipboard Indicator."  Asked for:

    Shell version: 3.36
    Extension version: 34

  which resulted in downloading a zip file, which I stored here

    ~/build/GnomeShellExtensions/clipboard-indicator

  So, lets unzip and see what we have

    $ cd ~/build/GnomeShellExtensions/clipboard-indicator
    $ ax clipboard-indicatortudmotu.com.v34.shell-extension.zip

  OK, from the README.rst file, we have

    Installation via git is performed by cloning the repo into
    your local gnome-shell extensions directory
    (usually ~/.local/share/gnome-shell/extensions/)::

    $ git clone https://github.com/Tudmotu/gnome-shell-extension-clipboard-indicator.git <extensions-dir>/clipboard-indicator@tudmotu.com

    After cloning the repo, the extension is practically
    installed yet disabled. In order to enable it, you need
    to use gnome-tweak-tool - find the extension, titled
    'Clipboard Indicator', in the 'Extensions' screen and
    turn it 'On'.  You may need to restart the shell
    (Alt+F2 and insert 'r' in the prompt) for the
    extension to be listed there.

  So, lets put what I just unzipped there.

    $ cd ~/.local/share/gnome-shell
    $ ls
    application_state  gnome-overrides-migrated  ignored_events

    $ mkdir extensions; cd extensions
    $ cp -R ~/build/GnomeShellExtensions/clipboard-indicator/ .
    $ mv clipboard-indicator clipboard-indicator@tudmotu.com
    $ cd clipboard-indicator@tudmotu.com/
    $ rm clipboard-indicatortudmotu.com.v34.shell-extension.zip
    $ ls
    extension.js  locale         prefs.js    schemas utils.js
    LICENSE.rst   metadata.json  README.rst  stylesheet.css

  Logout and back in and see if this mess gets picked up.

  Well, shows up grayed out under Tweaks -> Extensions.

2020-05-31:
  Lets see if this plug-in will work for the grs login.

  Yes, it does!  Next time I install a GNOME Extension, I
  will just use Git to clone it in from GitHub.

  Time to start moving over from geoff to grs.

2020-05-31:
  Copied over ~/.ssh files from geoff to grs.

  Configured global Git files and cloned my GitHub repo

    $ cd; mkdir devel; cd devel
    $ git clone git@github.com:grscheller/scheller-linux-archive
    $ cd scheller-linux-archive/bashEnvConf/
    $ ./installHome

  Logout and back in as grs.

  Now, bootstrap Vim configuration (see ~/.vim/vimrc)

    $ git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
    $ vim
    :PluginInstall

  Copy over AppImages

    $ cd; mkdir opt
    $ sudo cp -R ../geoff/opt/AppImages opt/
    $ sudo chown -R grs:grs opt/AppImages/

2020-06-02:
  Cannot find much info on web about migrating Evolution
  email client from one login to another.  Lets try something
  rather crude:

    # rm -rf /home/grs/.config/evolution/
    # mv /home/geoff/evolution/ /home/grs/.config/
    # chown -R grs:grs /home/grs/evolution/

  More than I expected, picked up Hover e-mail configs, not gmail
  configurations.

  Lets try sending an encrypted e-mail, I expect this to fail
  since this should reach out to the grs "keyring."  Got
  following error message in Evolution GUI:

    Could not create message.
    You may need to select different mail options.

    Detailed error: Output from gpg2:
    gpg: skipped "14CD82A5": No secret key
    gpg: signing failed: No secret key

  Searching on this error message and hitting the gpg man
  pages helped.  Lets try exporting public & private keys and
  re-importing them,

    [geoff]$ gpg --export > pubkeys.asc
    [geoff]$ gpg --export-secret-keys > privkeys.asc

  Note: second one did not work when I used "su - geoff", had
        to use ssh.  Asked for the passphase in a pop-up dialog.

    # cp /home/geoff/*.asc /home/grs/
    # chown grs:grs /home/grs/*.asc

  Now try importing them,

    [grs]$ gpg --import pubkeys.asc
    gpg: key ...
    gpg: key ...
    gpg: key ...
    gpg: key ...
    gpg: key ...
    gpg: Total number processed: 3
    gpg:               imported: 3
    gpg: no ultimately trusted keys found

    [grs]$ gpg --import privkeys.asc
    gpg: key ...
    gpg: key ...
    gpg: Total number processed: 1
    gpg:              unchanged: 1
    gpg:       secret keys read: 1
    gpg:   secret keys imported: 1

  Second command popped a dialog and asked me for the passkey.

  Sent myself email from Hover to Hover.  Was asked for Hover
  password, added it to "keyring."

  Got e-mail, Evolution tells me

    Valid signature, but cannot verify sender
    (Geoffrey Scheller <geoffrey@scheller.com>)

  Since I know I sent it, might as well trust it.

    $ gpg --list-keys
    <snip>
    $ gpg --edit-key <snip>
    <snip>
    Please decide how far you trust this user to correctly verify other users' keys
    (by looking at passports, checking fingerprints from different sources, etc.)

      1 = I don't know or won't say
      2 = I do NOT trust
      3 = I trust marginally
      4 = I trust fully
      5 = I trust ultimately
      m = back to the main menu

    Your decision? 5
    <snip>

2020-06-02:
  Configured Gmail with evolution.  First enabled IMAP
  from Gmail settings in browser (it was not previously
  enabled - though I did use it before with Evolution.

  Added account in Evolution via File -> New -> Mail Account

  Fumbled my way throgh, authenicated via my Android cell phone.

  Note: Last time I did this, Google Mail was "special."  This
  time thing got handled like other IMAP servers.

  Note: Not able to GPG digitally sign nor encrypt Gmail emails.

  Note: When sending Hover emails, I am given SMINE options
        as well as GPG options.  Haven't investigated SMIME.

2020-06-02:
  Let's see if we can find my lost Evolution emails,

    $ sudo find /home -name '*ZZZ\.AAA*'
    /home/geoff/.local/share/evolution/mail/local/.ZZZ.AAA Sent
    /home/geoff/.local/share/evolution/mail/local/.ZZZ.AAA Sent.cmeta
    /home/grs/.local/share/evolution/mail/local/.ZZZ.AAA Sent
    /home/grs/.local/share/evolution/mail/local/.ZZZ.AAA Sent.cmeta

  I found if I recreated my local folders manually within
  Evolution, I can just copy the e-mail files over.  Didn't
  work right to move the entire directory structure over.
  I will probably just copy over select emails.

2020-06-02:
  Removed geoff user from system.

    $ sudo userdel -r geoff

  Previously moved

    /home/geoff/.config -> /home/grs/fromGeoff/config

  Moved other misc items to ~/fromGeoff.

  Still need to configure OneDrive and Zoom.

2020-06-03:
  Zoom worked by just moving its config file.
  Uninstalled and reinstalled MS OneDrive.  Reconnected
  to OneDrive via social media fumbleware methods.

2020-06-04:
  On last "sudo pacman -Syu" I noticed some
  /etc/libvirt/*.conf.pacnew files.

    $ pacman -Qs libvirt
    local/libvirt 6.4.0-1
        API for controlling virtualization engines
          (openvz,kvm,qemu,virtualbox,xen,etc)
    local/libvirt-glib 3.0.0-1
        GLib bindings for libvirt

    $ pactree -r libvirt
    libvirt
    └─libvirt-glib
      └─gnome-boxes

  Since I am not a fan of virtualization, let's get rid
  of it

    $ sudo pacman -Rsc gnome-boxes
    checking dependencies...
    :: gnupg optionally requires pcsclite: scdaemon
    :: weston optionally requires freerdp: support rdp backend

  Removed packages were: freerdp, gtk-vnc, libcacard, libgssglue,
     libslirp, libvirt, libvirt-glib, mtools, pcsclite, phodav,
     qemu, seabios, spice, spice-gtk, usbredir,vde2,
     virglrenderer, yajl, gnome-boxes

  Put back the optional dependencies,

    $ sudo pacman -Syu pcsclite freerdp

  Reinstalled packages: libgssglue, freerdp, pcsclite

  Cleaned up libvirt *.conf.pacsave files,

    # rm -rf /etc/libvirt/

2020-06-04:
  Needed to upgrade Zoom client.  Client refused to join a
  meeting until I upgraded.  Client directed me here:

    https://zoom.us/download

  Hsd 9 choices of Linux flavors, includinf Arch Linux.
  Downloaded a file "zoom_x86_64.pkg.tar" but

    $ file zoom_x86_64.pkg.tar
    zoom_x86_64.pkg.tar: XZ compressed data

  So, added an .xz extension and

    $ sudo pacman -U zoom_x86_64.pkg.tar.xz

  I found the following on Zoom's support site:

    Important Notice: Please update all of your Zoom applications
    to version 5.0 or higher. After May 30, 2020, all Zoom
    applications on older versions will receive a forced upgrade
    when trying to join meetings as GCM Encryption will be fully
    enabled across the Zoom platform.

  GCM stands for Galois/Counter Mode Encryption.

2020-06-05:
  From systemctl and "journalctl -b", Postfix mail delievery
  agent is failing.  Since I don't use local Unix mail anymore,
  might as well just remove it.

    $ pacman -Qs postfix
    local/postfix 3.5.2-1
        Fast, easy to administer, secure mail server

    $ sudo pacman -Rsc postfix

  Reboot.

    $ systemctl --failed
      UNIT LOAD ACTIVE SUB DESCRIPTION
    0 loaded units listed.

  [[ See note from 2020-08-12 ]]

2020-06-06:
  Need to take a decision on the direction of my Arch
  Linux laptop, gauss17.  Right now I feel that I have
  "a thing on a thing on a thing."  That is Gnome Shell,
  on systemd services, on Arch Linux.  Do I try to go
  more minimalist or embrace the social trends of
  Linux distributions?

  At this point, I think I will go with the social
  trends and embrace systemd.  I basically modeled
  gauss17 after my Ubuntu, Redhat, and Fedora
  experiences.  Systemd got shoehorned in under me
  and Gnome shell was initially the best choice due
  to me embracing Wayland but having proprietary
  Nvidia drivers.

  To satisfy my minimalistic Unix tastes, I think I will
  bring up another system probably with one of the BSD's.
  I am leaning towards OpenBSD, but haven't ruled out
  FreeBSD.  Tentative name: euler7.

2020-06-07:
  Installing ksh package.  Arch gives me a choice between
  ksh and mksh.  The former provides ksh93.  Other AUR
  versions seem unmaintained, including an OpenBSD version.

    $ sudo pacman -Syu ksh

    $ chsh -l
    /bin/sh
    /bin/bash
    /usr/bin/git-shell
    /bin/dash
    /bin/ksh
    /usr/bin/ksh

  No intension of making this my login shell on Linux.

2020-06-13:
  The start up scrips for thr grs login now support both
  bash and ksh.  Both share .profile (written in POSIX shell)
  and .kshrc (written in a commen subset of both ksh and bash).
  The .bashrc file is bash specific, it primary purpose is to
  configure bash like ksh.  It is compatible for a wide variety
  of relatively complient POSIX systems where bash is installed.

  Note: I am using my usual 3 line prompt.  For ksh it ends with
        "$ " and "% " for ksh and bash respectfully.  For these
        notes, I will use "$ " and  "% " as the prompts to
        indicate which shell I am in.

  The version of ksh I am using is

    $ ksh --version
    version         sh (AT&T Research) 2020.0.0

  which is very similar in behavior to ksh93.

  I really like ksh and decided to make it my default login
  shell on gauss17.  Pretty easy,

    % chsh -s /bin/ksh
    Changing shell for grs.
    Password:
    Shell changed.

  Factoid: Until I logged out and back into my desktop session,
           the gnome-terminal daemon countined to launch
           new terminals using the old login shell.

2020-07-13:
  Installed terraform infrastructure configuration tool.

    $ sudo pacman -Syu terraform


2020-07-22:
  Noticed some differences regarding what is installed from
  the pacman gnome group and what is available.

    $ diff <(pacman -Sg gnome) <(pacman -Qg gnome)
    9,10d8
    < gnome gnome-backgrounds
    < gnome gnome-books
    33c31
    < gnome gnome-shell-extensions
    ---
    > gnome gnome-software
    54a53
    > gnome simple-scan
    62,64d60
    < gnome gnome-boxes
    < gnome gnome-software
    < gnome simple-scan

  which reduces to

    < gnome gnome-backgrounds
    < gnome gnome-books
    < gnome gnome-shell-extensions
    < gnome gnome-boxes

  Lets see what shell extensions are installed:

    (grs)$ gsettings get org.gnome.shell enabled-extensions
    ['clipboard-indicator@tudmotu.com']

    (jb)$ gsettings get org.gnome.shell enabled-extensions
    @as []

    (jd)$ gsettings get org.gnome.shell enabled-extensions
    ['clipboard-indicator@tudmotu.com']

  From 2020-05-30, I manually installed the clipboard extendion.
  I disabled it in gnome-tweak-tool, and "uninstalled" it via

     rm -fr ~/.local/share/gnome-shell/extensions/clipboard-indicator@tudmotu.com

  Now, restart gnome session.

    $ sudo pacman -Syu gnome-shell-extensions
    $ sudo pacman -Syu gnome-backgrounds
    $ sudo pacman -Syu gnome-books
    $ sudo pacman -Syu gnome-boxes

  The last one involves remote desktop and virtualization.  It pulled
  in the following packages:

    gtk-vnc  libcacard  libslirp liburing  libvirt
    libvirt-glib mtools  phodav  qemu  seabios
    spice  spice-gtk  usbredir  vde2 virglrenderer
    yajl  gnome-boxes

  VNC based?  Don't know when I will have a chance to play with it.

  After a reboot, picked up 12 extenstions, none of which is my
  beloved "Clipboard" extension.  Turned on "Launch new instance" extension.

  My first thought was to  manage Gnome Extensions not managed thru Pacman
  using the Gnome "Web" browser.  It seems that AUR has quite a collection
  under the titles gnome-shell-extension-*.  The URL is

    https://aur.archlinux.org/

  and do a package search for

    gnome-shell-extension

2020-07-22:

  First extension to build is gnome-shell-extension-clipboard-indicator.

    $ mkdir ~/build/AUR/gnome-extensions/
    $ cd ~/build/AUR/gnome-extensions/
    $ git clone https://aur.archlinux.org/gnome-shell-extension-clipboard-indicator-git.git

  As I did back on 2018-09-25, I will install this system wide.

    $ cd gnome-shell-extension-clipboard-indicator
    $ makepkg -sri

  Not installed into ~/.local/share/gnome-shell/extensions, good.  Lets
  check globally,

    $ pacman -Qs gnome-shell-extension-clipboard-indicator
    local/gnome-shell-extension-clipboard-indicator 34-1
       Adds a clipboard indicator to the top panel, and caches clipboard
       history

  Not showing up in Tweaks, logout and back in.

  Now shows up in Tweaks.  Instead of activating it from there,
  will install a dashboard app called gnome-shell-extension-extensions.
  Repeat above for this one.  Repo is

    https://aur.archlinux.org/gnome-shell-extension-extensions-git.git

  After reboot, installed Extensions via Twaeks, used Extensions to
  activate Clipboard Indicator.

  Extensions app has an option to install Gnome Extentions, but this
  just takes you to the Gnome page, does not auto install from AUR.

2020-08-01:
  While investigating if I should "dump PulseAudio" in favor of some
  hypothetical "systemd alternative" I heard about somewhere, I have
  realize that like systemd, Pulseaudio has become the defacto
  standard on desktop linux.

  Actually, both are architected by Lennart Poettering.  Does not
  seem to be the case that systemd contains some streamlined version
  of Pulseaudio and ALSA is really archaic.  PulseAudio is the
  alternative to ALSA.

  I have known for years that pulseaudio-equalizer was depricated, see
  https://lists.freedesktop.org/archives/pulseaudio-discuss/2014-March/020174.html
  and the Archlinux PulseAudio page.

  Replacing pulseaudio-equalizer with pulseaudio-equalizer-ladspa

    $ pactree -r pulseaudio-equalizer
    pulseaudio-equalizer
    $ sudo pacman -R pulseaudio-equalizer
    $ sudo pacman -Syu pulseaudio-equalizer-ladspa
    $ pacman -Qlq pulseaudio-equalizer-ladspa | grep -E '^/usr/bin'
    /usr/bin/
    /usr/bin/pulseaudio-equalizer
    /usr/bin/pulseaudio-equalizer-gtk

  Much nicer user interface.  The pulseaudio-equalizer version is a
  cmdline version for debugging/toubleshooting purposes only.

2020-08-12:
  Fixed local mail issues.

    # pacman -Syu postfix perl-mail-sendmail

  Had noticed /var/spool/mail only had a file for the
  jb login.  I created ones for grs & jd logins.  Also,
  the mailx command was complaining the sendmail
  command was not found.

    $ pacman -Qo /usr/bin/sendmail
    /usr/bin/sendmail is owned by postfix 3.5.6-1

  The sendmail command is not Sendmail, but the Postfix
  to Sendmail compatibility interface.

  I think the perl package just allows one to send e-mail
  in Perl.

  I guess an unconfigures Postfix is a requirement for
  UNIX e-mail to work on Arch Linux.

    $ pacman -Qo /usr/bin/mailx
    /usr/bin/mailx is owned by s-nail 14.9.19-1

    $ pacman -Qs s-nail
    local/s-nail 14.9.19-1
        Environment for sending and receiving mail

    $ pactree s-nail
    s-nail
    ├─openssl
    │ └─perl
    │   │
    .   .
    .   .
    .   .

2020-08-12:
  Email sent to root is failing.

    $ cd /etc/postfix

    $ ls *.pacsave
    aliases.pacsave  main.cf.pacsave

    $ ll aliases aliases.pacsave
    -rw-r--r-- 1 root root 10520 May  8  2018 aliases.pacsave
    -rw-r--r-- 1 root root 10519 Jul 27 03:15 aliases

  Maybe these *.pacsave files were created from when I uninstalled
  postfix?  On 2018-05-08 I was doing *.pacnew merging.

  First checkout aliases

    $ diff aliases aliases.pacsave
    12c12
    < #root:		you
    ---
    > root:		geoff

  I guess I do want root's mail forwarded now to grs, might be
  months until I am actually logged on as root.
  [[ see 2016-08-05 ]]

  Editted /etc/postfix/aliases and ran

    # newaliases

  Test message from jd login to root ended up being sent
  to grs.

  Here are the lines I added to /etc/postfix/main.cf

    > myhostname = gauss17
    > mydomain = localdomain
    > myorigin = $myhostname
    > inet_interfaces = $myhostname, localhost
    > mydestination = $myhostname, localhost.$mydomain, localhost
    > mynetworks_style = subnet
    > mail_spool_directory = /var/spool/mail

  Might want to change mynetworks_style to host if I find myself
  on public networks a lot.  I am looking to be able to send
  UNIX email within my home network.

2020-08-20:
  Added Node.js ecosystem for JavaScpript development.

    $ sudo pacman -Syu nodejs npm npm-check-updates

2020-08-31:
  Installed Ant Java build tool.

    $ pacman -Ss '^ant(-doc|$)'
    extra/ant 1.10.8-1
        Java based build tool
    extra/ant-doc 1.10.8-1
        Apache Ant build tool documentation
    $ sudo pacman -Syu ant ant-doc

  Installed Maven build tool.

    $ pacman -Ss maven
    community/maven 3.6.3-1
        Java project management and project comprehension tool
    $ sudo pacman -Syu maven

  I now have the JVM buulld tools SBT, Gradle, Ant, and Maven
  all installed.

2020-09-01:
  Reinstalled Rust toolchain locally into grs home directory.

    $ curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh

  Magical incantation above from Rust website.  Told install not to
  mangle my my .profile.  At least it figured out my default shell
  was ksh.

    $ rustup update
    info: syncing channel updates for 'stable-x86_64-unknown-linux-gnu'
    info: checking for self-updates

      stable-x86_64-unknown-linux-gnu unchanged - rustc 1.46.0 (04488afe3 2020-08-24)

    info: cleaning up downloads & tmp directories

2020-09-02:
  Install Skype for Linux from AUR

  1. First, update things so installations don't conflate.

    $ sudo pacman -Syu

  2. Get rid of what I did back on 2020-09-02

    $ sudo pacman -R skypeforlinux-stable-bin
    $ cd ~/build/AUR
    $ rm -rf skypeforlinux-stable-bin/

  3, Clone from AUR

    $ git clone https://aur.archlinux.org/skypeforlinux-stable-bin.git

  4. Build and install

    $ cd skypeforlinux-stable-bin/
    $ makepkg -sri

  5. See where it was put, using my digpath script and ksh whence

    $ digpath 'skype*'
    /usr/bin/skypeforlinux
    $ whence skypeforlinux
    /usr/bin/skypeforlinux

2020-09-14:
  Installing prerequisits for Scala Native as per
  the scala-native.readthedocs.io website.

    $ sudo pacman -Syu llvm clang gc re2

2020-09-24:
  Change default version of Java to Java 11.

    $ archlinux-java get
    java-8-openjdk

    $ sudo archlinux-java set java-11-openjdk

    $ archlinux-java get
    java-11-openjdk

    $ javac -version
    javac 11.0.8
    $ java -version
    openjdk version "11.0.8" 2020-07-14
    OpenJDK Runtime Environment (build 11.0.8+10)
    OpenJDK 64-Bit Server VM (build 11.0.8+10, mixed mode)

2020-09-24:
  Install OpenVPN, see https://wiki.archlinux.org/index.php/OpenVPN

    $ pacman -Ss openvpn
    extra/networkmanager-openvpn 1.8.12-1
        NetworkManager VPN plugin for OpenVPN
    extra/openvpn 2.4.9-2
        An easy-to-use, robust and highly configurable VPN (Virtual Private Network)
    community/qopenvpn 2.0.0-3
        Simple OpenVPN GUI written in PyQt for systemd based distributions
    community/sslh 1.21c-1
        SSL/SSH/OpenVPN/XMPP/tinc port multiplexer

    $ sudo pacman -Syu openvpn networkmanager-openvpn

2020-10-06:
  Support for Python 2 ended 1/1/2020.  Lets see if we
  can get rid of it.

  Lets see what still requires python2,

    $ pactree -ru python2|sort
    ibus
    intellij-idea-community-edition
    java11-openjfx
    java8-openjfx
    pygtk
    python2
    python2-cairo
    python2-dbus
    python2-gobject
    python2-gobject2

  Lets see what still requires python2 but not python3,

    $ diff <(pactree -ru python2|sort) <(pactree -ru python|sort)|grep '^<'
    < pygtk
    < python2
    < python2-cairo
    < python2-dbus
    < python2-gobject
    < python2-gobject2

  What is pygtk?

    $ pacman -Ss pygtk
    $ pacman -Qs pygtk
    local/pygtk 2.24.0-8
        Python bindings for the GTK widget set

    $ pactree -ru pygtk
    pygtk

  Doubtful I'll be doing gtk GUI programming in Python any time soon.

  Now, lets get rid of Python2

    $ sudo pacman -Syu
    $ sudo pacman -Rsc python2
    checking dependencies...
    :: gtk2 optionally requires python2: gtk-builder-convert
    :: gvim optionally requires python2: Python 2 language support
    :: jre8-openjdk optionally requires java8-openjfx: for JavaFX GUI components support
    :: libglade optionally requires python2: libglade-convert script
    :: libnewt optionally requires python2: libnewt support with the _snack module
    :: libproxy optionally requires python2: Python 2.x bindings
    :: net-snmp optionally requires python2: for the python modules
    :: nmap optionally requires python2: various scripts
    :: texlive-core optionally requires python2: for dviasm

    Packages (11) ibus-1.5.22+8+gf591381e-1
                  intellij-idea-community-edition-2:2020.2.2-1
                  java11-openjfx-11.0.3.u1-1  java8-openjfx-8.u202-3  pygtk-2.24.0-8
                  python2-cairo-1.18.2-4  python2-dbus-1.2.16-1
                  python2-gobject-3.36.1-2  python2-gobject2-2.28.7-6
                  zoom-5.0.418682.0603-1  python2-2.7.18-2

    Total Removed Size:  1364.04 MiB

    :: Do you want to remove these packages? [Y/n] n

  Should have figured, zoom & intellij-idea-community-edition
  still need Python2.

  Might as well do some Python2 cleanup.

    $ sudo pacman -Rsc pygtk

    $ pactree -r python2
    python2
    ├─java11-openjfx
    │ └─intellij-idea-community-edition
    ├─java8-openjfx
    ├─python2-dbus
    │ └─ibus
    │   └─zoom
    ├─python2-gobject
    │ └─ibus
    └─python2-gobject2
      └─ibus

  Package zoom brings in ibus which needs Python2 stuff.

    $ pactree -rc python2-gobject
    python2-gobject
    └─ibus
      └─zoom

    $ pactree -rc python2-gobject2
    python2-gobject2
    └─ibus
      └─zoom

    $ pactree -rc 'java8-openjfx'
    java8-openjfx

    $ pactree -rc 'java11-openjfx'
    java11-openjfx
    └─intellij-idea-community-edition

  Looks like Intellij uses JavaFX in its GUI.  If I want to
  do JavaFX development, I'll use Java11+.

    $ sudo pacman -Rsc java8-openjfx

  Let's see where we now stand

    $ pactree -r python2
    python2
    ├─java11-openjfx
    │ └─intellij-idea-community-edition
    ├─python2-dbus
    │ └─ibus
    │   └─zoom
    ├─python2-gobject
    │ └─ibus
    └─python2-gobject2
      └─ibus

    [grs@gauss17: ~/devel/local]
    $ pactree -r python2-gobject
    python2-gobject
    └─ibus
      └─zoom

    [grs@gauss17: ~/devel/local]
    $ pactree -r python2-gobject2
    python2-gobject2
    └─ibus
      └─zoom

  Seems that on Java14 openjfx only uses Python3

    $ pactree -u java-openjfx|grep python
    python

    $ pactree -u java11-openjfx|grep python
    python2
    python

  Java11 is LTS and the next LTS is Java17 in Sept 2021.
  So, if I want the ability to use java??-openjfx on a
  stable LTS Java release, I am stuck with Python2 until
  then.  Intellij is compiled with Java11 and uses JavaFX.
  This Python dependency is just a build dependency anyway,
  see https://bbs.archlinux.org/viewtopic.php?id=255230 .

  Zoom has both Python2 and Python3 dependencies for ibus,
  a multilanguage text input tool.  My supposition is that
  zoom is built to use either Python but Pacman cannot
  take an "either or" as a dependency and can't make both
  optional dependencies because ibus need one of them to
  work.

2020-10-07:
  Installing Python virtualenvwrapper
  see https://pypi.org/project/virtualenvwrapper/

    $ pacman -Ss python-virtualenv
    extra/python-virtualenv 20.0.23-1 [installed]
        Virtual Python Environment builder
    community/python-virtualenv-clone 0.5.4-1 [installed]
        A script for cloning a non-relocatable virtualenv.
    community/python-virtualenvwrapper 4.8.4-4
        Extensions to Ian Bicking's virtualenv too

    $ sudo pacman -Syu python-virtualenvwrapper

2020-10-07:
  Well gnome 3.38.1 got installed

    $ gnome-shell --version
    GNOME Shell 3.38.1

  and my beloved clipboard manager stopped working.  After
  trying to reinstall it like I did on 2020-07-22, decided
  to remove the extensions I installed through AUR and look
  for alternatives.

    $ sudo pacman -Rs gnome-shell-extension-clipboard-indicator \
                      gnome-shell-extension-extensions-git

  After internet searching, I found gpaste.

    $ pacman -Ss gpaste
    extra/gpaste 3.38.2-1
        Clipboard management system

    $ pacman -Flq gpaste|grep -- gnome-shell|grep '\.js$'|head -3
    usr/share/gnome-shell/extensions/GPaste@gnome-shell-extensions.gnome.org/aboutItem.js
    usr/share/gnome-shell/extensions/GPaste@gnome-shell-extensions.gnome.org/deleteButton.js
    usr/share/gnome-shell/extensions/GPaste@gnome-shell-extensions.gnome.org/deleteItemPart.js

  Unlike other distributions, there is no
  separate gnome-shell-extensions-gpaste package
  in Arch.

    $ sudo pacman -Syu gpaste

  I like it better than the old clipboard manager!  Looks like
  I could configure it to sync with the PRIMARY X11 clip buffer,
  but I won't, having them separate I consider a valuable feature.
  The only thing that might confuse a windows user is that replacing
  highlighted text by pasting over it is application dependent.

2020-10-27:
  From arch-announce Digest mailing list:

    nvidia is currently partially incompatible with linux 5.9, see
      https://forums.developer.nvidia.com/t/nvidia-driver-not-yet-supported-for-linux-kernel-5-9/157263
      https://bugs.archlinux.org/task/68312
      https://www.archlinux.org/news/nvidia-45528-is-incompatible-with-linux-59/
    While graphics should work fine, CUDA, OpenCL, and likely other
    features are broken.  Users who have already upgraded and need
    those features are advised to switch to the linux-lts kernel for
    the time being until a fix for nvidia is available.

  Lets install the Linux LTS kernel for the time being.

    $ pacman -Ss kernel|grep -A1 '^core/linux'
    core/linux 5.9.1.arch1-1 [installed]
        The Linux kernel and modules
    core/linux-api-headers 5.8-1 [installed]
        Kernel headers sanitized for use in userspace
    core/linux-docs 5.9.1.arch1-1
        Documentation for the Linux kernel
    core/linux-headers 5.9.1.arch1-1
        Headers and scripts for building modules for the Linux kernel
    core/linux-lts 5.4.72-1
        The LTS Linux kernel and modules
    core/linux-lts-docs 5.4.72-1
        Documentation for the LTS Linux kernel
    core/linux-lts-headers 5.4.72-1
        Headers and scripts for building modules for the LTS Linux kernel

  Will install linux-lts.  First do a

    $ sudo pacman -Syu

  Need to reboot first, linux-firmware was installed.

  After reboot,

    $ sudo pacman -Syu linux-lts

    $ uname -sr
    Linux 5.9.1-arch1-1

  Reboot again.

    $ uname -sr
    Linux 5.9.1-arch1-1

  Have to adjust the UEFI,

    $ ls /boot
    EFI                                  intel-ucode.img
    initramfs-linux-fallback.img         loader
    initramfs-linux.img                  vmlinuz-linux
    initramfs-linux-lts-fallback.img     vmlinuz-linux-lts
    initramfs-linux-lts.img

  Unfortunately, I don't know the UEFI password.

2020-10-27:
    Need to look into resetting my UEFI firmware password.

    This info is from the link I got on 2017-06-24 fom the
    computer repare shop.

    This method involves fiddling with the computer hardware and
    components.  Proceed only if you’re confident enough to do
    this task. This may also void your warranty period. The steps
    below are mentioned for both, desktop computers and laptops.

    Step 1: Disconnect the power cord from your laptop.

    Step 2: Turn laptop upside-down and remove the battery.  Open
            the hard drive compartment by sliding the cover out.
            Unscrew and pull out the hard drive from your laptop.

    Step 3: For a laptop, disconnect the tiny power lead that
            connects the clock battery to the motherboard. Keep
            it disconnected for at least an hour.

            Otherwise, you can also locate a BIOS reset jumper
            marked CLRP1.  Move this jumper to Clear position.
            Let it be in this condition for at least an hour.

    Step 4: After about an hour, replace the battery in the socket
            or move the jumper back to the Run position.

    Step 5: Reassemble laptop and boot.

    If done right, your computer or laptop should boot up without
    asking for any UEFI password.

    Think I will try this this weekend, in case things go south.

2020-10-27:
  Continue getting system to boot off of LTS kernel.

  From the note I made on 2016-07-04:

    Only problem I had with the install was configuring the
    boot loader.  The Arch Linux Wikis are excellent, but
    dropped the ball on that point.  Using systemd-boot as
    the boot loader with "secure boot" turned off [via firmware].

  So, I assume I am using systemd-boot as my UEFI boot loader.

  There are two files:

    /boot/loader/loader.conf
    /boot/loadder/entries/arch.conf

  Let's see what they contain:

    $ cat /boot/loader/loader.conf
    default arch
    timeout 5
    editor 0
    #default 03ab3a86a6b046d1bb4b74b0d52e0e5c-*

    $ cat /boot/loader/entries/arch.conf
    title Arch Linux
    linux /vmlinuz-linux
    initrd /intel-ucode.img
    initrd /initramfs-linux.img
    options root=PARTUUID=d6793ae6-1f23-4895-942a-6714e7a06de6 rw

  At this point, I don't think I will have to break into
  the firmware.  But first, there is something I have to do...

2020-10-27:
  The nvidia package is only for the regular kernel.  Need to
  also install nvidia-lts.

    $ pacman -Ss ^nvidia$
    extra/nvidia 455.28-7 [installed]
        NVIDIA drivers for linux

    $ pacman -Ss nvidia-lts
    extra/nvidia-lts 1:455.28-7
        NVIDIA drivers for linux-lts

    $ sudo pacman -S nvidia-lts

2020-10-27:
  Lets adjust systemd-boot config files.

    # cd /boot/loader/entries
    # cp arch.conf arch-lts.conf
    # vim arch-lts.conf

  Change everything with "linux" to "linux-lts"

    # cat arch-lts.conf
    title Arch Linux-LTS
    linux /vmlinuz-linux-lts
    initrd /intel-ucode.img
    initrd /initramfs-linux-lts.img
    options root=PARTUUID=d6793ae6-1f23-4895-942a-6714e7a06de6 rw

  Change default kernel to boot

    # cd ..
    # vim loader.conf
    # cat loader.conf
    default arch-lts
    timeout 5
    editor 0
    #default 03ab3a86a6b046d1bb4b74b0d52e0e5c-*

  OK, lets give it a try. (If I had half a brain, I would make
                           sure I had a bootable USB stick.)

  Reboot. (Lucky this time ... but I am still an idiot.)

    $ uname -sr
    Linux 5.4.72-1-lts

    $ sudo pacman -Syu

  I am amazed that at the time I originally installed Arch
  Linux that I did not realize I pointed the UEFI firmware
  to systemd-boot instead of the Linux Kernel directly.

2020-11-10:
  Thought I try out Neovim.

    $ sudo pacman -S neovim neovim python-pynvim

2020-11-13:
  Changed location of user wide git config files for grs login

    $ mv ~/.gitconfig -> ~/.config/git/config

2020-11-21:
  Installed ctags related utilities

    $ pacman -Ss ctags
    extra/ctags 1:r20200106+ga3c87ab5-1 [installed]
        Generates an index file of language objects found in source files
    community/arduino-ctags 5.8_arduino11-4
        A mix of ctags and anjuta-tags for the perfect C++ ctags
    community/hasktags 0.71.2-103
        Produces ctags "tags" and etags "TAGS" files for Haskell programs

    $ sudo pacman -S hasktags arduino-ctags

2020-11-24:
  Dropbox is all messed up.  I think it half "updated itself."

  I am going to remove it and follow the Arch Linux Dropbox wiki
  guide to install it: https://wiki.archlinux.org/index.php/Dropbox

    $ sudo pacman -Rsc dropbox

  We want systemd (not Gnome) managing Dropbox.  Also, Dropbox
  has a nasty feature of updating itself putting unvetted versions
  of itself into ~/.dropbox-dist.  The systemd version spins
  up the new version and dies, causing systemd to spin up
  another version of the old one...

    $ rm -rf ~/.dropbox-dist/ ~/.dropbox/
    $ rm  ~/.config/autostart/dropbox.desktop
    $ install -dm0 ~/.dropbox-dist
    $ ls -lhd .drop*
    d--------- 2 grs grs 4.0K Nov 24 14:17 .dropbox-dist

  This should prevent it from auto updating itself.

  Now install from AUR:

    $ cd ~/build/AUR
    $ git clone https://aur.archlinux.org/dropbox.git
    $ cd dropbox
    $ wget https://linux.dropbox.com/fedora/rpm-public-key.asc
    $ gpg --import rpm-public-key.asc
    $ gpg -k
      ⋮
    pub   rsa2048 2010-02-11 [SC]
          1C61A2656FB57B7E4DE0F4C1FC918B335044912E
    uid           [ unknown] Dropbox Automatic Signing Key <linux@dropbox.com>
        $ makepkg -sri
    $ makepkg -sri

  Dropbox installed but not yet configured.  I keep a
  dependency called gendesk because it looked interesting.

    $ pacman -Qs gendesk
    local/gendesk 1.0.6-1
        Utility for generating desktop files

  From the gendesk manpage:

    gendesk - generate .desktop files based on command-line
    arguments (or a PKGBUILD file)

  Lets see where things got installed

    $ pacman -Qmq | grep drop
    dropbox

    $ pacman -Qlq dropbox   <- removing non-empty directories shorten output
    /opt/dropbox/ACKNOWLEDGEMENTS
    /opt/dropbox/PyQt5.QtCore.cpython-37m-x86_64-linux-gnu.so
    /opt/dropbox/PyQt5.QtDBus.cpython-37m-x86_64-linux-gnu.so
    /opt/dropbox/PyQt5.QtGui.cpython-37m-x86_64-linux-gnu.so
    /opt/dropbox/PyQt5.QtNetwork.cpython-37m-x86_64-linux-gnu.so
    /opt/dropbox/PyQt5.QtPrintSupport.cpython-37m-x86_64-linux-gnu.so
    /opt/dropbox/PyQt5.QtQml.cpython-37m-x86_64-linux-gnu.so
    /opt/dropbox/PyQt5.QtQuick.cpython-37m-x86_64-linux-gnu.so
    /opt/dropbox/PyQt5.QtWidgets.cpython-37m-x86_64-linux-gnu.so
    /opt/dropbox/README
    /opt/dropbox/VERSION
    /opt/dropbox/_cffi_backend.cpython-37m-x86_64-linux-gnu.so
    /opt/dropbox/_ctypes.cpython-37m-x86_64-linux-gnu.so
    /opt/dropbox/_decimal.cpython-37m-x86_64-linux-gnu.so
    /opt/dropbox/_yappi.cpython-37m-x86_64-linux-gnu.so
    /opt/dropbox/allocator_metrics.cpython-37m-x86_64-linux-gnu.so
    /opt/dropbox/apex._apex.cpython-37m-x86_64-linux-gnu.so
    /opt/dropbox/cpuid_native.cpython-37m-x86_64-linux-gnu.so
    /opt/dropbox/cryptography.hazmat.bindings._constant_time.cpython-37m-x86_64-linux-gnu.so
    /opt/dropbox/cryptography.hazmat.bindings._openssl.cpython-37m-x86_64-linux-gnu.so
    /opt/dropbox/cryptography.hazmat.bindings._padding.cpython-37m-x86_64-linux-gnu.so
    /opt/dropbox/dropbox
    /opt/dropbox/dropboxd
    /opt/dropbox/fastpath.cpython-37m-x86_64-linux-gnu.so
    /opt/dropbox/helpers/
    /opt/dropbox/images/emblems/emblem-dropbox-app.icon
    /opt/dropbox/images/emblems/emblem-dropbox-app.svg
    /opt/dropbox/images/emblems/emblem-dropbox-infinite.icon
    /opt/dropbox/images/emblems/emblem-dropbox-infinite.png
    /opt/dropbox/images/emblems/emblem-dropbox-mixedstate.icon
    /opt/dropbox/images/emblems/emblem-dropbox-mixedstate.png
    /opt/dropbox/images/emblems/emblem-dropbox-selsync.icon
    /opt/dropbox/images/emblems/emblem-dropbox-selsync.png
    /opt/dropbox/images/emblems/emblem-dropbox-syncing.icon
    /opt/dropbox/images/emblems/emblem-dropbox-syncing.png
    /opt/dropbox/images/emblems/emblem-dropbox-unsyncable.icon
    /opt/dropbox/images/emblems/emblem-dropbox-unsyncable.png
    /opt/dropbox/images/emblems/emblem-dropbox-uptodate.icon
    /opt/dropbox/images/emblems/emblem-dropbox-uptodate.png
    /opt/dropbox/images/hicolor/16x16/status/dropboxstatus-blank.png
    /opt/dropbox/images/hicolor/16x16/status/dropboxstatus-busy.png
    /opt/dropbox/images/hicolor/16x16/status/dropboxstatus-busy2.png
    /opt/dropbox/images/hicolor/16x16/status/dropboxstatus-idle.png
    /opt/dropbox/images/hicolor/16x16/status/dropboxstatus-logo.png
    /opt/dropbox/images/hicolor/16x16/status/dropboxstatus-x.png
    /opt/dropbox/libGL.so.1
    /opt/dropbox/libQt5Core.so.5
    /opt/dropbox/libQt5DBus.so.5
    /opt/dropbox/libQt5Gui.so.5
    /opt/dropbox/libQt5Network.so.5
    /opt/dropbox/libQt5OpenGL.so.5
    /opt/dropbox/libQt5PrintSupport.so.5
    /opt/dropbox/libQt5Qml.so.5
    /opt/dropbox/libQt5Quick.so.5
    /opt/dropbox/libQt5Sql.so.5
    /opt/dropbox/libQt5WebKit.so.5
    /opt/dropbox/libQt5WebKitWidgets.so.5
    /opt/dropbox/libQt5Widgets.so.5
    /opt/dropbox/libQt5XcbQpa.so.5
    /opt/dropbox/libX11-xcb.so.1
    /opt/dropbox/libatomic.so.1
    /opt/dropbox/libdrm.so.2
    /opt/dropbox/libdropbox_apex.so
    /opt/dropbox/libdropbox_nucleus.so
    /opt/dropbox/libdropbox_sqlite_ext.so
    /opt/dropbox/libdropbox_tprt.so
    /opt/dropbox/libffi.so.6
    /opt/dropbox/libicudata.so.42
    /opt/dropbox/libicui18n.so.42
    /opt/dropbox/libicuuc.so.42
    /opt/dropbox/libpopt.so.0
    /opt/dropbox/linuxffi_gnu_native.cpython-37m-x86_64-linux-gnu.so
    /opt/dropbox/linuxffi_pthread_native.cpython-37m-x86_64-linux-gnu.so
    /opt/dropbox/linuxffi_resolv_native.cpython-37m-x86_64-linux-gnu.so
    /opt/dropbox/linuxffi_sys_native.cpython-37m-x86_64-linux-gnu.so
    /opt/dropbox/linuxinfinite_native.cpython-37m-x86_64-linux-gnu.so
    /opt/dropbox/nucleus_python.cpython-37m-x86_64-linux-gnu.so
    /opt/dropbox/plugins/
    /opt/dropbox/plugins/platforms/
    /opt/dropbox/plugins/platforms/libqxcb.so
    /opt/dropbox/posixffi_libc_native.cpython-37m-x86_64-linux-gnu.so
    /opt/dropbox/psutil._psutil_linux.cpython-37m-x86_64-linux-gnu.so
    /opt/dropbox/psutil._psutil_posix.cpython-37m-x86_64-linux-gnu.so
    /opt/dropbox/python-packages.zip
    /opt/dropbox/qt.conf
    /opt/dropbox/resources/resources_images.rcc
    /opt/dropbox/resources/resources_qml.rcc
    /opt/dropbox/sip.cpython-37m-x86_64-linux-gnu.so
    /opt/dropbox/tornado.speedups.cpython-37m-x86_64-linux-gnu.so
    /opt/dropbox/tprt.cpython-37m-x86_64-linux-gnu.so
    /opt/dropbox/wmctrl
    /opt/dropbox/wrapt._wrappers.cpython-37m-x86_64-linux-gnu.so
    /usr/bin/dropbox
    /usr/lib/systemd/system/dropbox@.service
    /usr/lib/systemd/user/
    /usr/lib/systemd/user/dropbox.service
    /usr/share/applications/dropbox.desktop
    /usr/share/licenses/dropbox/terms.txt
    /usr/share/pixmaps/dropbox.svg

  Dropbox can be run from boot as a systemd system service
  or from user login as a systemd user service.  Lets
  configure it to start as a systemd user service.o

    $ systemctl --user is-enabled dropbox
    disabled

    $ systemctl --user enable dropbox
    Created symlink /home/grs/.config/systemd/user/default.target.wants/dropbox.service → /usr/lib/systemd/user/dropbox.service.

  The wiki states that if you want Dropbox to use your
  system tray, it needs to know which X display to use.
  But, systemd seems to know my DISPLAY already,

    $ systemctl --user show-environment|grep DISPLAY
    DISPLAY=:1

  Lets see if it works, if not then I will use

        $ systemctl --user edit dropbox

  and edit in the DISPLAY I usually use

        [Service]
        Environment=DISPLAY:1

  Lets try starting it,

    $ systemctl --user start dropbox

  No system tray icon, but Gnome's system tray is
  wonky anyway.  It does bring up my default browser
  to log in.  It does not take my password I reset
  the other day, so I went thru the reset process
  and resrt it to the same thing.

  Nothing in ~/Dropbox yet, but it did rudely crete
  a ~/.config/autostart/dropbox.desktop file with
  these contents:

    $ cat ~/.config/autostart/dropbox.desktop
    [Desktop Entry]
    Version=1.0
    Type=Application
    Name=Dropbox
    Comment=A free service that lets you bring your photos, docs, and videos anywhere and share them easily.
    Exec=dropbox
    Icon=dropbox
    Terminal=false
    StartupNotify=false
    Categories=Network

  Let's try and stop this non-sense (hope this does't
  break things)

    $ rm ~/.config/autostart/dropbox.desktop
    $ touch ~/.config/autostart/dropbox.desktop
    $ chmod 000 ~/.config/autostart/dropbox.deskto

  Did a reboot, dropbox running but not updating.

    systemctl --user restart dropbox

  Web browser launched asking mr for my dropbox
  and password.  Now working!  Able to exchange
  a file between my phone and gauss17.

2020-11-28:
  Get Bluetooth configured and working.

  Check to see if necessary packages are
  installed and install what is missing.

    $ pacman -Ss '^(bluez|bluez-utils|blueman)$'
    extra/bluez 5.55-1 [installed]
        Daemons for the bluetooth protocol stack
    extra/bluez-utils 5.55-1
        Development and debugging utilities for the bluetooth protocol stack
    community/blueman 2.1.3-1
        GTK+ Bluetooth Manager

    $ sudo pacman -S bluez-utils blueman

  I'll get back to this later.  Will use the following references.

    https://www.jeremymorgan.com/tutorials/linux/how-to-bluetooth-arch-linux/
    https://wiki.archlinux.org/index.php/Bluetooth

2020-12-01:
  My backups to an external NTFS hardrive does not retain the
  file permissions.

    $ pacman -Qs ntfs
    local/ntfs-3g 2017.3.23-5
        NTFS filesystem driver and utilities

  On 2017-06-28 I installed NTFS drivers ntfs-3g gvfs-afc
  to get external hard drive to work.

  On 2018-07-06 got my PC's built in SD card reader to work by
  installing the utilities for exFAT file system.

    $ sudo pacman -Syu exfat-utils

  From previous note:
    Package community/exfat-utils uses the extra/fuse2 package.
    Utilities that use fuse2 work in user space, ...
    The filesystems which use fuse2 are: exfat-utils gvfs ntfs-3g

  Something tells me I am mounting my external hard drive exfat???

    $ mount | grep /dev/sdd
    /dev/sdd1 on /run/media/grs/BUSLINK type fuseblk \
    (rw,nosuid,nodev,relatime,user_id=0,group_id=0,  \
    default_permissions,allow_other,blksize=4096,    \
    uhelper=udisks2)

  This is what gets automounted when I plug the drive in.

  From the Arch Wiki NTFS-3G guide:

    https://wiki.archlinux.org/index.php/NTFS-3G

    By default, ntfs-3g requires root rights to mount the
    filesystem if it is a block device, even with the user
    option in /etc/fstab. ... The user option in the fstab
    is still required.

    The ntfs-3g package does not have internal FUSE support.
    Rebuild the package using ABS, or install ntfs-3g-fuse...

  So, lets try uninstalling ntfs-3g and replacing it with
  ntfs-3g-fuseAUR.

    $ sudo pacman -R ntfs-3g
    $ cd build/AUR/
    $ git clone https://aur.archlinux.org/ntfs-3g-fuse.git
    $ cd ntfs-3g-fuse/
    $ makepkg -sri

  Built from source code, last Git update was on
  Thu May 25 14:48:01 2017.

  Still permissions on external HD wide open.

2020-12-06:
  Back to getting Bluetooth working.

    $ lsmod | grep btusb
    btusb                  65536  0
    btrtl                  24576  1 btusb
    btbcm                  16384  1 btusb
    btintel                28672  1 btusb
    bluetooth             679936  5 btrtl,btintel,btbcm,btusb

  So bluetooth kernel driver is in place.

  Enable and start the service,

    $ sudo systemctl enable bluetooth.service
    $ sudo systemctl start bluetooth.service

  Its on, but

    Rt Top Dropdown -> Bluetooth On -> Bluetooth settings

  Shows three "unkinowns" and a "circle of futility"

  Have not put myself in the lp group yet:

    $ id grs
    uid=1003(grs) gid=1003(grs) groups=1003(grs),10(wheel)

    usermod -aG group1,group2,group3 geoff
    $ sudo usermod -aG lp grs

    $ id grs
    uid=1003(grs) gid=1003(grs) groups=1003(grs),7(lp),10(wheel)

  Lets try a reboot.

    Paired my phone with gauss17!  Now try and figure out
    how to use Bluetooth.  Started IHeart radio on phone,
    music came out on my computer headphones.

2020-12-27:
  I need proper file permissions when I back up to my
  USB external HD.

  Tried adding user grs to users group,

    # usermod -aG users grs

  Still permissions wide open and unable to change them either
  as grs or root.

    $ lsblk
    NAME   MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT
    sda      8:0    0 119.2G  0 disk
    ├─sda1   8:1    0   512M  0 part /boot
    └─sda2   8:2    0 118.7G  0 part /
    sdb      8:16   0 931.5G  0 disk
    ├─sdb1   8:17   0   512M  0 part
    ├─sdb2   8:18   0  63.5G  0 part /extra
    ├─sdb3   8:19   0    16G  0 part [SWAP]
    └─sdb4   8:20   0 851.5G  0 part /home
    sdc      8:32   0  74.5G  0 disk
    └─sdc1   8:33   0  74.5G  0 part /run/media/grs/BUSLINK

     $ mount|grep sdc
     /dev/sdc1 on /run/media/grs/BUSLINK type fuseblk \
     (rw,nosuid,nodev,relatime,user_id=0,group_id=0,  \
     default_permissions,allow_other,blksize=4096,uhelper=udisks2)

  So, using FUSE user space file system.

  Time for the nuclear option: I'll format the external usb
  drive as EXT4 and then figure out how best to mount it.

   $ sudo umount /dev/sdc1
   umount: /run/media/grs/BUSLINK: target is busy

  Opps, in it,

    $ sudo umount /dev/sdc1

    $ lsblk
    NAME   MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT
    sda      8:0    0 119.2G  0 disk
    ├─sda1   8:1    0   512M  0 part /boot
    └─sda2   8:2    0 118.7G  0 part /
    sdb      8:16   0 931.5G  0 disk
    ├─sdb1   8:17   0   512M  0 part
    ├─sdb2   8:18   0  63.5G  0 part /extra
    ├─sdb3   8:19   0    16G  0 part [SWAP]
    └─sdb4   8:20   0 851.5G  0 part /home
    sdc      8:32   0  74.5G  0 disk
    └─sdc1   8:33   0  74.5G  0 part

  Do I need a partition table or not?  I'll put
  one in case I want to carve out another partitian
  later.

    $ sudo parted /dev/sdc -- mklabel gpt
    Warning: The existing disk label on /dev/sdc will be destroyed and all data on
    this disk will be lost. Do you want to continue?
    Yes/No? Yes
    Information: You may need to update /etc/fstab.

  Now create EXT4 partitian that spans the entire drive,

    $ sudo parted /dev/sdc -- mkpart primary ext4 0% 100%
    Information: You may need to update /etc/fstab.

  Now format the partitian to EXT4,

    $ sudo mkfs.ext4 /dev/sdc1
    mke2fs 1.45.6 (20-Mar-2020)
    /dev/sdc1 contains a ntfs file system labelled 'BUSLINK'
    Proceed anyway? (y,N) y
    Creating filesystem with 19537408 4k blocks and 4890624 inodes
    Filesystem UUID: 60844d50-85ac-42fd-b848-2591be3c7fd0
    Superblock backups stored on blocks:
        32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208,
        4096000, 7962624, 11239424

    Allocating group tables: done
    Writing inode tables: done
    Creating journal (131072 blocks): done
    Writing superblocks and filesystem accounting information: done

  Now let's verify,

    $ sudo parted /dev/sdc print
    Model: SAMSUNG HM080HI (scsi)
    Disk /dev/sdc: 80.0GB
    Sector size (logical/physical): 512B/512B
    Partition Table: gpt
    Disk Flags:

    Number  Start   End     Size    File system  Name     Flags
     1      1049kB  80.0GB  80.0GB  ext4         primary

  Let's reboot and see if we can get away without editing
  /etc/fstab

  Reboot.

    $ lsblk
    NAME   MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT
    sda      8:0    0 119.2G  0 disk
    ├─sda1   8:1    0   512M  0 part /boot
    └─sda2   8:2    0 118.7G  0 part /
    sdb      8:16   0 931.5G  0 disk
    ├─sdb1   8:17   0   512M  0 part
    ├─sdb2   8:18   0  63.5G  0 part /extra
    ├─sdb3   8:19   0    16G  0 part [SWAP]
    └─sdb4   8:20   0 851.5G  0 part /home
    sdc      8:32   0  74.5G  0 disk
    └─sdc1   8:33   0  74.5G  0 part /run/media/grs/60844d50-85ac-42fd-b848-2591be3cu

    # cd /run/media/grs/60844d50-85ac-42fd-b848-2591be3c7fd0/
    # mkdir grs/
    # chmod 750 grs/
    # chown grs:grs grs/
    # ls -ld grs/
    drwxr-x--- 2 grs grs 4096 Dec 27 17:34 grs/

  Success!  Now update buArch backup script.

2021-01-24:
  PipeWire is coming to Arch Linux.

  PipeWire is a Pulseaudio (Consumer Sound) and Jack (Pro Sound) replacement.
  It is leaking in already:

    $ pacman -Qs pipewire
    local/alsa-card-profiles 1:0.3.20-1
        ALSA card profiles shared by PipeWire
    local/gst-plugin-pipewire 1:0.3.20-1
        Multimedia graph framework - pipewire plugin
    local/libpipewire02 0.2.7-1
        User space API to deal with multimedia pipelines (0.2)
    local/pipewire 1:0.3.20-1
        Server and user space API to deal with multimedia pipelines

  Lets see whats made it to the main repo:

    $ pacman -Ss pipewire
    extra/alsa-card-profiles 1:0.3.20-1 [installed]
        ALSA card profiles shared by PipeWire
    extra/gst-plugin-pipewire 1:0.3.20-1 [installed]
        Multimedia graph framework - pipewire plugin
    extra/libpipewire02 0.2.7-1 [installed]
        User space API to deal with multimedia pipelines (0.2)
    extra/pipewire 1:0.3.20-1 [installed]
        Server and user space API to deal with multimedia pipelines
    extra/pipewire-alsa 1:0.3.20-1
        ALSA Configuration for PipeWire
    extra/pipewire-docs 1:0.3.20-1
        Server and user space API to deal with multimedia pipelines (documentation)
    extra/pipewire-jack 1:0.3.20-1
        Server and user space API to deal with multimedia pipelines (JACK support)
    extra/pipewire-pulse 1:0.3.20-1
        Server and user space API to deal with multimedia pipelines (PulseAudio
        replacement)
    community/wireplumber 0.3.0-1
        Session / policy manager implementation for PipeWire

  Lets install, but not configure yet, the rest of the pieces:

    $ sudo pacman -Syu   # reboot since new kernel came in
    $ sudo pacman -Syu pipewire-alsa pipewire-docs pipewire-jack pipewire-pulse wireplumber
    :: Synchronizing package databases...
     core is up to date
     extra is up to date
     community is up to date
    :: Starting full system upgrade...
    resolving dependencies...
    looking for conflicting packages...
    :: pipewire-pulse and pulseaudio are in conflict. Remove pulseaudio? [y/N] y
    :: pipewire-pulse and pulseaudio-bluetooth are in conflict. Remove pulseaudio-bluetooth? [y/N] y
    error: failed to prepare transaction (could not satisfy dependencies)
    :: removing pulseaudio breaks dependency 'pulseaudio=14.2-2' required by pulseaudio-jack

  OK, looks like I will have to rip out pulseaudio at the same time.

    $ sudo pacman -R pulseaudio-jack
    checking dependencies...
    :: pulseaudio optionally requires pulseaudio-jack: Jack support

    Packages (1) pulseaudio-jack-14.2-2

    Total Removed Size:  0.07 MiB

    :: Do you want to remove these packages? [Y/n] Y
    :: Processing package changes...
    (1/1) removing pulseaudio-jack                     [######################] 100%
    :: Running post-transaction hooks...
    (1/1) Arming ConditionNeedsUpdate...

    $ sudo pacman -Syu pipewire-alsa pipewire-docs pipewire-jack pipewire-pulse wireplumber
    :: Synchronizing package databases...
     core is up to date
     extra is up to date
     community is up to date
    :: Starting full system upgrade...
    resolving dependencies...
    looking for conflicting packages...
    :: pipewire-pulse and pulseaudio are in conflict. Remove pulseaudio? [y/N] y
    :: pipewire-pulse and pulseaudio-bluetooth are in conflict. Remove pulseaudio-bluetooth? [y/N] y

    Packages (7) pulseaudio-14.2-2 [removal]  pulseaudio-bluetooth-14.2-2 [removal]  pipewire-alsa-1:0.3.20-1  pipewire-docs-1:0.3.20-1
                 pipewire-jack-1:0.3.20-1  pipewire-pulse-1:0.3.20-1  wireplumber-0.3.0-1

    Total Download Size:   22.34 MiB
    Total Installed Size:  32.19 MiB
    Net Upgrade Size:      25.79 MiB

    :: Proceed with installation? [Y/n]
    :: Retrieving packages...
     pipewire-alsa-1:0.3.20-1-x86_64                        3.8 KiB  0.00   B/s 00:00 [###############################################] 100%
     pipewire-docs-1:0.3.20-1-x86_64                       21.9 MiB  3.46 MiB/s 00:06 [###############################################] 100%
     pipewire-jack-1:0.3.20-1-x86_64                       93.1 KiB  4.55 MiB/s 00:00 [###############################################] 100%
     pipewire-pulse-1:0.3.20-1-x86_64                       3.9 KiB  0.00   B/s 00:00 [###############################################] 100%
     wireplumber-0.3.0-1-x86_64                           332.3 KiB  4.06 MiB/s 00:00 [###############################################] 100%
    (5/5) checking keys in keyring                                                    [###############################################] 100%
    (5/5) checking package integrity                                                  [###############################################] 100%
    (5/5) loading package files                                                       [###############################################] 100%
    (5/5) checking for file conflicts                                                 [###############################################] 100%
    (7/7) checking available disk space                                               [###############################################] 100%
    :: Processing package changes...
    (1/2) removing pulseaudio-bluetooth                                               [###############################################] 100%
    Removed /etc/systemd/user/sockets.target.wants/pulseaudio.socket.
    (2/2) removing pulseaudio                                                         [###############################################] 100%
    (1/5) installing pipewire-alsa                                                    [###############################################] 100%
    (2/5) installing pipewire-docs                                                    [###############################################] 100%
    (3/5) installing pipewire-jack                                                    [###############################################] 100%
    (4/5) installing pipewire-pulse                                                   [###############################################] 100%
    Created symlink /etc/systemd/user/sockets.target.wants/pipewire-pulse.socket → /usr/lib/systemd/user/pipewire-pulse.socket.
    (5/5) installing wireplumber                                                      [###############################################] 100%
    :: Running post-transaction hooks...
    (1/3) Reloading device manager configuration...
    (2/3) Arming ConditionNeedsUpdate...
    (3/3) Compiling GSettings XML schema files...

  One final step for the grs user:

    $ rm -rf ~/.config/pulse/

  Now reboot.

    $ ls .config/pulse/
    cookie

  Let's make noise

    $ vlc Music/Bonamassa/13\ Redemption.mp3

  Silence... Lets go into gnome-settings.  System sound turned all
  the way down.  Turn it up!

  I have Redemption!  Beautiful sound!  On the reboot had the impression
  that system rebooted faster.

  Lets try Bluetooth headphones.  A little fumbling to get pairing.
  Had to manually go into gnome-settings Sound to switch to headphones.

  The Tribit XFree Tune headphones defaulted to the
  High Fidelity Playback (A2DP Sink) configuration.  Changing it to the
  Headset Audio (HSP/HFP) configuration resulted in just crackly noises
  on the headphones.

  Sound works well with Firefox.  Transitioned nicely bwtween headphones
  and built in audio when I turned headphones off and back on.

2021-01-26:
  Only problems with pipewire so far is that you need to be on
  the Bluetooth headphones before lauching zoom.

2021-01-26:
  Installed teams from AUR.  Archified version of the Debian package
  put out by Micro$oft.

2021-01-28:
  Need to access Kyocera printer for work.  Naturlly installed for
  Windows and Mac.  Maybe Cups is enough?

  Gnome Settings->Printer is seeing someones OficeJet-Pro-6960/

  The Kyocera has a note with its IP and a location to download
  drivers.

    IP: 10.100.35.2
    Drives: https://usa.kyocerdocumentsolutions.com/en/dowmnload-center.html

  Drive link seems to be:

    https://www.kyoceradocumentsolutions.us/en/support/downloads.html

  Found a PDF for "Linux Drivers" but it seems geared to network
  management tools for the printer.

    $ pacman -Ss cups
    extra/bluez-cups 5.55-1
        CUPS printer backend for Bluetooth printers
    extra/cups 1:2.3.3op1-1 [installed]
        The CUPS Printing System - daemon package
    extra/cups-filters 1.28.7-1 [installed]
        OpenPrinting CUPS Filters
    extra/cups-pdf 3.0.1-5
        PDF printer for cups
    extra/cups-pk-helper 0.2.6-4 [installed]
        A helper that makes system-config-printer use PolicyKit
    extra/libcups 1:2.3.3op1-1 [installed]
        The CUPS Printing System - client libraries and headers
    extra/pappl 1.0.1-1
        a simple C-based framework/library for developing CUPS Printer Applications
    extra/python-pycups 2.0.1-3 [installed]
        Python bindings for libcups
    extra/system-config-printer 1.5.15-1 [installed]
        A CUPS printer configuration tool and status applet
    community/apcupsd 3.14.14-6
        Power mangement and controlling most of APC's UPS models
    community/splix 2.0.0-15
        CUPS drivers for SPL (Samsung Printer Language) printers

  Missing extra/cups-pdf?

    $ sudo pacman -Syu cups-pdf
    ...
    -------------------------------------------------
    To use cups-pdf, restart cups and visit the cups
    web interface at http://localhost:631/

    You can now add a "Virtual Printer (PDF Printer)"
    and use the Postscript/Generic postscript color
    printer driver.

    Note that cups-pdf has a configuration
    file in /etc/cups. The default location for
    pdf output is /var/spool/cups-pdf/$username.
    -------------------------------------------------
    ...

  Might also need this

    $ pacman -Ss foomatic
    extra/foomatic-db 3:20200822-1
        Foomatic - The collected knowledge about printers, drivers, and driver
        options in XML files, used by foomatic-db-engine to generate PPD files.
    extra/foomatic-db-engine 4:20200206-1 [installed]
        Foomatic - Foomatic's database engine generates PPD files from the data in
        Foomatic's XML database. It also contains scripts to directly generate print
        queues and handle jobs.
    extra/foomatic-db-gutenprint-ppds 5.3.4-1
        simplified prebuilt ppd files
    extra/foomatic-db-nonfree 3:20200822-1
        Foomatic - database extension consisting of manufacturer-supplied PPD files
        released under non-free licenses
    extra/foomatic-db-nonfree-ppds 3:20200822-1
        Foomatic - non-free PPDs from printer manufacturers
    extra/foomatic-db-ppds 3:20200822-1
        Foomatic - PPDs from printer manufacturers

  These are from the Linux Foundation's OpenPrinting workgroup.

2021-02-03:
  Regarding accessing the Kyocera printer, at this point I am
  thrashing without knowing how to to it correctly.  The printer
  is probably horribly misconfigured anyway.  So I have decided
  to punt until I know printer is configured properly.

2021-02-03:
  Google announced it was going to remove remove certain features
  from Chromium and requiring Google Chrome for them.  I am happy
  with Firefox and using it exclusively.

    $ sudo pacman -R chromium

2021-02-20:
  From arch-announce Digest, Vol 74, Issue 2,

    As linux-lts moved to the 5.10 version, all official kernels
    of Arch Linux now support zstd compressed initramfs images, so
    mkinitcpio is switching to zstd compressed images by default
    with version 30, which is currently on [testing].

    If, for any reason, you are using a kernel version prior to 5.9,
    make sure to change mkinitcpio.conf COMPRESSION to use one of the
    compressors supported, like gzip, otherwise you **will not** be
    able to boot images generated by mkinitcpio.

  Based on what I did on 2020-10-27, I changed default kernel to
  boot from arch-lts back to arch.  Rebooted, and it works.

  Currently I have installed:

    linux 5.10.11.arch1-1
    linux-lts 5.4.94-1

  For the forseeable future, it is unlikely I will do anything
  with the NVIDIA card except use it as a video card.  I will
  uninstall the LTS kernel and not worry about having to maintain
  /etc/mkinitcoio.conf.

2021-02-21:
  Today I was going to remove linux-lts 5.4.94-1, but after a
  "sudo pacman -Syu" I have now

    $ pacman -Qs '^linux($|.lts$)'
    local/linux 5.10.16.arch1-1
        The Linux kernel and modules
    local/linux-lts 5.10.17-1
        The LTS Linux kernel and modules

  Now I notice "moved" not "moves" in the above arch-announce Digests.

  Lets get rid of the CUDA stuff.

    $ sudo pacman -Qs cuda
    local/icu 68.2-1
        International Components for Unicode library
    local/pycuda-headers 2020.1-6
        Python wrapper for Nvidia CUDA

  Looks like a already did this back in 2019-03-30.

    $ sudo pacman -Qii pycuda-headers
    Name            : pycuda-headers
    Version         : 2020.1-6
    Description     : Python wrapper for Nvidia CUDA
    Architecture    : x86_64
    URL             : https://mathema.tician.de/software/pycuda
    Licenses        : MIT  Apache
    Groups          : None
    Provides        : None
    Depends On      : None
    Optional Deps   : None
    Required By     : None
    Optional For    : None
    Conflicts With  : None
    Replaces        : None
    Installed Size  : 79.78 KiB
    Packager        : Konstantin Gizdov <arch@kge.pw>
    Build Date      : Mon 15 Feb 2021 04:57:39 PM MST
    Install Date    : Sun 21 Feb 2021 11:52:07 AM MST
    Install Reason  : Explicitly installed
    Install Script  : No
    Validated By    : Signature
    Backup Files    :
    (none)

  Get rid of this too,

    $ sudo pacman -Rsc pycuda-headers
    checking dependencies...

    Packages (1) pycuda-headers-2020.1-6

    Total Removed Size:  0.08 MiB

    :: Do you want to remove these packages? [Y/n]
    :: Processing package changes...
    (1/1) removing pycuda-headers                      [######################] 100%
    :: Running post-transaction hooks...
    (1/1) Arming ConditionNeedsUpdate...

  Decided to keep the linux-lts package.

  From /etc/mkinitcpio.conf,

    # COMPRESSION
    # Use this to compress the initramfs image. By default, zstd compression
    # is used. Use 'cat' to create an uncompressed image.

  Lets check

    $ file initramfs-linux.img
    initramfs-linux.img: Zstandard compressed data (v0.8+), Dictionary ID: None

    $ file initramfs-linux-lts.img
    initramfs-linux-lts.img: Zstandard compressed data (v0.8+), Dictionary ID: None

    $ file vmlinuz-linux
    vmlinuz-linux: Linux kernel x86 boot executable bzImage, \
    version 5.10.16-arch1-1 (linux@archlinux) #1 SMP PREEMPT \
    Sat, 13 Feb 2021 20:50:18 +0000, RO-rootFS, swap_dev 0x8, Normal VGA

    $ file vmlinuz-linux-lts
    vmlinuz-linux-lts: Linux kernel x86 boot executable bzImage, \
    version 5.10.17-1-lts (linux-lts@archlinux) #1 SMP \
    Wed, 17 Feb 2021 11:11:31 +0000, RO-rootFS, swap_dev 0x8, Normal VGA

2021-02-21:
  Added wxWidgets, a C++ library for GUI development, see https://wxwidgets.org/

    $ sudo pacman -Syu wxgtk3
    :: Synchronizing package databases...
    core is up to date
    extra is up to date
    community is up to date
    :: Starting full system upgrade...
    resolving dependencies...
    looking for conflicting packages...

    Packages (2) wxgtk-common-3.0.5.1-2  wxgtk3-3.0.5.1-2

    Total Download Size:    6.98 MiB
    Total Installed Size:  28.37 MiB

2021-03-01:
  Install Awesome WM.

    $ sudo pacman -S awesome
    resolving dependencies...
    looking for conflicting packages...

    Packages (6) libxdg-basedir-1.2.0-5  lua53-lgi-0.9.2-3
                 xcb-util-cursor-0.1.3-3 xcb-util-xrm-1.3-2
                 xorg-xmessage-1.0.5-2  awesome-4.3-2
                 awesome
      .
      .
      .

  Thought I be running into a lot of issues due to my
  NVIDIA drivers and the need of a compositor.

  Now reboot...

  The gdm picked up the awsome choice, but when I choose
  it, got black-screen-of-death.  Maybe it was working, I'll
  try some default key-bindings.

  Now, Super+Enter did not bring up a terminal, at least
  not one I could see.  But, Super+Shift+q did shut the
  WM session down and let me log back in to Gnome.

2021-03-01:
  Decluttering,

  Some GNOME decluttering,

    $ sudo pacman -Rsc gnome-boxes gnome-books gnome-backgrounds

  Totally commit to Neovim,

    $ sudo pacman -Rsc gvim vim-runtime

      Which required me to set DIFFPROG='nvim -d' in my
      environment for pacdiff command.

2021-03-04:
  More decluttering,

  Lets see system behavior without power management

    $ sudo pacman -Rsc acpid acpi

      Systemd itself does some power management.  I never
      got ACPI correctly configured anyhow.  System seems
      to boot fast now too.  (~5 sec vs ~8 sec)

  Removed URXVT terminal,

    $ sudo pacman -Rsc rxvt-unicode rxvt-unicode-terminfo

  Don't wish to have to maintain a ~/.Xresources file
  just for one program.

  Remove orphaned packages,

    $ pacman -Qdt
    bind 9.16.12-1
    c-ares 1.17.1-1
    celt0.5.1 0.5.1.3-5
    ceph-libs 15.2.8-2
    espeak 1:1.48.04-3
    gendesk 1.0.8-1
    glusterfs 1:9.0-1
    guile2.0 2.0.14-4
    haskell-base-noprelude 4.13.0.0-1
    haskell-base-prelude 1.4-5
    haskell-bitarray 0.0.1.1-20
    haskell-cmark-gfm 0.2.2-50
    haskell-regex-pcre 0.95.0.0-9
    haskell-system-fileio 0.3.16.4-112
    haskell-terminal-size 0.3.2.1-21
    jemalloc 1:5.2.1-3
    js60 60.9.0-2
    js68 68.12.0-1
    libiscsi 1.19.0-2
    lv2 1.18.2-1
    mbedtls 2.25.0-1
    minizip 1:1.2.11-4
    netcf 0.2.8-8
    opera-ffmpeg-codecs 88.0.4324.150-1
    pangox-compat 0.0.2+2+gedb9e09-3
    python-asn1crypto 1.4.0-3
    python-more-itertools 8.6.0-3
    python-pew 1.2.0-5
    python-pytoml 0.1.21-6
    python-sip4 4.19.25-1
    python-typed-ast 1.4.2-1
    python2-dbus 1.2.16-3
    python2-gobject 3.36.1-3
    python2-gobject2 2.28.7-6
    sdl2_ttf 2.0.15-2
    tinycdb 0.78-5
    xorg-font-utils 7.6-6

    $ sudo pacman -R $(pacman -Qdt|cut -d ' ' -f1)

2021-06-05:
  Getting tired of system suspending when laptop lid is closed.
  My computer is not an appliance.  Currrently there is a Gnome
  tweak whichturns off this misfeature, but I want it to hold
  more generally.

  Edit `/etc/systemd/logind.conf` uncomment and change these
  two lines to

    HandleLidSwitch=ignore
    HandleLidSwitchExternalPower=ignore

  Reboot.

  Seems to have accomplished what I wanted.

2021-06-05:
  Still have the problem that my external monitor chops off the last 3
  lines of the linux-console.  As a workaround, at least while using
  fish, I hit <ctrl-L> a lot.  Needs to be fixed, makes using nvim
  more difficult.  Think it is defaulting to the number of lines on
  the laptop's screen.

  As a better work around, I created a fish function that executes
  the following command

    test $TERM = linux; and stty rows 44 columns 169

  This will fix the particular virtual console even for subsequent
  logins.

2021-06-08:
  Have been using the nightly build of Neovim from here

    https://aur.archlinux.org/neovim-nightly-bin.git

  Install via

    $ git clone https://aur.archlinux.org/neovim-nightly-bin.git
    $ cd neovim-nightly-bin/
    $ makepkg -sri

  Update fairly infrequently

    $ git pull
    $ makepkg -sri

  Been doing this for the last month or so.  Will continue to do
  this until 0.5.0 is in the official Arch repos.

2021-06-21:
  Moving toward Scala Metals for Scala Development.  Going 0.5.0+
  via the nvim-metals plugin.

    1. Temporarily deactivate Neomake from init.vim, so I have
       some idea what is doing what.

    2. First updated to latest version of neovim via AUR.
       Nvim Version 0.5.0-dev+1429-gb585f723b.

    3. Installed Coursier via AUR.  Coursier is an dependency
       resolver/fetcher à la Maven/Ivy for Scala.  Note, like
       scalac, sbt will download its own version of coursier
       for its own use,  The one in /usr/bin will be used by
       nvim-metals itself to download Metals.

    4. In init.vim,

         set shortmess-=F
         set shortmess+=c

       The first so that autocommands that deal with filetypes
       don't prohibit messages from being shown.  The second
       to shorten messages, helpful when using completion.

    5. Following example from the the Scalameta GitHub site,
       https://github.com/scalameta/nvim-metals/discussions/39
       to configure keybindings in init.vim.

    6. May want to install neovim/nvim-lspconfig later for
       languages other than Scala. (maybe remove Neomake?)
       Other plugins to consider mfussenegger/nvim-lint, a
       linter and mfussenegger/nvim-dap, a debugger.

2021-08-15:
  Removed packages installed for Awesome WM on 2021-03-01.

    $ sudo pacman -Rsu nitrogen picom awesome scrot dmenu \
                       pcmanfm-gtk3 xfce4-taskmanager xfce4-settings

    checking dependencies...
    :: zoom optionally requires picom: extra compositor needed by some window managers for screen sharing

    Packages (19) gtkmm-1:2.24.5-4  libconfig-1.7.3-1  libev-4.33-1  libfm-1.3.2-1  libfm-extra-1.3.2-1  libfm-gtk3-1.3.2-1  libxdg-basedir-1.2.3-1  lua53-lgi-0.9.2-3  lxmenu-data-0.1.5-3
                  menu-cache-1.1.0-2  xcb-util-cursor-0.1.3-3  xcb-util-xrm-1.3-2  xorg-xmessage-1.0.5-2  awesome-4.3-2  dmenu-5.0-1  nitrogen-1.6.1-3  pcmanfm-gtk3-1.3.2-1  picom-8.2-1
                  scrot-1.6-2

    Total Removed Size:  25.15 MiB

    :: Do you want to remove these packages? [Y/n]
    ...

  All got removed.

2021-11-02:
  Definitively, I am running Xorg and not wayland,

    $ loginctl
    SESSION  UID USER SEAT  TTY
          3 1003 grs  seat0 tty2

    1 sessions listed.

    $ loginctl show-session 3 -p Type
    Type=x11

  other indications are,

    $ echo $WAYLAND_DISPLAY

    $ echo $XDG_SESSION_TYPE
    X11

  and

    $ ps -ef | grep -i wayland | grep -v grep

    [gauss17: ~/devel/scheller-linux-archive/adminLogs]
    $ ps -ef | grep -i xorg | grep -v grep
    root         879     877  0 Oct30 tty2     00:23:01 /usr/lib/Xorg vt2 -displayfd 3 -auth /run/user/1003/gdm/Xauthority -nolisten tcp -background none -noreset -keeptty -novtswitch -verbose 3

  Damn that NVIDIA card!

2021-11-07:

  The way GDM and Gnome are configured may or may not be an
  attribute of the system history.  I have not done a fresh
  Arch install since 2017-06-20.  But reconfig GPG, emails
  clients, ssh, plugins, new login also has risks.

  I'll try uninstalling and reinstalling GNOME 3 and GDM and
  see what that does.

    $ sudo pacman -Rsc gdm gnome-shell gnome-extra

  reboot and login into console

    $ sudo pacman -Syu gnome-shell-extensions gnome-shell gdm
    
  reboot, nothing changed.

  Note that gdm is no longer giving me a choice between x11
  or Wayland login.  Now gives me a choice between Gnome
  and Gnome Classic desktops.  That is a change from a few
  months ago.

  Gpaste now gone from toolbar, but still installed

    $ pacman -Ss gpaste
    extra/gpaste 3.40.2-1 [installed]
        Clipboard management system

  Also, gnome-tweaks not installed

    $ pacman -Ss gnome-tweaks
    extra/gnome-tweaks 40.0-1 (gnome-extra)
        Graphical interface for advanced GNOME 3 settings (Tweak Tool)

    $ sudo pacman -Syu gnome-extra

  Gpaste tray icon now enabled, had to launch the Gnome Extensions
  App and turn on "master" slider on top bar.
