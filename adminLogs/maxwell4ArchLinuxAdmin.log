Purpose: To indicate what was done to create maxwell4 and the
         rational behind it.  Named after Maxwell's Equations.

2021-11-07:
  Created bootable USB memory stick on gauss17.

    $ sudo dd bs=4M if=archlinux-2021.11.01-x86_64.iso of=/dev/sdd
    
  Used

    $ df -h
    $ lsblk

  to reverse engineer thumb drive name.

2021-11-08:
  Installed Arch Linux on a Dell Inspiron 15 7591 2-in-1.
    - 4 core i7-10510U CPU 1.8 GHz
    - 16 GB memory
    - Realtek Audio
    - UEFI system
    - Intel(R) UHD Graphics
    - NVIDIA GeForce MX250 Graphics

  The Nvidia chipset is several years old.  It designed as
  standalone but can function in a Optimus mode.  It does
  not support Wayland, so I am stuck with XOrg.

  System is for work.  Currently has Window 10 installed.
  Was able to get into the UEFI firmware via pressing F12
  at boot (without the fn key).

  Turned off secureboot.  Also turned off some features
  which helped improve vurtual machine usage.  Could
  not figure out how to change the boot order to boot
  from USB memory stick by default, but with bootable
  USB memory stick in place, could boot to it via the
  UEFI firmware.

  Now launch guided install,

    # python -m archinstall

  No go unless I connect to a network.  Will go home and
  use Ethernet cable.

2021-10-09:
  What!?!? This computer has no Ethernet Jack.  Have to
  get network working from cmdline.

    # iwctl device list

  Wifi <device> = wlan0

    # iwctl station <device> scan
    # iwctl station <device> get-networks

  Got list of SSID's

    # iwctl station <device> connect <SSID>

  Prompted me for my passcode, and I had network access.

    # python -m archinstall

  Went with the defaults, but installation failed when it
  tried to write partition table to /dev/sda.  There were
  other disk-like "devices" I was not sure about.  Is Win-10
  doing something funky?  Sorry for being sketchy here, I am
  going from memory.

2021-11-09:
  Attached to work wifi network.  Able to ping 1.1.1.1.

  At the console, Alt+Rt-Arrow & Alt+Lt-Arrow jump you between
  various virtual consoles.

  Lets try another guided install:

    # python -m archinstall

  About the 4th question, installation is asking me about the
  disk to install to,

    0: /dev/loop0 (('673.7M', '/eun/archiso/bootmnt/arch/x86_64/airootfs', None))
    1: /dev/md126 (('0B, None, None))
    2: /dev/md127 (('0B, None, None))
    3: /dev/nvme0n1 (('476.9G', '/dev/nvne0n1', None))
    4: /dev/nvme1n1 (('27.3G', '/dev/nvne1n1', None))
    5: /dev/sda (('29.3G', /dev/sda', 'ARCH202111'))

  Well, last night I went for /dev/sda because it "looked familiar"
  and I was hoping things would "just work".  I think this
  "quick and dirty" install of Arch using the Arch guided install
  has become a learning experience!

  Clearly most of the memory is on /dev/nvme0n1, whatever it is.

  I think I should abort the install until I educate myself a
  little bit more.

  The 'ARCH202111' above may be an artifact from last night's
  install attempt above.  At this point the system still will
  boot into Win-10 if I don't hit F12 on boot.

    # systemctl poweroff

  Let's see what Win-10 says about its disk, booting into Win-10.

    Display Manager:
      Disk drives
        Intel Optane+477GBSSD
        SanDisk Cruzer Blade USB Device

  The USB device shows up when I put my bootable thumb drive in,
  or check "show hidden devices".  The SSD seems to be presenting itself
  as a single standalone device.

  A quick Duck-Duck-Go search shows that this is the naming convention
  for disks connected thru an NVM Express port, as opposed to a SATA
  port.

  Also, /dev/sda is the name given to the memory stick.

  The /dev/md126 and /dev/md127 are associated with Raid devices.
  Need to check that the SSD in the UEFI is set to AHCI and
  not RAID.

2021-11-09:
  Seems Arch Wiki has a page on the Inspiron 7590, the 7591 is a
  7590 with an aluminum case.  Looks like the laptop has built-in
  hardware RAID capability.  Needs to be turned off so Linux can see
  underlying drives.  Will break Windows 10.  Was set to RAID,
  changed to ACHI.

  Also, turned off Windows Boot Manager in UEFI.

  Saved UEFI settings, exited and aborted boot (looks like it
  was going to hang anyway).  Upon entering UEFI firmware again,
  only choice of rebooting is with the usb memory stick.

  Lets do it.

  Now it is not seeing any hard drives.

    0: /dev/loop0 (('673.7M', '/eun/archiso/bootmnt/arch/x86_64/airootfs', None))
    1: /dev/sda (('29.3G', /dev/sda', 'ARCH202111'))

  Lets shutdown and return to the UEFI firmware again.

  The Windows Boot Manager totally gone.  Was going to turn its back on,
  but not there.  So, loaded Factory Defaults, now I Have

    UEFI H10 HBRPEKNX0202A NVMe INTEL 512GB

  as a boot choice.  Boot order is USB memory stick and then
  hard drive.

  Selected both on board storage drivers

    SATA-0
    M.2 PCIe SDD-0/SATA-2

  SATA Operation: AHCI
  SMART Reporting: off
  Enable Audio: ON
  Enable Thunderbolt: ON
  Enable Thunderbolt Boot Support: OFF
  Enable Thunderbolt Preboot Modules: OFF
  Thunderbolt Security: NO SECURITY

  Now boots off the USB stick without having to hit F12.

  Now run guided install,

    # python -m archinstall

  I am getting the same 5 choices originally above, this
  time choosing /dev/nvme0n1 (476.9G).  There is also a
  /dev/nvme1n1 (27.3G).  The Win-10 GUI tools were hiding
  second one from me.  Could use it for /var and swap latter?
  Might contain Windows restore stuff, who knows.

  Seems to be vfat, install guide offered to

    0: abort
    1: Format entire drive and set up basic partian scheme
    2: Keep existing partian layout and select which ones to use where

  I chose 1,

  Using ext4 file system (installer offered btrfs as first choice).
  No encryption, in case I have to break in myself.
  Systemd bootloader, System name: maxwell4, Disabled root account.

  Desktop configuration, gnome, nvidia drivers.

  Kernel: linux, Pipeowire, Network Manager

  Go for it:

    Adding partition to BlockDevice(/dev/nvme0n1)
    Adding partition to BlockDevice(/dev/nvme0n1)
    Formatting /dev/nvme0n1 -> vfat
    Formatting /dev/nvme0n1p1 -> ext4

    archinstall.lib.exceptions.DiskError: Could not format  \
      /dev/nvme0n1p1 with ext4 because /dev/nvme0n1p1 is    \
      apparently in use by the system: will not make a file \
      system here.

  At least I think I am getting closer.  But why does it
  do the partitioning twice and put the vfat boot partition
  where it did?  I would think something like /dev/nvme0n1p1,
  not /dev/nvme0n1?

2021-11-10:
  Probably will have to finish this as a manual install.  Should
  check to see if partian table survived so that I know what
  were going to be the defaults.  If it was overwritten via the
  vfat partitioning, I could check out the archinstall python
  script.

2021-11-10:
  Booted off the USB thumb drive.

  Nice to have tooks that don't lie to you,

    # fdisk -l
    Disk /dev/nvme0n1: 476.94GiB ...
    Disk Model: H10 HBRPEKNX0202A NVEe INTEL 512GB
    ...
    Disklabel type: gpt
    ...
    Device            Start         End  Sectors    Size  Type
    /dev/nvme0n1p1     2048     1050623  1048576    512M  EFI System
    /dev/nvme0n1p2  1050624  1000214527  1048576  476.4G  Linux filesystem

    Disk /dev/nvme1n1: 27.25 GiB ...
    Disk Model: H10 HBRPEKNX0202AO NVEe INTEL 32GB
    ...
    Disklabel type: dos
    ...
    Device         Boot      Start         End     Sectors    Size  Id  Type
    /dev/nvme1n1p1      2021161000  4042322159  2021161000  963.8G  78  unknown
    /dev/nvme1n1p2      2021161000  4042322159  2021161000  963.8G  78  unknown
    /dev/nvme1n1p3      4294932600  8589899894  4294967295      2T  78  unknown
    /dev/nvme1n1p4      8589899895  5035196669   740229375    353G  ff  BBT

    Disk /dev/sda: 29.25 GiB ...
    ...
    Disklabel type: dos
    ...
    Device    Boot   Start      End  Sectors  Size  Id  Type
    /dev/sda1 *         64  1556479  1556416  760M   0
    /dev/sda2      1556480  1732607   176128   86M  ef  EFI (FAT-12/16/32)

    Disk /dev/loop0: 673.65 MiB ...

  Clearly loop0 is the RAM disk used by Linux booted off the thumb drive.

  Disk sda is part of the installaton media, not worth reverse engineering.

  Disk nvme0n1 is what the archinstall script left after failing.

  Disk nvme1n1 is what Win-10 left me.  The sizes seemed completely
  wrong, maybe misconfiguration left over from it being part of some
  sort of RAID device?  I'll give Win-10 a pass on this one.

  Lets see what lsblk says,

    # lsblk
    Name         MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT
    loop0          7:0    0 673.7M  1 loop /run/archiso/airootfs
    sda            8:0    1  29.3G  0 disk
      sda1         8:1    1   760M  0 part /run/archiso/bootmnt
      sda2         8:2    1    86M  0 part
    nvme0n1      259:0    0 476.9G  0 disk
      nvme0n1p1  259:1    0   512M  0 part
      nvme0n1p2  259:2    0 476.4G  0 part
    nvme1n1      259:3    0  27.3G  0 disk
      md127        9:127  0     0B  0 md

  Type md means some sort of RAID device.

2021-11-10:
  At this point I think I should work through the Arch Wiki Installation
  Guide.  During this I'll repartition nvme1n1 (nvme0n1 too?) to something
  useful, like ext4 and swap partitions.
