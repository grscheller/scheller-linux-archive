Purpose: To reimage a 2017 Windows 10 PC for my daughters with a Linux.
         System needs to be well configured out of the box and easy for
         my daughters, or me over the phone, to administer.

2023-10-01:
  Installing PopOS 22.04 LTS on a Dell Intel Xeon
    - 4HT core - CPU E3-1505M v6@300GHz
    - 32 GB memory
    - Intel Corporation HD Graphics P630 (rev 04)
    - NVIDIA Corporation GM107GLM [Quadro M620 Mobile] (rev a2)
    - ??? Intel(R) UHD Graphics
    - ??? NVIDIA GeForce MX250 Graphics

  Going with PoPOS 22.04 LTS (NVIDIA)

  Downloaded latest ISO image to gauss17 from

    https://pop.system76.com/

  should have

    SHA5: 33bc14a6499ad513fe64c0394e3af766110b75967578e47f4e4f4251d0fa6f14

  downloaded the file

    pop-os_22.04_amd64_nvidia_34.iso

  Test validity,

    [grs@gauss17]
    $ sha256sum pop-os_22.04_amd64_nvidia_34.iso
    33bc14a6499ad513fe64c0394e3af766110b75967578e47f4e4f4251d0fa6f14  pop-os_22.04_amd64_nvidia_34.iso

  Put USB thumb drive in:

    [grs@gauss17]
    $ lsblk
    NAME   MAJ:MIN RM   SIZE RO TYPE MOUNTPOINTS
    sda      8:0    0 119.2G  0 disk
    ├─sda1   8:1    0   512M  0 part /boot
    └─sda2   8:2    0 118.7G  0 part /
    sdb      8:16   0 931.5G  0 disk
    ├─sdb1   8:17   0   512M  0 part
    ├─sdb2   8:18   0  63.5G  0 part /extra
    ├─sdb3   8:19   0    16G  0 part [SWAP]
    └─sdb4   8:20   0 851.5G  0 part /home
    sdc      8:32   1  57.6G  0 disk
    └─sdc1   8:33   1  57.6G  0 part

    [grs@gauss17]
    $ lsblk -f
    NAME FSTYPE FSVER LABEL UUID                                 FSAVAIL FSUSE% MOUNTPOINTS
    sda
    ├─sda1
    │    vfat   FAT32       A024-8139                             403.1M    21% /boot
    └─sda2
         ext4   1.0         0859da7c-f429-470d-818f-d3951b5d89af   50.6G    51% /
    sdb
    ├─sdb1
    │    vfat   FAT32       BC00-6365
    ├─sdb2
    │    ext4   1.0         4b1b0623-c1d0-4da9-8164-20ee74253def   47.1G    19% /extra
    ├─sdb3
    │    swap   1           a5945738-343f-4cfb-ad76-8ca012eb2576                [SWAP]
    └─sdb4
         ext4   1.0         833c2579-bc84-463a-96a4-89478bd89e9e  711.6G    10% /home
    sdc
    └─sdc1
         vfat   FAT32       8F38-B2AA

  Now "burn" the image,

    [grs@gauss17]
    $ sudo dd bs=4M if=pop-os_22.04_amd64_nvidia_34.iso of=/dev/sdc conv=fdatasync
    724+0 records in
    724+0 records out
    3036676096 bytes (3.0 GB, 2.8 GiB) copied, 57.8096 s, 52.5 MB/s

  Let's see what we got

    [grs@gauss17]
    $ lsblk
    NAME   MAJ:MIN RM   SIZE RO TYPE MOUNTPOINTS
    sda      8:0    0 119.2G  0 disk
    ├─sda1   8:1    0   512M  0 part /boot
    └─sda2   8:2    0 118.7G  0 part /
    sdb      8:16   0 931.5G  0 disk
    ├─sdb1   8:17   0   512M  0 part
    ├─sdb2   8:18   0  63.5G  0 part /extra
    ├─sdb3   8:19   0    16G  0 part [SWAP]
    └─sdb4   8:20   0 851.5G  0 part /home
    sdc      8:32   1  57.6G  0 disk
    ├─sdc1   8:33   1   2.8G  0 part
    └─sdc2   8:34   1     4M  0 part

    [grs@gauss17]
    $ lsblk -f
    NAME FSTYPE FSVER LABEL                     UUID                                 FSAVAIL FSUSE% MOUNTPOINTS
    sda                                                                                   
    ├─sda1
    │    vfat   FAT32                           A024-8139                             403.1M    21% /boot
    └─sda2
         ext4   1.0                             0859da7c-f429-470d-818f-d3951b5d89af   50.6G    51% /
    sdb                                                                                   
    ├─sdb1
    │    vfat   FAT32                           BC00-6365                                 
    ├─sdb2
    │    ext4   1.0                             4b1b0623-c1d0-4da9-8164-20ee74253def   47.1G    19% /extra
    ├─sdb3
    │    swap   1                               a5945738-343f-4cfb-ad76-8ca012eb2576                [SWAP]
    └─sdb4
         ext4   1.0                             833c2579-bc84-463a-96a4-89478bd89e9e  708.8G    10% /home
    sdc  iso966 Jolie Pop_OS 22.04 amd64 Nvidia 2023-09-13-19-15-11-00                    
    ├─sdc1
    │    iso966 Jolie Pop_OS 22.04 amd64 Nvidia 2023-09-13-19-15-11-00                    
    └─sdc2
         vfat   FAT12                           A38C-CAF4

2023-10-01:
  On the Dell,
    
    F1: Reboot
    F2: Setup
    F5: Run diagnostics

  Previously ran diagnostics. Hard drive dead. Laptop connected to
  internet and diagnostics suggested replacing drive with an
  optical drive: Dell 2.5" SATA SSD

  SSD drive was a drop-in replacement.

  In the "BIOS" UEFI setup, turned off legacy mode and the Secure Boot
  misfeature. Went to confirm boot order, could not figure out how to
  change. Should not matter since no OS on SSD. USB thumbdrive could be
  first?

  Reboot with the USB thumbdrive in place.

  Had to power cycle before it recondized thumb drive and booted into
  PopOS. Did see one NVIDIA error flash by, but PoPOS website indicated
  that NVidia drives may need installing. System has a discrete NV card.

  Dropped into a Live-OS desktop GUI environment, took a minute before
  the intallation GUI popped up. 

2023-10-01:
  Installed PopOS through GUI without any problems, took most defaults,
  did not encrypt hard drive.
  
  During install I created user account "buggy" and set timezone to EDT.

  Things I did post-install (tried to keep minimal):

    - Created /etc/sudoers.d/DaddyAdditionsUpdated to allow user buggy
      to use sudo without password. Edited with visudo.
      - Have to give daughters the "with great power calls great
        responsibilities" talk.
    - Edited ~/.bashrc.
      - Added: set -o vi 
        - to use vi command-line editing
    - Changed system name to "onepiece"
      - $ sudo hostnamectl set-hostname onepiece
      - gui install had named it pop-os
    - Installed Neovim
      - $ sudo apt install neovim
      - made no attempt to configure it
      - mouse is turned off, so mouse clicks talk to terminal app
        - might be more intuitive behavior for beginners
    - Installed Python
      - $ sudo apt install python-is-python3
    - Git was already installed
    - Installed Dark Reader pluggin to Firefox

  Let's check video settings:

    $ lspci -k | grep -A 2 -E "(VGA|3D)"
    00:02.0 VGA compatible controller: Intel Corporation HD Graphics P630 (rev 04)
        DeviceName:  Onboard IGD
        Subsystem: Dell HD Graphics P630
    --
    01:00.0 3D controller: NVIDIA Corporation GM107GLM [Quadro M620 Mobile] (rev a2)
        Subsystem: Dell GM107GLM [Quadro M620 Mobile]
        Kernel driver in use: nvidia

  Good!!! Looks like correct drivers are installed for gaming. PopOS
  is designed for gaming. Much as I'd love to set this up, this is my
  daughter's job.

  Let's see if we are XOrg or Wayland.

    $ journalctl -b |grep -i wayland
    Oct 01 20:14:49 onepiece systemd[1940]: Starting GNOME Shell on Wayland...
    Oct 01 20:14:49 onepiece systemd[1940]: org.gnome.Shell@wayland.service: Skipped due to 'exec-condition'.
    Oct 01 20:14:49 onepiece systemd[1940]: Condition check resulted in GNOME Shell on Wayland being skipped.

  Are we using XOrg? and Gnome? I thought PopOS used something called Cosmic Desktop?
  Looks like they intend the default to be Wayland in the future, but dropped back to XOrg for now.

  Let's find out.

    $ systemctl list-units|grep -i -E '(wayland|x11)'
    
    $ systemctl --user list-units|grep -i -E '(wayland|x11)'
      org.gnome.Shell@x11.service               loaded active running   GNOME Shell on X11
      gnome-session-x11-services.target         loaded active active    GNOME session X11 services
      gnome-session-x11.target                  loaded active active    GNOME X11 Session
      gnome-session-x11@pop.target              loaded active active    GNOME X11 Session (session: pop)

2023-10-01:
  Both fd and rg are missing. Took a little hunting to find the package names.

   $ sudo apt install ripgrep
   $ sudo apt install fdfind

  The latter was already installed but by the fdfind name. I added a fd alias
  to ~/.bashrc for it.
    
2023-10-02:
  Created a single file Neovim configuration. Located
  ~/.config/nvim/init.lua. Kept it single file and "grokable" for
  them. Used some more advanced Lua constructs because some of my
  daughters want to learn Lua for Roblox.

2023-10-11:
  Configured the Pop!_Shop "App" <- the GUI between "Terminal" & "Settings" on
  the task bar at bttom of desktop, to automatically perform system and flatpak
  updates. Scheduled this every weekday at 7:00AM when I know my daughters will
  be in bed.

2023-10-11:
  PopOS apt installed Neovim version 0.6.1, way yoo old. In order to use it,
  I would have to embed too much VimL script into ~/.config/nvim/init.lua. VimL
  script is not the future, Lua is. I would not want to inflict having to learn
  VimL script on my daughters.

  Added the alias

    alias nv='flatpak run io.neovim.nvim'

  to ~/.bashrc so that bash can find neovim from the command-line. Now runs
  in the terminal it was launched in.

  I thought running nvim as a flatpak was less probamatic than a non-standard
  PopOS configuration, Ubuntu repos, the Debian Sid repo, or hacker Bob's repo.

2023-10-11:
  Installed Neofetch.

    $ sudo apt install neofetch

  Run neofetch (in regular terminal, not nvim terminal):

    buggy@onepiece:~$ neofetch 
                 /////////////                buggy@onepiece 
             /////////////////////            -------------- 
          ///////*767////////////////         OS: Pop!_OS 22.04 LTS x86_64 
        //////7676767676*//////////////       Host: Precision 3520 
       /////76767//7676767//////////////      Kernel: 6.4.6-76060406-generic 
      /////767676///*76767///////////////     Uptime: 1 hour, 38 mins 
     ///////767676///76767.///7676*///////    Packages: 1888 (dpkg), 8 (flatpak) 
    /////////767676//76767///767676////////   Shell: bash 5.1.16 
    //////////76767676767////76767/////////   Resolution: 1920x1080 
    ///////////76767676//////7676//////////   DE: GNOME 42.5 
    ////////////,7676,///////767///////////   WM: Mutter 
    /////////////*7676///////76////////////   WM Theme: Pop 
    ///////////////7676////////////////////   Theme: Pop-dark [GTK2/3] 
     ///////////////7676///767////////////    Icons: Pop [GTK2/3] 
      //////////////////////'////////////     Terminal: gnome-terminal 
       //////.7676767676767676767,//////      CPU: Intel Xeon E3-1505M v6 (8) @ 4.000GHz 
        /////767676767676767676767/////       GPU: NVIDIA Quadro M620 Mobile 
          ///////////////////////////         GPU: Intel HD Graphics P630 
             /////////////////////            Memory: 4365MiB / 31949MiB 
                 /////////////

2023-10-12:
  I hate flatpaks!!!!! Wonder why nvim was ignoring ~/.config/nvim/init.lua, a :checkhealth showed
  that that it was looking somewhere under some flatmap infrastructure directory!!!!
  Somewhere under the ~/.var/app/io.neovim.nvim/data/nvim/ real directory.
  Uninstalled the Neovim
  flatmap. What good are flatpaks if they don't integrate with their host OS?????

  Can't use what comes with the base OS:

    buggy@onepiece:~$ apt show neovim
    Package: neovim
    Version: 0.6.1-3
    Priority: extra
    Section: universe/editors
    Origin: Ubuntu
    Maintainer: Ubuntu Developers <ubuntu-devel-discuss@lists.ubuntu.com>
    Original-Maintainer: Debian Vim Maintainers <team+vim@tracker.debian.org>

  Might as well be using ed.

2023-10-12:
  Let's move off the LTS to see if we can get a later version of Neovim.

    $ sudo apt update
    $ sudo apt full-upgrade
    $ pop-upgrade recovery upgrade from-release
    $ pop-upgrade release upgrade

  Nope, this just update 7 packages. Lets redo them:

    $ sudo apt update
    Hit:1 http://apt.pop-os.org/proprietary jammy InRelease
    Hit:2 http://apt.pop-os.org/release jammy InRelease
    Hit:3 http://apt.pop-os.org/ubuntu jammy InRelease
    Hit:4 http://apt.pop-os.org/ubuntu jammy-security InRelease
    Hit:5 http://apt.pop-os.org/ubuntu jammy-updates InRelease
    Hit:6 http://apt.pop-os.org/ubuntu jammy-backports InRelease
    Reading package lists... Done
    Building dependency tree... Done
    Reading state information... Done
    All packages are up to date.

    $ sudo apt upgrade
    Reading package lists... Done
    Building dependency tree... Done
    Reading state information... Done
    Calculating upgrade... Done
    The following packages were automatically installed and are no longer required:
      libluajit-5.1-2 libluajit-5.1-common libmsgpackc2 libtermkey1 libtree-sitter0
      libunibilium4 libvterm0 lua-luv neovim-runtime python3-greenlet
      python3-msgpack python3-neovim python3-pynvim xclip
    Use 'sudo apt autoremove' to remove them.
    0 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.

    $ sudo apt full-upgrade
    Reading package lists... Done
    Building dependency tree... Done
    Reading state information... Done
    Calculating upgrade... Done
    The following packages were automatically installed and are no longer required:
      libluajit-5.1-2 libluajit-5.1-common libmsgpackc2 libtermkey1 libtree-sitter0
      libunibilium4 libvterm0 lua-luv neovim-runtime python3-greenlet
      python3-msgpack python3-neovim python3-pynvim xclip
    Use 'sudo apt autoremove' to remove them.
    0 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.

    $ pop-upgrade recovery upgrade from-release
    checking if pop-upgrade requires an update
    Recovery event: fetching recovery files
    Recovery upgrade status: recovery partition refueled and ready to go

    $ pop-upgrade release upgrade
    checking if pop-upgrade requires an update
    Current Release: 22.04
    Upgrading to: 22.10
    New version available: false
    no release available to upgrade to
    
  After a little research, I am at the latest release.

  My choices are:

    1. Install a PPA:

       Import the stable Neovim PPA with the following command:

         $ sudo add-apt-repository ppa:neovim-ppa/stable -y

       Or, to import the unstable Neovim PPA, use this command:

         $ sudo add-apt-repository ppa:neovim-ppa/unstable -y

    2. Install the Nix package manage:

         $ sh <(curl -L https://nixos.org/nix/install) --daemon

       See https://nixos.org/learn

    3. Figure out where the Flatpack wants Neovim's configuration files:

       Reinstall the Neovim flatpak.

       From within a Neovim :term session,

         sh-5.2$ env|grep -i xdg
         XDG_CONFIG_DIRS=/app/etc/xdg:/etc/xdg
         XDG_MENU_PREFIX=gnome-
         XDG_DATA_HOME=/home/buggy/.var/app/io.neovim.nvim/data
         XDG_CONFIG_HOME=/home/buggy/.var/app/io.neovim.nvim/config
         XDG_SESSION_DESKTOP=pop
         XDG_SESSION_TYPE=x11
         XDG_CURRENT_DESKTOP=pop:GNOME
         XDG_CACHE_HOME=/home/buggy/.var/app/io.neovim.nvim/cache
         XDG_SESSION_CLASS=user
         XDG_STATE_HOME=/home/buggy/.var/app/io.neovim.nvim/.local/state
         XDG_RUNTIME_DIR=/run/user/1000
         XDG_DATA_DIRS=/app/share:/usr/share:/usr/share/runtime/share:/run/host/user-share:/run/host/share

         $ cp .config/nvim/init.lua  /home/buggy/.var/app/io.neovim.nvim/config/nvim/

       From an external shell,

         $ env | grep -i xdg
         XDG_CONFIG_DIRS=/etc/xdg/xdg-pop:/etc/xdg
         XDG_MENU_PREFIX=gnome-
         XDG_SESSION_DESKTOP=pop
         XDG_SESSION_TYPE=x11
         XDG_CURRENT_DESKTOP=pop:GNOME
         XDG_SESSION_CLASS=user
         XDG_RUNTIME_DIR=/run/user/1000
         XDG_DATA_DIRS=/usr/share/pop:/usr/share/gnome:/home/buggy/.local/share/flatpak/exports/share:/var/lib/flatpak/exports/share:/usr/local/share/:/usr/share/

       At least $XDG_CONFIG_HOME should default to ~/.config
       
       Looks like they are trying to make things "easy" for GUI users at
       the expense of intermediate users. I wish they'd just keep things
       "simple."

2023-10-15:
  Anycase, when the Neovim flatpak is launched from the GUI or the
  terminal, it uses the flatpak $XDG paths. Apt installed applications
  use the systme $XDG paths.

  So in anticipation of a more up-to-date Neovim in a future PoPOS
  release or update,

    - put the configuration here: ~/.config/nvim/init.lua
    - created a sym-link from the Flatpak XDG location
      
        $ ln -s ~/.config/nvim/init.lua  ~/.var/app/io.neovim.nvim/config/nvim/init.lua

    - created the nv alias in ~/.bashrc for the flatpak

        alias nv='flatpak run io.neovim.nvim'

  If PopOS ever updates the Neovim package, we can run it as nvim
  without clashing with the flatpak version.

2023-10-15:
  Getting tired of emailing changes between onepiece and euler7. I don't
  want to create a second account for myself, nor configure my GitHub
  credentials with the buggy account. The computers right now are
  sitting in the same room. Will install and enable the sshd daemon.

    $ apt search openssh-server
    Sorting... Done
    Full Text Search... Done
    openssh-server/jammy-updates 1:8.9p1-3ubuntu0.4 amd64
      secure shell (SSH) server, for secure access from remote machines
    
    $ sudo apt install openssh-server
    ...

    $ sudo systemctl status sshd.service 
    ● ssh.service - OpenBSD Secure Shell server
         Loaded: loaded (/lib/systemd/system/ssh.service; enabled; vendor preset: enabled)
         Active: active (running) since Sun 2023-10-15 14:24:14 EDT; 5min ago
           Docs: man:sshd(8)
                 man:sshd_config(5)
       Main PID: 4496 (sshd)
          Tasks: 1 (limit: 38191)
         Memory: 1.7M
            CPU: 19ms
         CGroup: /system.slice/ssh.service
                 └─4496 "sshd: /usr/sbin/sshd -D [listener] 0 of 10-100 startups"

    Oct 15 14:24:14 onepiece systemd[1]: Starting OpenBSD Secure Shell server...
    Oct 15 14:24:14 onepiece sshd[4496]: Server listening on 0.0.0.0 port 22.
    Oct 15 14:24:14 onepiece sshd[4496]: Server listening on :: port 22.
    Oct 15 14:24:14 onepiece systemd[1]: Started OpenBSD Secure Shell server.

    $ systemctl is-enabled sshd.service 
    alias

  Huh???....
    
    $ systemctl is-enabled ssh.service 
    enabled
    
    $ systemctl status ssh.service 
    ● ssh.service - OpenBSD Secure Shell server
         Loaded: loaded (/lib/systemd/system/ssh.service; enabled; vendor preset: enabled)
         Active: active (running) since Sun 2023-10-15 14:24:14 EDT; 10min ago
           Docs: man:sshd(8)
                 man:sshd_config(5)
       Main PID: 4496 (sshd)
          Tasks: 1 (limit: 38191)
         Memory: 1.7M
            CPU: 19ms
         CGroup: /system.slice/ssh.service
                 └─4496 "sshd: /usr/sbin/sshd -D [listener] 0 of 10-100 startups"
    
    Oct 15 14:24:14 onepiece systemd[1]: Starting OpenBSD Secure Shell server...
    Oct 15 14:24:14 onepiece sshd[4496]: Server listening on 0.0.0.0 port 22.
    Oct 15 14:24:14 onepiece sshd[4496]: Server listening on :: port 22.
    Oct 15 14:24:14 onepiece systemd[1]: Started OpenBSD Secure Shell server.

    $ systemctl is-enabled ssh.service
    enabled

  Not only did it install it, it started it and enabled it too, even
  when I gave it the wrong name!!! How is one expected to learn anything
  if the system is setup so it can be fuddled through? Simplicity,
  understandability, and reproducibility are more important to me than
  "it just works." Because when it doesn't "just work" you have a real
  big ball-of-mud to unroll. Enough preaching. I do likw PopOS and am
  really looking foeward helping my daughters upgrade it to the next
  version running theCosmic desktop under Wayland.

  Neither gauss17 nor onepiece knew of each other.

  I am editing this now while remotingly logged in via ssh from
  gauss17. Had to use the IP address. The onepiece system does not know
  anything about my alacritty terminal emulator. I am getting
  a monochrome terminal session.

    $ sudo apt install alacritty
    ...
    The following NEW packages will be installed:
      alacritty xclip
    ...

  Launched alacritty terminal on onepiece, bash session definately more
  readable than gnome-terminal. Neovim sessions definately more
  readable. While remotely logged into onepiece thru ssh from an alacritty
  terminal running on gauss17, bash does not know about colors but nvim
  and neofetch do.

    $ echo $TERM
    alacritty

  Need to adjust ~/.bashrc startp script...

2023-10-15:
  But first, onepiece keeps going asleep on me after only a couple of
  minutes. Let's see if my "spin" script will fix this.

    buggy@onepiece:~$ mkdir bin .local/bin
    [grs@gauss17: ~]$ scp bin/spin buggy@192.168.1.8:bin/spin
    buggy@192.168.1.8's password:
    spin                                100%  431    65.6KB/s   00:00

  Spin is a simple shell script that rotates a bar around clockwise.
  Lets see if that is enough to keep onepiece awake.

2023-10-15:
  Back to getting bash configured for alacritty. Added "alacritty" to
  script logic.

  Also... The neovim flatpak lies to you.

    $ cd /etc/skel
    $ vi ./.bashrc   <- edits that file
    $ nv ./.bashrc   <- edits /home/buggy/.bashrc !!!!!

  Another example of NOT trusting Flatpaks!!! There obviously is
  a "monkey-in-the-middle" messing up a trusted code base. If a user
  does not yet understand hierarchical file system structure, they have
  NO BUSINESS EDITING ~/.bashrc!!!!!

  I don't like tools that lie to you. As soon a more up to date system
  version installable with apt is available, we need to dump this
  flatpak. I don't hate flatpaks, appimages, nor snaps; just the morons
  who put them together.

2023-10-15:
  While ranting above, one piece fell asleep on me again. Let's go into
  the setting app and adjust this to more appropriate settings for
  a home computer. Settings app is last icon in the dock at bottom.

  Changes made:
  
    Superkey: now shows desktop view
      Infititely more useful than showing running running apps
      or the worthless launcher. I think that actually is the
      vanilla Gnome default behavior.

    Turned on "hot corner"
      Does the same as the Superkey, useful if your hand is on the mouse
      and not the keyboard. Some people hate this. Tastes vary.

    Appearance: Dark
      I set this a while ago.

    Dock Visibility: Intelligently hide
      Unless you use a 42" monitor, the increase in screen real estate
      is much appriciated.

    Dock icon size: Made smaller
      Looks cooler, more room for icons, takes up less space, and most
      of all, it does not remind me of a Mac anymore.

  That is about it. Everything else looked reasonable.

  Note: You can change keyboard shortcuts via the "hamberger" menu on
        the left side of the top of the settings app.

  Note: No suspend/hibernate settings.

  Note: Very useful help menu in hamberger menu.

  But wait!!! There in an < icon at the top left of the settings app
  that takes you to way more stuff.

    Changes made:

      Screen blanking after 15 min (was 5 minutes)
      Autoscreen lock after 1 hour after sceen blanking

2023-10-15:
  Back to Alacritty, default font looks good. Unless Neovim is
  configured for software development, full fledged IDE with LSP
  support, no sense installing and configuring a Nerd-Font. 

  Surprise! when Super-T shortcut is hit, it opens an Alacritty
  terminal, not the gnome-terminal any more.

    Ctrl+Shift+C copied
    Ctrl+Shift+P pastes

  If in neovim with alacritty, hold down the shift key when you select
  with the mouse. That way the mouse is talking to the alacritty
  terminal app and not the Neovim program running in the alacritty
  terminal.

  There are many ways you can cut and paste using Neovim directly. One
  way is to highlight the with the mouse WITHOUT pressing Shift key.
  Then press "+y to "yank" copies the text to the system clipboard. 

  You can paste from the system clipboard into Neovim using "+p key
  combination. The text in the system clipboard is pasted to where the
  cursor is.

  With gnome-terminal, you can always right click to get a copy, cut
  paste menu where you can copy and past into the terminal. If Neovim is
  running in the terminal, it just thinks you typed it.

  If all else fails, use nano to edit text files. It is brain-dead
  simple and a good choice for the brain-dead. If you ever what to edit
  programming source code files, html files, markdown files, system
  configuration files, csv database dump files - you will need to to
  learn how to use and configure something more powerful, like vim,
  neovim, or emacs.

  I kept shortcuts for both alacritty and gnome-terminal in the dock for
  you to choose from.

2023-10-15:
  YES!!!!!!!!! This desktop has a tiling mode!!!

  On the topbar, to the left of the power/network/bluetooth controls is
  a button where you can put the desktop in tiling mode. A fairly
  intuitive tiler. Alacritty plays very nicely in this mode. Can turn
  off title bars too to gain some real estate. Firefox, calaculator,
  gnome-terminal keep their title bars.

  In tiling mode still click focus, but windows can easily be
  repositioned and resized with the mouse. Windows will also tab
  themselves. Probably won't need screen ot tmux. Need to investigate
  keybindings for this mode.

