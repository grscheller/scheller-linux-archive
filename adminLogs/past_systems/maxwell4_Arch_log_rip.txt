Purpose: To indicate what was done to create maxwell4 and the
         rational behind it.  Named after Maxwell's Equations.

Note: Initially I did a lot of thrashing around, jump to
      2021-11-13 for a fairly straight forward manual build.

      I tried using the Arch Install Python script but
      ran into a lot of trouble due to not doing my homework
      on the Dell system I was installing to.  My first
      manual install attempt did not go very well, probably
      I screwed up the partition table.

2021-11-07:
  Created bootable USB memory stick on gauss17.

    $ sudo dd bs=4M if=archlinux-2021.11.01-x86_64.iso of=/dev/sdd

  Used

    $ df -h
    $ lsblk

  to reverse engineer thumb drive name.

2021-11-08:
  Installed Arch Linux on a Dell Inspiron 15 7591 2-in-1.
    - 4 core i7-10510U CPU 1.8 GHz
    - 16 GB memory
    - Realtek Audio
    - UEFI system
    - Intel(R) UHD Graphics
    - NVIDIA GeForce MX250 Graphics

  The Nvidia chipset is several years old.  It is designed
  as standalone but can function in an Optimus mode.  It does
  not support Wayland, so I am stuck with XOrg.

  System is for work.  Currently has Window 10 installed.
  Was able to get into the UEFI firmware via pressing F12
  at boot (without the fn key).

  Turned off secureboot.  Also turned off some features
  which helped improve virtual machine usage.  Could
  not figure out how to change the boot order to boot
  from USB memory stick by default, but with bootable
  USB memory stick in place, could boot to it via the
  UEFI firmware.

  Now launch guided install.

    # python -m archinstall

  No go unless I connect to a network.  Will go home and
  use Ethernet cable.

2021-10-09:
  What!?!? This computer has no Ethernet Jack.  Have to
  get network working from the command line.

    # iwctl device list

  Wifi <device> = wlan0

    # iwctl station <device> scan
    # iwctl station <device> get-networks

  Got list of SSID's

    # iwctl station <device> connect <SSID>

  Prompted me for my passcode, and I had network access.
  Also, could have used

    # iwctl --passphrase <pw-for-ssid> station <device> connect <SSID>

  Cross our fingers.

    # python -m archinstall

  Went with the defaults, but installation failed when it
  tried to write partition table to /dev/sda.  There were
  other disk-like "devices" I was not sure about.  Is Win-10
  doing something funky?  Sorry for being sketchy here, I am
  going from memory.

2021-11-09:
  Attached to work wifi network.  Able to ping 1.1.1.1.

  At the console, Alt+RtArrow & Alt+LtArrow jump you between
  various virtual consoles.

  Lets try another guided install:

    # python -m archinstall

  About the 4th question, installation is asking me about the
  disk to install to,

    0: /dev/loop0 (('673.7M', '/eun/archiso/bootmnt/arch/x86_64/airootfs', None))
    1: /dev/md126 (('0B, None, None))
    2: /dev/md127 (('0B, None, None))
    3: /dev/nvme0n1 (('476.9G', '/dev/nvne0n1', None))
    4: /dev/nvme1n1 (('27.3G', '/dev/nvne1n1', None))
    5: /dev/sda (('29.3G', /dev/sda', 'ARCH202111'))

  Well, last night I went for /dev/sda because it "looked familiar"
  and I was hoping things would "just work".  I think this
  "quick and dirty" install of Arch using the Arch guided install
  was misguided, but has evolved into a learning experience!
  (Pun not intended.)

  Clearly most of the memory is on /dev/nvme0n1, whatever that is.

  I think I should abort the install until I educate myself a
  little bit more.

  The 'ARCH202111' above may be an artifact from last night's
  install attempt above.  At this point the system still will
  boot into Win-10 if I don't hit F12 on boot.

    # systemctl poweroff

  Let's see what Win-10 says about its disk, booting into Win-10.

    Display Manager:
      Disk drives
        Intel Optane+477GBSSD
        SanDisk Cruzer Blade USB Device

  The USB device shows up when I put my bootable thumb drive in,
  or check "show hidden devices".  The SSD seems to be presenting itself
  as a single standalone device.

  A quick Duck-Duck-Go search shows that this is the naming convention
  for disks connected thru an NVM Express port, as opposed to a SATA
  port.

  Also, /dev/sda is the name given to the memory stick.

  The /dev/md126 and /dev/md127 are associated with Raid devices.
  Need to check that the SSD in the UEFI is set to AHCI and
  not RAID.

2021-11-09:
  Seems Arch Wiki has a page on the Inspiron 7590, the 7591 is a
  7590 with an aluminum case.  Looks like the laptop has built-in
  hardware RAID capability.  Needs to be turned off so Linux can see
  underlying drives.  Will break Windows 10.  Was set to RAID,
  changed to ACHI.

  Also, turned off Windows Boot Manager in UEFI.

  Saved UEFI settings, exited and aborted boot (looks like it
  was going to hang anyway).  Upon entering UEFI firmware again,
  only choice of rebooting is with the USB memory stick.

  Lets do it.

  Now it is not seeing any hard drives.

    0: /dev/loop0 (('673.7M', '/eun/archiso/bootmnt/arch/x86_64/airootfs', None))
    1: /dev/sda (('29.3G', /dev/sda', 'ARCH202111'))

  Lets shutdown and return to the UEFI firmware again.

  The Windows Boot Manager totally gone.  Was going to turn its back on,
  but not there.  So, loaded Factory Defaults, now I Have

    UEFI H10 HBRPEKNX0202A NVMe INTEL 512GB

  as a boot choice.  Boot order is USB memory stick and then
  hard drive.

  Selected both on board storage drivers

    SATA-0
    M.2 PCIe SDD-0/SATA-2

  SATA Operation: AHCI
  SMART Reporting: off
  Enable Audio: ON
  Enable Thunderbolt: ON
  Enable Thunderbolt Boot Support: OFF
  Enable Thunderbolt Preboot Modules: OFF
  Thunderbolt Security: NO SECURITY

  Now boots off the USB stick without having to hit F12.

  Now run guided install,

    # python -m archinstall

  I am getting the same 5 choices originally above, this
  time choosing /dev/nvme0n1 (476.9G).  There is also a
  /dev/nvme1n1 (27.3G).  The Win-10 GUI tools were hiding this
  second one from me.  Could use it for /var and swap latter?
  Might contain Windows restore stuff, who knows.

  Seems to be vfat, install guide offered to

    0: abort
    1: Format entire drive and set up basic partian scheme
    2: Keep existing partian layout and select which ones to use where

  I chose 1,

  Using ext4 file system (installer offered btrfs as first choice).
  No encryption, in case I have to break in myself.
  Systemd bootloader, System name: maxwell4, Disabled root account.

  Desktop configuration, gnome, nvidia drivers.

  Kernel: linux, Pipewire, Network Manager

  Go for it:

    Adding partition to BlockDevice(/dev/nvme0n1)
    Adding partition to BlockDevice(/dev/nvme0n1)
    Formatting /dev/nvme0n1 -> vfat
    Formatting /dev/nvme0n1p1 -> ext4

    archinstall.lib.exceptions.DiskError: Could not format  \
      /dev/nvme0n1p1 with ext4 because /dev/nvme0n1p1 is    \
      apparently in use by the system: will not make a file \
      system here.

  At least I think I am getting closer.  But why does it
  do the partitioning twice and put the vfat boot partition
  where it did?  I would think something like /dev/nvme0n1p1,
  not /dev/nvme0n1?

2021-11-10:
  Probably will have to finish this as a manual install.  Should
  check to see if partition table survived so that I know what
  were going to be the defaults.  If it was overwritten via the
  vfat partitioning, I could check out the archinstall python
  script.

2021-11-10:
  Booted off the USB thumb drive.

  Nice to have tools that don't lie to you, hear that Redmond?

    # fdisk -l
    Disk /dev/nvme0n1: 476.94GiB ...
    Disk Model: H10 HBRPEKNX0202A NVEe INTEL 512GB
    ...
    Disklabel type: gpt
    ...
    Device            Start         End  Sectors    Size  Type
    /dev/nvme0n1p1     2048     1050623  1048576    512M  EFI System
    /dev/nvme0n1p2  1050624  1000214527  1048576  476.4G  Linux filesystem

    Disk /dev/nvme1n1: 27.25 GiB ...
    Disk Model: H10 HBRPEKNX0202AO NVEe INTEL 32GB
    ...
    Disklabel type: dos
    ...
    Device         Boot      Start         End     Sectors    Size  Id  Type
    /dev/nvme1n1p1      2021161000  4042322159  2021161000  963.8G  78  unknown
    /dev/nvme1n1p2      2021161000  4042322159  2021161000  963.8G  78  unknown
    /dev/nvme1n1p3      4294932600  8589899894  4294967295      2T  78  unknown
    /dev/nvme1n1p4      8589899895  5035196669   740229375    353G  ff  BBT

    Disk /dev/sda: 29.25 GiB ...
    ...
    Disklabel type: dos
    ...
    Device    Boot   Start      End  Sectors  Size  Id  Type
    /dev/sda1 *         64  1556479  1556416  760M   0
    /dev/sda2      1556480  1732607   176128   86M  ef  EFI (FAT-12/16/32)

    Disk /dev/loop0: 673.65 MiB ...

  Clearly loop0 is the RAM disk used by Linux booted off the thumb drive.

  Disk sda is part of the installaton media, not worth reverse engineering.

  Disk nvme0n1 is what the archinstall script left after failing.

  Disk nvme1n1 is what Win-10 left me.  The sizes seemed completely
  wrong, maybe misconfiguration left over from it being part of some
  sort of RAID device?  I'll give Win-10 a pass on this one.

  Lets see what lsblk says,

    # lsblk
    Name         MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT
    loop0          7:0    0 673.7M  1 loop /run/archiso/airootfs
    sda            8:0    1  29.3G  0 disk
      sda1         8:1    1   760M  0 part /run/archiso/bootmnt
      sda2         8:2    1    86M  0 part
    nvme0n1      259:0    0 476.9G  0 disk
      nvme0n1p1  259:1    0   512M  0 part
      nvme0n1p2  259:2    0 476.4G  0 part
    nvme1n1      259:3    0  27.3G  0 disk$ ls -l archlinux-2021.12.01-x86_64.iso
-rw-r--r-- 1 grs grs 891629568 Dec  4 15:25 archlinux-2021.12.01-x86_64.iso
      md127        9:127  0     0B  0 md

  Type md means some sort of RAID device.

2021-11-10:
  At this point I think I should work through the Arch Wiki Installation
  Guide.  During this I'll repartition nvme1n1 (nvme0n1 too?) to something
  useful, like ext4 and swap partitions.

2021-11-11:
  Following the Arch Installation Guide, found here

    https://wiki.archlinux.org/title/installation_guide

  Connecting to my apartment wifi network.

    # ping 1.1.1.1
    # ip link
    # ping archlinux.org

  All indicate network is up and DNS configured.

  Confirmed booted into UEFI mode by

    # ls /sys/firmware/efi/efivars/

  not failing.

  Note that the installation media has

    systemd-networkd
    systemd-resolved
    iwd
    ModemManager

  preconfigured.  This will not be the case for the installed system.

  Ensure system clock accurate.

    # timedatectl set-ntp true

  To determine disk layout, use either

    # fdisk -l
    # lsblk

  These return same info as stated previously.

  Let's just repartition everything from scratch.
  My gauss17ArchLinuxAdmin.log notes and the Arch Wiki
  Parted page have come in handy here:

    # parted --list

  Shows what I already know, first redo /dev/nvme0n1.

    # parted /dev/nvme0n1
    (parted) mklabel gpt
    (parted) mkpart "EFI system partition" fat32 1MiB 513MiB
    (parted) set 1 esp on
    (parted) mkpart "swap partition" linux-swap 513MiB 16.5GiB
    (parted) mkpart "root partition" linux-swap 16.5GiB 100%
    (parted) print
    Model: H10 HBRPEKNX0202A 512 GiB (nvme)
    Disk /dev/nvme0n1: 512GB
    Sector size (logical/physical): 512B/512B
    Partian Table: gpt
    Disk Flags:

    Number  Start   End    Size  File system     Name                 Flags
     1      1049kB  538MB  537MB fat32           EFI system partition boot, esp
     2      538MB   17.7GB 17.2GB linux-swap(v1) swap partition
     3      26.3GB  512GB  486GB  ext4           root partition

  Hmmm..., some wasted space between swap and root, I hope parted
  knows what it is doing.

  Lets format /dev/nvme1n1 as our home partition

    # parted /dev/nvme1n1
    (parted) mklabel gpt
    (parted) mkpart "home partition" ext4 1MiB 100%
    (parted) print
    Model: H10 HBRPEKNX0202AO 32 GiB (nvme)
    Disk /dev/nvme1n1: 29.3GB
    Sector size (logical/physical): 512B/512B
    Partian Table: gpt
    Disk Flags:

    Number  Start   End    Size   File system  Name           Flags
     1      1049kB  29.3GB 29.3GB ext4         root partition

  Hmmm..., maybe something evil is hiding at the end of this disk???

  Let us boldly stumble ahead, and format this space

    # mkfs.fat -F 32 /dev/nvme0n1p1
    mkfs.fat 4.2 (2021-01-31)

    # mkswap /dev/nvme0n1p2
    Setting up swapspace version 1, size 16 GiB (17178816512 bytes)
    no label, UUID=...

  Let's check this out,

    17178816512B/(1024*1024*1024B/GiB) = 15.999019622802734GiB

  Continue,

    # mkfs.ext4 /dev/nvme0n1p3
    ...

    # mkfs.ext4 /dev/nvme1n1p1
    /dev/nvme1n1p1 is apparently in use by the system: will not make a filesystem here!

  Hmmm..., I thought evil was a foot!  Probably the same thing that killed
  the guided install.

    # lsblk
    Name         MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT
    loop0          7:0    0 673.7M  1 loop /run/archiso/airootfs
    sda            8:0    1  29.3G  0 disk
      sda1         8:1    1   760M  0 part /run/archiso/bootmnt
      sda2         8:2    1    86M  0 part
    nvme0n1      259:0    0 476.9G  0 disk
      nvme0n1p1  259:1    0   512M  0 part
      nvme0n1p2  259:2    0    16G  0 part
      nvme0n1p3  259:4    0 452.4G  0 part
    nvme1n1      259:3    0  27.3G  0 disk
      md127        9:127  0     0B  0 md
      nvme0n1p1  259:5    0  27.2G  0 part

  What the hell is this md127 RAID thing doing here?  Maybe an artifact
  from when I first booted the installation media.  Let's see if it goes
  away on a reboot since I blew away the partition table on that drive.

    # systemctl poweroff

  Booted from USB thumbdrive again,

    # lsblk
    Name         MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT
    loop0          7:0    0 673.7M  1 loop /run/archiso/airootfs
    sda            8:0    1  29.3G  0 disk
      sda1         8:1    1   760M  0 part /run/archiso/bootmnt
      sda2         8:2    1    86M  0 part
    nvme0n1      259:0    0 476.9G  0 disk
      nvme0n1p1  259:1    0   512M  0 part
      nvme0n1p2  259:2    0    16G  0 part
      nvme0n1p3  259:3    0 452.4G  0 part
    nvme1n1      259:4    0  27.3G  0 disk
      nvme0n1p1  259:5    0  27.2G  0 part

  I am happy!!!!

  To continue the manual install, I will need to repeat a few
  things.  Also will set up system time better.

2021-11-12:

  Continue from yesterday, same boot

    # timedatectl set-timezone US/Mountain

  Now maxwell4 and gauss17 synced to the second, before even running
  the next command.  They were 10 minutes apart on a previous boot.

    # timedatectl set-ntp true

  Finish making filesystems from yesterday

    # mkfs.ext4 /dev/nvme1n1p1

  Now mount the file systems of target system under /mnt,

    # mount /dev/nvme0n1p3 /mnt
    # mkdir /mnt/home
    # mount /dev/nvme1n1p1 /mnt/home
    # mkdir /mnt/boot
    # mount /dev/nvme0n1p1 /mnt/boot
    # swapon /dev/nvme0n1p2

  Use reflector to create pacman mirrorlist

    # cp -- etc/pacman.d/mirrorlist{,-orig}
    # reflector --country 'US,Canada,' --protocol https --latest 20 > /etc/pacman.d/mirrorlist

  Note: There is a systemd reflcetor service which
        can be turned on in the target system,
        see https://wiki.archlinux.org/title/Reflector

  Install essential packages to target system with pacstrap

    # pacstrap /mnt base linux linux-firmware

  Generate an fstab, do sanity check with vim

    # genfstab -U /mnt >> /mnt/etc/fstab

  Change root into the new system

    # arch-chroot /mnt

  Set the time zone and generate /etc/adjtime

    # ln -sf /usr/share/zoneinfo/US/Mountain /etc/localtime
    # hwclock --systohc

  Opps, no editor,

    # pacman -Syu
    # pacman -Syu neovim

  Edit /etc/locale.gen and uncommented en_US.UTF-8 UTF-8

    # locale-gen

  Create /etc/locale.conf with contents

    LANG=en_US.UTF-8

  Create /etc/hostname with contents

    maxwell4

  Set new root password.

    # passwd

  Need to research what network management software I will need.
  In the mean time, install iwd so I have at least iwctl.

    # pacman -Syu iwd

  I should have systemd-networkd and systemd-resolved as part
  of Systemd.  Something tells me to install ModemManager too.
  I will be prepared if the telecoms defeat the cable companies.

    # pacman -Syu modemmanager

  Installation guide now tells me to ensure a "Linux-capable boot loader"
  is installed.  Go to the Arch systemd-boot Wiki page.

  Do a manual install of the boot loader.

     # bootctl --boot-path=/boot install

   To later update, use

     # bootctl update

  Will put in a pacman hook in later to automate this.  Pacman
  itself only installs the installer.

  Reboot into new system.

    # <Ctrl-d>
    # systemctl poweroff

  Remove thumbdrive and boot.

  Only choice the Linux boot menu is giving me is to load the
  Intel firmware interface.  Misconfigured systemd-boot???

  Tried unchecking Linux Boot Manager and go straight to HD,
  same behavior.

  Tried checking only Linux Boot Manager, same behavior.

2021-11-13:
  Not quite sure how to proceed.  Probably a misconfigured
  systemd-boot.  Don't want to ask on some forum until I
  understand the problem better.

  I will compare maxwell4 with gauss17.  But first, Lets
  take a look at the options the Dell firmware give me.

  Hitting F10 on boot actually takes me to something Dell branded
  called "One-Time Boot Settings."  Seems to play a role similar
  to the systemd boot menu.  Exiting out takes me to systemd boot
  menu where my only choice is the Dell branded "BIOS Setup."
  The "One-Time Boot Settings" gives me not only several choices
  of UEFI Boot Devices,

    - Linux Boot Modem Manager              (hard drive icon)
    - UEFI H10 HB...                        (hard drive icon)
      NVMe INTEL 512GB
      ...
    - UEFI SanDisk Cruzer Blade             (USB icon)
      4C...22
    - UEFI SanDisk Cruzer Blade             (USB icon)
      4C...22 2

  but also 5 other "Pre-Boot Tasks"

    - BIOS SETUP
    - DIAGNOSTICS
    - BIOS UPDATE
    - SupportAssist OS Recovery
    - Device configuration

  and

    - EXIT

  Ran "BIOS SETUP" gives the same menu systemd-boot menu gives me.

  Ran "DIAGNOSTICS" all tests (including memory tests) passed

    - System BIOS 1.9.1
    - Service Tag ...
    - Version     BD 2.55
    - Touch       Enabled

  Ran "BIOS UPDATE" only choice was to flash from a file.

  Ran "SupportAssist OS Recovery" requires an Ethernet connection
  to the Internet.  At least when I retire, my coworkers can
  downgrade to Win-10 if they want.

  Ran "Device Configuration" and got a non-Dell branded menu
  called "TPV EFI Device Manager" with followng choices

    - Opal                   (Manage Opal disks)
    - Driver Health Manager  (List all the Driver Health Instances to Manage)
    - RAM Disk Configuration (Press <Enter> to add/remove RAM disks)

  Just a guess but I think this last one is what came with the
  mother board.


  Now getting back to comparing maxwell4 with gauss17 systemd-boot
  cnfigurations.  Booting off the thumbdrive via F10 and mounting
  what I need.

    # mount /dev/nvme0n1p3 /mnt
    # mount /dev/nvme1n1p1 /mnt/home
    # mount /dev/nvme0n1p1 /mnt/boot

    (gauss17)$ cd /boot/
    (maxwll4)# cd /mnt/boot

  On both I see the kernals and initramfs as expected.
  Both have EFI/ and loader/ directories.
  But, maxwell4 also has an empty directory c9e6185baf6e41c8ba0592db7febef67/
  Let's blow this empty directory away.
  Also, only gauss17 has intel-ucode.img, as expected.

    (gauss17)$ ls -al EFI
    total 16
    drwxr-xr-x 4 root root 4096 Jun 25  2017 .
    drwxr-xr-x 4 root root 4096 Dec 31  1969 ..
    drwxr-xr-x 2 root root 4096 Jun 25  2017 BOOT
    drwxr-xr-x 2 root root 4096 Jun 25  2017 systemd

    (maxwell4)# ls -al EFI
    total 20
    drwxr-xr-x 5 root root 4096 Nov 12 09:16 .
    drwxr-xr-x 4 root root 4096 Dec 31 09:16 1969 ..
    drwxr-xr-x 2 root root 4096 Jun 25 09:16 BOOT
    drwxr-xr-x 2 root root 4096 Jun 25 09:16 Linux
    drwxr-xr-x 2 root root 4096 Jun 25 09:16 systemd

    (gauss17)$ ls -p EFI
    BOOT/  systemd/

    (maxwell4)# ls -p EFI
    BOOT/  Linux/  systemd/

  On maxwell4, EFI/Linux is empty, let's blow it away.

    (maxwell4)# rmdir EFI/Linux

  Look at loader/loader.conf

    (gauss17)$ cat loader/loader.conf
    default arch
    timeout 5
    editor 0
    #default 03ab3a86a6b046d1bb4b74b0d52e0e5c-*

    (maxwell4)# cat loader/loader.conf
    #timeout 3
    #console-mode Keep
    default c9e6185baf6e41c8ba0592db7febef67-*

  Let's change this on maxwell4, note that arch.conf and arch-lts.conf
  are text files live in /boot/loader/entries/ on gauss17.

  On maxwell4, /mnt/boot/loader/entries/ is empty.  Let's first
  fix loader/loader.conf then worry about loader/entries.

  On maxwell4, loader/loader.conf now reads

    default arch
    timeout 5
    #console-mode keep
    #default c9e6185baf6e41c8ba0592db7febef67-*

  On gauss17,

    (gauss17)$ cat loader/entries/arch.conf
    title Arch Linux
    linux /vmlinuz-linux
    initrd /intel-ucode.img
    initrd /initramfs-linux.img
    options root=PARTUUID=d6793ae6-1f23-4895-942a-6714e7a06de6 rw

  On maxwell4, I made this (updated below)

    title Arch Linux
    linux /vmlinuz-linux
    initrd /initramfs-linux.img
    options root=PARTUUID=9cea2554-0db5-4b83-9b05-bd74f47a9bc9 rw

  Where I got the PARTUUID from fdisl -l for nvme1n1p1.  # 2021-11-20: mistake!!!
  Check if this stays the same in the chrooted environment.

    # arch-chroot /mnt

  Yes it does.  Let's give a reboot a try.

  Gave me a choice to boot into Arch Linux, got a Kernel panic

    Kernel panic - not syncing: VFS: Unable to mount root fs on unkown-block(0.0)

  Booting off USB drive again.

  I'm an idiot, I mounted /home (nvme1n1p1) instead of / (nvme0n1p3)
  as the root directory!

    # mount /dev/nvme0n1p3 /mnt
    # mount /dev/nvme0n1p1 /mnt/boot

  Wait a second, "fdisk -l" only gives a "Disk identifier" for
  the entire hard drive.  "parted -l" does not list any sort
  of identifiers.

    # ls -l /dev/disk/by-uuid/

  shows that the sym-link

    2ae1a6dd-841a-4aac-be17-474113239a12 -> ../../nvme0n1p3

  I made this change.

    (maxwell4)$ cat loader/entries/arch.conf
    title Arch Linux
    linux /vmlinuz-linux
    initrd /initramfs-linux.img
    options root=PARTUUID=2ae1a6dd-841a-4aac-be17-474113239a12 rw

  Also, I don't see boot/intel-ucode.img anywhere, nor did I
  configured it into boot/loader/entries/arch.conf.  Might want
  to remove the linux-firmware package before trying to boot
  into the system.

  Attach to wifi via iwctl and

    # arch-chroot
    # pacman -R linux-firmware
    # <Ctrl-d>
    # systemctl poweroff

  Remove thumbdrive and reboot.

  Kernel panic - unable to mount root directory again.

2021-11-13:

  At this point, instead of trying to fixed what I muffed up, let's
  just start from scratch:

  Booted from the USB thumbdrive and established a network
  connection to my apartment wifi.

    # timedatectl set-timezone America/Denver
    # timedatectl set-ntp true
    # parted /dev/nvme0n1
    (parted) mklabel gpt
    (parted) mkpart efi fat32 1MiB 513MiB
    (parted) set 1 esp on
    (parted) mkpart "linux swap" linux-swap 513MiB 16.6GiB

  Let's see what we have so far

    (parted) print
    Number  Start   End    Size   File system     Name       Flags
     1      1049kB  538MB  537MB  fat32           efi        boot, esp
     2      538MB   17.8GB 17.3GB linux-swap(v1)  linux swap

    (parted) mkpart root ext4 17.8GiB 100%
    (parted) print
    Number  Start   End     Size    File system     Name        Flags
     1      1049kB  538MB   537MB   fat32           efi         boot, esp
     2      538MB   17.8GB  17.3GB  linux-swap(v1)  linux swap  swap
     3      17.8GB  512GB   494GB   ext4            root

    (parted) quit

    # parted /dev/nvme1n1
    (parted) mklabel gpt
    (parted) mkpart home ext4 0% 100%
    (parted) print
    Number  Start   End     Size    File system     Name        Flags
     1      1049kB  29.3GB  29.3GB  ext4            home

    (parted) quit

  I already see some differences, continuing

  Make /boot
    # mkfs.fat -F 32 /dev/nvme0n1p1
    mkfs.fat 4.2 (2021-01-31)

  Make swap space
    # mkswap /dev/nvme0n1p2
    mkswap: /dev/nvme0n1p2: warning: wiping old swap signature
    Setting up swapspace version 1, size = 16.1 GiB (17286189056 bytes)
    no label, UUID=6cbe1c44-57d2-4f51-88d4-784c914a98ae

  Make /
    # mkfs.ext4 /dev/nvme0n1p3

  Make /home
    # mkfs.ext4 /dev/nvme1n1p1

  Now let's hang the filesystems.

    # mount /dev/nvme0n1p3 /mnt
    # mkdir /mnt/home
    # mount /dev/nvme1n1p1 /mnt/home
    # mkdir /mnt/boot
    # mount /dev/nvme0n1p1 /mnt/boot
    # swapon /dev/nvme0n1p2

  Use reflector to create pacman mirrorlist

    # cp -- /etc/pacman.d/mirrorlist{,-orig}
    # reflector --country 'US,Canada,' --protocol https --latest 20 > /etc/pacman.d/mirrorlist

  Install essential packages.

    # pacstrap /mnt base linux linux-firmware iwd modemmanager neovim

  Generate an fstab file.

    # genfstab -U /mnt > /mnt/etc/fstab

  Let's drive the zombie

    # arch-chroot /mnt
    # ln -sf /usr/share/zoneinfo/America/Denver /etc/localtime
    # hwclock --systohc

  Created /etc/locale.conf with the contents

    LANG=en_US.UTF-8

  Created /etc/hostname with the contents

    maxwell4

  Set root password

    # passwd

  Note: the Pacman linux-firmware package is not the intel-ucode package.

    # pacman -Syu
    # pacman -Syu intel-ucode
    # ls /boot
    initramfs-linux-fallback.img  initramfs-linux.img  intel-ucode.img  vmlinuz-linux

  Install the systemd boot loader.

    # bootctl --esp-path=/boot/ install

  Edited /boot/loader/loader.conf - see loader.conf(5)

    timeout 5
    default arch
    random-seed-mode always
    #random-seed-mode with-system-token
    console-mode auto
    #console-mode keep

  The commented out lines are the defaults.

  Created /boot/loader/entries/arch.conf
  from /usr/share/systemd/bootctl/arch.conf

    title   Arch Linux
    linux   /vmlinuz-linux
    initd   /intel-ucode.img
    initd   /initramfs-linux.img
    options root=PARTUUID=3038000f-4be8-4960-a020-74227b73b7d0 rootfstype=ext4 add-efi-memmap

  I got the partition uuid from /etc/fstab.

  Try a reboot.  Got a Arch Linux choice.  Could not find the above root device.
  Dropped me into an emergency shell.

  The above root UUID was wrong, fixed it (had -9020- instad of -ao2o-)
  Still could not find it.

  Try this for arch.conf instead:

    title   Arch Linux
    linux   /vmlinuz-linux
    initd   /intel-ucode.img
    initd   /initramfs-linux.img
    options root=/dev/nvme0n1p3 rootfstype=ext4 add-efi-memmap

  Got a prompt!!!!

    maxwell4 login:

  Also got some error messages on the console:

    sof-audio-pci-intel-cn  error: sof firmware file is missing, you might need to
    sof-audio-pci-intel-cn         download it from https://github.com/thesofproject/sof-bin/
    sof-audio-pci-intel-cn  error: failed to load DP firmware -2
    sof-audio-pci-intel-cn  error: sof_probe_work failed err: -2
    Bluetooth: hci0: command 0xfc01 tx timeout
    Bluetooth: hci0: FW download error recovery failed (-110)

  Logged in as root.  Started the network with iwctl.  Only got a link-local
  IPV6 address which begins with 4e8.

  Well, it boots and has some sort of network access.  A good start.

2021-11-14:

  Need to get DNS working.  Will stay with iwd and not wpa_supplicant.
  The former relies on kernel interfaces and not so much external libraries.

  Following this guide: https://insanity.industries/post/simple-networking/

  Creating /etc/iwd/main.conf containing

    [General]
    # uncomment for setting the wifi interface name yourself
    # see https://iwd.wiki.kernel.org/interface_lifecycle
    #UseDefaultInterface=true

    # enable builtin DHCP-client within iwd for wifi
    EnableNetworkConfiguration=true

    # randomizes mac-address every time iwd starts or the hardware is initially detected
    AddressRandomization=once

  Now enable it,

    # systemctl enable --now iwd

  Took a reboot to work but was automatically connected to my wifi network,
  but this with a an IPV4 address.  No DNS.

    # ip addr
    1: lo: ...
    ...
    3: wlan0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default qlen 1000
    link/ether 86:b9:39:71:da:e4 brd ff:ff:ff:ff:ff:ff
    inet 192.168.1.8/24 scope global noprefixroute wlan0
       valid_lft forever preferred_lft forever

2021-11-15:
  Need to set up DNS on maxwell4 so pacman will work.
  Lets compare to gauss17.

    (gauss17)$ cat /etc/resolv.conf
    # Generated by NetworkManager
    nameserver 192.168.1.1

    (gauss17)$ ls -l /etc/resolv.conf
    -rw-r--r-- 1 root root 53 Nov 11 14:05 /etc/resolv.conf

  Edited /etc/resov.conf on maxwell4.

    # cat /etc/resolv.conf
    # Resolver configuration file
    # See resolv.conf(5) for details
    # Edited by grscheller
    nameserver 1.1.1.1

2021-11-15:
  Need to start to maintain this file on maxwell4.  Decided
  to install git.  Need more time to set up ssh properly.

    # pacman -Syu
    ...

    # pacman -Syu git
    ...
    Packages (7) db-5.3.28-5  gdbm-1.22-1  perl-5.34.0-2     \
                 perl-error-0.17028-3  perl-mailtools-2.21-5 \
                 perl-timedate-2.33-3  git-2.33.1-1
    ...

    Git needs perl???

    # pacman -Syu pacman-contrib

    # pactree -r perl
    perl
    |--git
    |--pacman-contrib
    |--perl-error
    |  |--git
    |--perl-timedate
       |--perl-mailtools
          |--git

  Probably for perl regular expressions.

2021-11-15:
  I noticed that the wifi interface is being reported as wlan0
  by "ip addr" (see above) and not some sort of unique name.
  This may be due to a known race condition due to iwd being
  so fast.  See https://insanity.industries/post/racefree-iwd/
  for details.

2021-11-15:
  Things I want to accomplish:

  1. Fix the race condition mentioned above
  2. Properly configure systemd-networkd
  3. Properly configure systemd-resolved
  4. Install and configure OpenSSH

  The Arch Wiki has excellent articles on the last three.

  First thing install OpenSSH.  Note that apartment wifi
  came up without me doing anything.

    # pacman -Syu openssh

  Edited /etc/ssh/sshd_config similar to gauss17, but for Now
  permitting password logins.  Moved ssh port from 22 to a
  high port, different from one used on gauss17.  Not
  allowing root ssh logins.

  Need to create a user if I want to use ssh.

    # useradd -d /home/grs -c Geoffrey -G wheel -m grs
    # passwd grs

  Edited ~/.ssh/config on gauss17 with maxwell4 info.

  Enable the ssh service.

    # systemctl enable sshd.service

  Note that sshd.socket is no longer an option.

2021-11-16:
  Set up passwordless ssh between gauss17 and maxwell4.
  See notes/unixCommands.txt in this repo for details
  how to do this.

  Also disabled password verification with ssh.  Need to
  configure ~/.ssh/authorized_keys to authenticate.

2021-11-16:
  Keeping root's .bashrc simple.

    set -o vi
    export EDITOR=nvim
    export PAGER="nvim -R"

  On initial "su -" .bashrc is not being sourced, but
  is sourced for just "su"???  Same for "su --login"?

  Found out why, root has no ~/.bash_profile, lets give
  it the standard one,

    [[ -f ~/.bashrc ]] && source ~/.bashrc

  Now things behave like good'ol System-V!

2021-11-16:
  Lets set up GIT for grs user.

    $ git config --global user.name grscheller
    $ git config --global user.email geoffrey@scheller.com
    $ git config --global core.editor nvim
    $ git config --global core.pager "nvim -R"
    $ git config --global pull.rebase false
    $ git config --global color.pager no

  No, I am not going old school monochrome.  Last one is no
  because I want nvim to do the coloring,

  Next lines will be done from maxwell4.
  This line added on maxwell4.

  Cloned my 3 GitHub reposes via

    $ mkdir devel; cd devel
    $ git clone git@github.com:grscheller/scheller-linux-archive
    $ git clone git@github.com:grscheller/dotfiles
    $ git clone git@github.com:grscheller/neovim-notes
    $ cd scheller-linux-archive

  and made above changes.

2021-11-16:
  Still need to do

  1. Fix the udev iwctl race condition
  2. Properly configure systemd-networkd
  3. Properly configure systemd-resolved

  but first want to install my user enviroment.

    $ cd ~/devel/dotfiles
    $ ./installDotfiles

  Logged out and back in as grs.  At first surprised I fell right into
  my configured bash environment.  Then realized that I don't have
  fish installed.  I'll stay with bash until later tonight.

  Now make nvim happy.

    $ bsPaq
    Cloning into  '/home/grs/.local/share/nvim/site/pack/paqs/start/paq-nvim'...
    ...
    $ nvim
    :paqSync
    :q
    $ nvim
    Error detected while processing /home/grs/.config/nvim/init.lua:
    No C compiler found! "cc", "gcc", "clang", "cl", "zig" are not executable.
    :q
    $ digpath cc gcc clang cl zig

    $

  We need to fix this.

    # pacman -Syu gcc clang

  Running ":checkhealth" from within nvim found more things to add.

    # pacman -Syu ripgrep fd
    # pacman -Syu nodejs npm npm-check-updates

  Brought in python-3.9.7-2

    # pacman -Syu pyright rust rust-analyzer    # see 2021-11-19 second entry
    # pacman -Syu xsel
    $ npm install neovim                # did not work
    # npm install -g neovim
    # pacman -Syu ruby rubygems

2021-11-17:
  Increaced number of parallel pacman downloads to 5.  Uncommented the line

    #ParallelDownloads = 5

  from /etc/pacman.conf

2021-11-17:
  Things to do,

  1. Install sudo
  2. Install fish shell
  3. Fix the udev iwctl race condition
  4. Properly configure systemd-networkd
  5. Properly configure systemd-resolved

  Installed the sudo package.

    # pacman -Syu sudo

  Used the visudo command to edit /etc/sudoers.  Enabled non-root users
  in the wheel group to use sudo without a password.  Tested with grs
  login successfully.

2021-11-18:
  Installed fish shell.

    $ sudo pacman -Syu fish

  Opps, no hostname command.

    (gauss17)$ pacman -Qo /usr/bin/hostname
    /usr/bin/hostname is owned by inetutils 2.2-1

    (gauss17)$ pacman -Flq inetutils
    etc/
    etc/pam.d/
    etc/pam.d/rlogin
    etc/pam.d/rsh
    etc/xinetd.d/
    etc/xinetd.d/rlogin
    etc/xinetd.d/rsh
    etc/xinetd.d/talk
    etc/xinetd.d/telnet
    usr/
    usr/bin/
    usr/bin/dnsdomainname
    usr/bin/ftp
    usr/bin/ftpd
    usr/bin/hostname
    usr/bin/rcp
    usr/bin/rlogin
    usr/bin/rlogind
    usr/bin/rsh
    usr/bin/rshd
    usr/bin/talk
    usr/bin/talkd
    usr/bin/telnet
    usr/bin/telnetd
    usr/lib/
    usr/lib/systemd/
    usr/lib/systemd/system/
    usr/lib/systemd/system/ftpd.service
    usr/lib/systemd/system/rlogin.socket
    usr/lib/systemd/system/rlogin@.service
    usr/lib/systemd/system/rsh.socket
    usr/lib/systemd/system/rsh@.service
    usr/lib/systemd/system/talk.service
    usr/lib/systemd/system/talk.socket
    usr/lib/systemd/system/telnet.socket
    usr/lib/systemd/system/telnet@.service
    usr/share/
    usr/share/info/
    usr/share/info/inetutils.info.gz
    usr/share/man/
    usr/share/man/man1/
    usr/share/man/man1/dnsdomainname.1.gz
    usr/share/man/man1/ftp.1.gz
    usr/share/man/man1/hostname.1.gz
    usr/share/man/man1/rcp.1.gz
    usr/share/man/man1/rlogin.1.gz
    usr/share/man/man1/rsh.1.gz
    usr/share/man/man1/talk.1.gz
    usr/share/man/man1/telnet.1.gz
    usr/share/man/man8/
    usr/share/man/man8/ftpd.8.gz
    usr/share/man/man8/rlogind.8.gz
    usr/share/man/man8/rshd.8.gz
    usr/share/man/man8/talkd.8.gz
    usr/share/man/man8/telnetd.8.gz

  Well, in 2021 hostname is the only one of these commands I would ever use.
  I would use OpenSSH equivalents or internet chat clients.

2021-11-19:
  In my dotfiles repo, I replaced the use of hostname with 'hostnamectl hostname'.
  For any non-systemd systems, I created a ~/bin/hostnamectl script which ignores
  its arguments and calls /bin/hostname.  Note that ~/bin is very late in my $PATH.

2021-11-19:
  Removed rust package and replaced it with rustup package.

    $ sudo pacman -Rsc rustc
    $ sudo pacman -Syu rustup rust-analyzer

2021-11-19:
  Changed user grs default shell to fish and installed man-db.

    $ sudo pacman -Syu man-db
    $ sudo usermod -s /usr/bin/fish grs

2021-11-19:
  Things to do, least I forget

  1. Install and configure Java
  2. Install Pipewire
  3. Fix the udev iwctl race condition
  4. Properly configure systemd-networkd
  5. Properly configure systemd-resolved

  Installing JDK and Java should be straight forward,
  archJDK configured into fish.

    $ sudo pacman -Syu jdk-openjdk jdk11-openjdk jdk8-openjdk jdk7-openjdk
    $ sudo pacman -Syu openjdk-doc openjdk11-doc openjdk8-doc openjdk7-doc

2021-11-20:
  WiFi routers keep giving maxwell4 consecutive IP addresses.  Let's fix this.

  Edited /etc/iwd/main.conf containing and commented out last line.

    [General]
    # uncomment for setting the wifi interface name yourself
    # see https://iwd.wiki.kernel.org/interface_lifecycle
    #UseDefaultInterface=true

    # enable builtin DHCP-client within iwd for wifi
    EnableNetworkConfiguration=true

    # randomizes mac-address every time iwd starts or the hardware is initially detected
    #AddressRandomization=once

  Check IP: 192.168.1.12
  Reboot.
  Check IP: 192.168.1.7
  Reboot.
  Check IP: 192.168.1.7

  When I travel, I might want to turn this random MAC address feature back on again.

2021-11-20:
  Lets install Pipewire.

  Currently on gauss17, pipewire-wise I have installed

    gst-plugin-pipewire  (gnome shell dependency)
    libpipewire02  (weston compositor dependency)
    pipewire
    pipewire-alsa  (ALSA configuration, gnome-shell dependency)
    pipewire-docs
    pipewire-jack  (JACK support)
    pipewire-media-session  (pipewire-jack, pipewire-alsa dependency)

  The last one seems to be an orphaned package.  I think it has been
  replaced by something called wireplumber.

    (gauss17)$ sudo pacman -S wireplumber
    resolving dependencies...
    looking for conflicting packages...
    :: wireplumber and pipewire-media-session are in conflict. \
       Remove pipewire-media-session? [y/N]

    (gauss17)$ $ pactree -r pipewire-jack
    pipewire-jack

  I don't see pipewire-pulse?

    (gauss17)$ sudo pacman -S pipewire-pulse
    resolving dependencies...
    looking for conflicting packages...
    :: pipewire-pulse and pulseaudio are in conflict. \
       Remove pulseaudio? [y/N]

  Opps, still running pulseaudio over on gauss17.

  Going for a minimalist install

    $ sudo pacman -Syu wireplumber wireplumber-docs pipewire-docs \
                   pipewire-jack pipewire-pulse
    :: Synchronizing package databases...
     core is up to date
     extra is up to date
     community is up to date
    :: Starting full system upgrade...
    resolving dependencies...
    looking for conflicting packages...

    Packages (27) alsa-card-profiles-1:0.3.40-1  alsa-lib-1.2.5.1-3
                  alsa-topology-conf-1.2.5.1-1  alsa-ucm-conf-1.2.5.1-1
                  bluez-libs-5.62-1  flac-1.3.3-3  libasyncns-0.8+3+g68cd5af-3
                  libfdk-aac-2.0.2-1  libfreeaptx-0.1.1-1  libldac-2.0.2.3-1
                  libogg-1.3.5-1  libpulse-15.0-1  libsndfile-1.0.31-1
                  libvorbis-1.3.7-2  lua-5.4.3-1  opus-1.3.1-2
                  pipewire-1:0.3.40-1  rtkit-0.13-1  sbc-1.5-2  speex-1.2.0-3
                  speexdsp-1.2.0-2  webrtc-audio-processing-0.3.1-3
                  pipewire-docs-1:0.3.40-1  pipewire-jack-1:0.3.40-1
                  pipewire-pulse-1:0.3.40-1  wireplumber-0.4.5-2
                  wireplumber-docs-0.4.5-2

    Total Download Size:   10.74 MiB
    Total Installed Size:  49.00 MiB

    :: Proceed with installation? [Y/n]
    ...

  Reboot.

  Lets see if I can get sound out.  See if it just works,

    $ sudo pacman -Syu vorbis-tools
    $ scp gauss17:Music/PopRock/Yes/Roundabout.ogg .
    $ ogg123 Roundabout.ogg 2>&1

    Audio Device:   Advanced Linux Sound Architecture (ALSA) output

         Playing: Roundabout.ogg
         Ogg Vorbis stream: 2 channel, 44100 Hz
         Title: Roundabout
         Artist: Yes
         Genre: Rock
         Date: 1972
     ALSA lib confmisc.c:855:(parse_card) cannot find card '0'
     ALSA lib conf.c:5111:(_snd_config_evaluate) function snd_func_card_inum returned error: No such file or directory
     ALSA lib confmisc.c:422:(snd_func_concat) error evaluating strings
     ALSA lib conf.c:5111:(_snd_config_evaluate) function snd_func_concat returned error: No such file or directory
     ALSA lib confmisc.c:1334:(snd_func_refer) error evaluating name
     ALSA lib conf.c:5111:(_snd_config_evaluate) function snd_func_refer returned error: No such file or directory
     ALSA lib conf.c:5599:(snd_config_expand) Evaluate error: No such file or directory
     ALSA lib pcm.c:2660:(snd_pcm_open_noupdate) Unknown PCM default
         ERROR: Cannot open device alsa.

  Last command was done from the console, not an ssh terminal session.

  I think I might know where the problem might lay.  Near the end
  of 2021-11-13 I noted error messages on the console after booting
  involving sof-audio-pci-intel-cn firmware missing.  Before I go
  down that rabbit hole, lets try something simpler.

    $ sudo pacman -Syu pipewire-alsa

  Reboot

    $ ogg123 Roundabout.ogg 2>&1

  Application freezes after 0.17 sec.  Have to use 'kill -9'
  to end it, 'kill -15' does not work.  No sound heard.

2021-11-20:
  Time to go down the audio driver rabbit hole.  Starting with
  a Duck-Duck-Go search: Arch Linux sof-audio-pci-intel-cn
  I am directed to the the Advanced Linux Sound Architecture wiki
  page.  (Probably where I should have started.)

  First install alsa-utils package.

    $ sudo pacman -Syu alsa-utils
    $ sudo pacman -Syu alsa-plugins
    $ sudo pacman -Syu tree

    $ alsa-info.sh
    ...
    !!Loaded ALSA modules
    !!-------------------



    !!Sound Servers on this system
    !!----------------------------

    PipeWire:
          Installed - Yes (/usr/bin/pipewire)
          Running - Yes

    No sound servers found.


    !!Soundcards recognised by ALSA
    !!-----------------------------

    --- no soundcards ---


    !!PCI Soundcards installed in the system
    !!--------------------------------------

    00:1f.3 Multimedia audio controller [0401]: Intel Corporation Comet Lake PCH-LP cAVS [8086:02c8]
            Subsystem: Dell Device [1028:0950]
    ...

  From the wiki, sof-firmware and alsa-ucm-conf are required by
  newer laptops.  Not sure if alsa-firmware package also required.

    $ sudo pacman -Syu sof-firmware alsa-ucm-conf alsa-firmware

  Let's do a reboot.

  From the console as a regular user,

    $ ogg123 Roundabout.ogg

  Application seems to be working from the console, but no sound.
  Probably just need to unmute.

    $ amixer sset Master unmute
    Simple mixer control 'Master',0
      Capabilities: pvolume pswitch pswitch-joined
      Playback channels: Front Left - Front Right
      Limits: Playback 0 - 65536
      Mono:
      Front Left: Playback 26213 [40%] [on]
      Front Right: Playback 26213 [40%] [on]

    $ amixer sset Speaker unmute
    amixer: Unable to find simple control 'Speaker',0

    $ amixer sset Headphone unmute
    amixer: Unable to find simple control 'Headphone',0

    $ ogg123 Roundabout.ogg

    Audio Device:   Advanced Linux Sound Architecture (ALSA) output

    Playing: Roundabout.ogg
    Ogg Vorbis stream: 2 channel, 44100 Hz
    Title: Roundabout
    Artist: Yes
    Genre: Rock
    Date: 1972
    Time: 00:27.94 [08:03.72] of 08:31.67  (202.2 kbps)  Output Buffer  77.8%

  It works!  Really nice sound from such small speakers.
  Works from both the console and an ssh termnal session.

2021-11-21:
  Things to do,

    1. Fix the udev iwctl race condition.
    2. Properly configure systemd-networkd.
    3. Properly configure systemd-resolved.
    4. Get Bluetooth working from console.
    5. Install desktop environment, probably gnome.

  Lets fix this race condition.  According to the website
  https://insanity.industries/post/racefree-iwd, iwd is so
  fast that it can bring up the wireless network before the
  udev dynanic device management daemon, systemd-udevd.services,
  can rename the network device to a more meaningful name than
  wlan0.  This network renaming can only happen when the network
  interface is down.  The alternative to iwd, wpa_supplicant,
  is much slower due to relying on many external libraries.
  The only things iwd typically relies on are kernel resources
  and the runtime C library.  See https://iwd.wiki.kernel.org.

  Currently,

    $ ip addr
    1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
        link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
        inet 127.0.0.1/8 scope host lo
           valid_lft forever preferred_lft forever
        inet6 ::1/128 scope host
           valid_lft forever preferred_lft forever
    3: wlan0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default qlen 1000
        link/ether 08:71:90:c3:bb:8a brd ff:ff:ff:ff:ff:ff
        inet 192.168.1.7/24 scope global noprefixroute wlan0
           valid_lft forever preferred_lft forever

      Now, to figure out the name udev would have named interface

    # station wlan0 disconnect
    # systemctl reboot

  Well, interface name still wlan0.

  Seems the problem was already fixed, from the  Arch wiki,
  https://wiki.archlinux.org/title/Iwd, since version 1.0,
  iwd disables predictable renaming of wireless device.  It
  installs a systemd network link configuration file to keep
  the original kernel name

    $ cat /usr/lib/systemd/network/80-iwd.link
    [Match]
    Type=wlan

    [Link]
    NamePolicy=keep kernel

  Note that

    # pacman -Qo /etc/iwd/main.conf
    error: No package owns /etc/iwd/main.conf
    # ls -l /etc/iwd/main.conf
    -rw-r--r-- 1 root root 443 Nov 20 02:43 /etc/iwd/main.conf

  I forgot, I created this file.

  Nothing to fix.

2021-11-22:
  Things todo,

    1. Properly configure systemd-networkd.
    2. Properly configure systemd-resolved.
    3. Get Bluetooth working from console.
    4. Install desktop environment, probably gnome.

  Will tackle #1 and #2 based on Arch wiki systemd-networkd
  and systemd-resolved pages.

  But first, for something I stumbled upon,

    $ systemctl --user --all --type=service
      UNIT                           LOAD      ACTIVE   SUB  DESCRIPTION
      dbus.service                   loaded    inactive dead D-Bus User Message Bus
      dirmngr.service                loaded    inactive dead GnuPG network certificate management daemon
      gpg-agent.service              loaded    inactive dead GnuPG cryptographic agent and passphrase cache
      p11-kit-server.service         loaded    inactive dead p11-kit server
    ● pipewire-media-session.service not-found inactive dead pipewire-media-session.service
      pipewire-pulse.service         loaded    inactive dead PipeWire PulseAudio
      pipewire.service               loaded    inactive dead PipeWire Multimedia Service
    ● pulseaudio.service             not-found inactive dead pulseaudio.service
      wireplumber.service            loaded    inactive dead Multimedia Service Session Manager

  Not sure if these "not-found" services are errors or not.  I can't
  disable them.

    $ systemctl --user disable pulseaudio.service
    Failed to disable unit: Unit file pulseaudio.service does not exist.

  They are things I removed via pacman.  I'll assume this is normal since
  without the --all I see disabled things like "syslog.service" and
  "display-manager.service".  On gauss17 I see "system76-power.service".

    $ systemctl --user disable syslog.service
    Failed to disable unit: Unit file syslog.service does not exist.

  Which never was installed.  I guess systemd (Arch?) is configuring
  everything but the kitchen sink.  Also, on maxwell4

    $ networkctl
    WARNING: systemd-networkd is not running, output will be incomplete.

    IDX LINK  TYPE     OPERATIONAL SETUP
      1 lo    loopback n/a         unmanaged
      3 wlan0 wlan     n/a         unmanaged

    2 links listed.

  Similarly on gauss17.

  Taking a break.  Don't want to rush this install by just
  throwing Gnome on and "fixing things."  I am learning
  too much.

2021-11-22:
  Install CLI configuration utility for wireless devices

    $ pacman -Syu iw

  Very powerful tool.

    $ iw help     # for documentation

    $ iw devices
    phy#0
            Unnamed/non-netdev interface
                    wdev 0x3
                    addr 08:71:90:c3:bb:8b
                    type P2P-device
                    txpower 0.00 dBm
            Interface wlan0
                    ifindex 3
                    wdev 0x2
                    addr 08:71:90:c3:bb:8a
                    ssid CC-Platform One
                    type managed
                    channel 56 (5280 MHz), width: 80 MHz, center1: 5290 MHz
                    txpower 21.00 dBm
                    multicast TXQ:
                            qsz-byt  qsz-pkt  flows    drops    marks    overlmt  hashcol  tx-bytes       tx-packets
                            0        0        0        0        0        0        0        0              0

    $ iw dev wlan0 link
    Connected to 6a:3a:0e:54:4c:4e (on wlan0)
            SSID: CC-Platform One
            freq: 5280
            RX: 529929 bytes (9285 packets)
            TX: 472991 bytes (1095 packets)
            signal: -61 dBm
            rx bitrate: 720.6 MBit/s 80MHz HE-MCS 7 HE-NSS 2 HE-GI 0 HE-DCM 0
            tx bitrate: 1134.2 MBit/s 80MHz HE-MCS 11 HE-NSS 2 HE-GI 1 HE-DCM 0

            bss flags:        short-slot-time
            dtim period:      1
            beacon int:       100

2021-11-23:
  Things todo,

    1. Properly configure systemd-networkd & systemd-resolved.
    2. Get Bluetooth working from console.
    3. Install desktop environment, probably not gnome.

  I want to go with systemd-networkd and don't want to have to fight
  with gnome packages regarding NetworkManager.  Also want to go
  with a more minimal desktop environment anyway.

  The systemd-networkd is a powerful tool capable of maintaining
  complicated networks.  I just need it to configure it to work with
  the wifi networks, perhaps random ones, I have to deal with.

  The systemd-networkd Arch wiki says to make sure that it is
  the only network management service running.  Does iwd.service
  count as a "network management service?"  From the idw Arch
  wiki: iwd can work in standalone mode or in combination with
        comprehensive network managers like ConnMan, systemd-networkd
        and NetworkManager

  Now, consider /etc/iwd/main.conf I created on 2021-11-14.

    $ pacman -Qo /etc/iwd/
    error: No package owns /etc/iwd/main.conf

  Based on the Arch iwd wiki, I changed it to

    [General]
    # uncomment for setting the wifi interface name yourself
    # see https://iwd.wiki.kernel.org/interface_lifecycle
    #UseDefaultInterface=true

    # enable builtin DHCP-client within iwd for wifi
    EnableNetworkConfiguration=true

    # randomize mac-address every time iwd starts or the hardware is initially detected
    #AddressRandomization=once

    [Network]
    EnableIPv6=true
    NameResolvingService=systemd

  Commented out my /etc/resolv.conf hack

    # Resolver configuration file.
    # See resolv.conf(5) for details.
    # Edited by grscheller
    # nameserver 1.1.1.1

  Well, the following from the Arch systemd-resolved wiki actually
  blows the above file away.

    $ sudo ln -sf /run/systemd/resolve/stub-resolve.conf /etc/resolv.conf

  I am going to use are the systemd-networkd and systemd-resolved
  services and the resolvconf command from the systemd-resolvconf
  package.

  The first two come with systemd

    $ pacman -Flq systemd | grep -E '(resolved|networkd)\.conf'
    etc/systemd/networkd.conf
    etc/systemd/resolved.conf
    usr/share/man/man5/networkd.conf.5.gz
    usr/share/man/man5/networkd.conf.d.5.gz
    usr/share/man/man5/resolved.conf.5.gz
    usr/share/man/man5/resolved.conf.d.5.gz

  and the third one has its own package

    $ pacman -Ss systemd-resolvconf
    core/systemd-resolvconf 249.7-1
        systemd resolvconf replacement (for use with systemd-resolved)

  which I need to install.  Opps, have to bring /etc/resolv.conf back
  temporarily for pacman to work.

    $ sudo rm /etc/resolve.conf
    # echo nameserver 1.1.1.1 > /etc/resolv.conf
    # pacman -Syu systemd-resolvconf
    # ln -sf /run/systemd/resolve/stub-resolve.conf /etc/resolv.conf

  Now enable the services.

    # systemctl enable systemd-networkd
    # systemctl enable systemd-resolved

  Reboot.

    $ ip address show
    1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
        link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
        inet 127.0.0.1/8 scope host lo
           valid_lft forever preferred_lft forever
        inet6 ::1/128 scope host
           valid_lft forever preferred_lft forever
    3: wlan0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default qlen 1000
        link/ether 08:71:90:c3:bb:8a brd ff:ff:ff:ff:ff:ff
        inet 10.100.45.248/24 scope global noprefixroute wlan0
           valid_lft forever preferred_lft forever
        inet6 fe80::a71:90ff:fec3:bb8a/64 scope link
           valid_lft forever preferred_lft forever

  Success!!!

2021-11-23:
  I have a slight localization problem.

    $ man ln
    man: can't set the locale; make sure $LC_* and $LANG are correct

    $ env | grep -E '(LANG|LC_)'
    LANG=en_US.UTF-8

    $ locale
    locale: Cannot set LC_CTYPE to default locale: No such file or directory
    locale: Cannot set LC_MESSAGES to default locale: No such file or directory
    locale: Cannot set LC_ALL to default locale: No such file or directory
    LANG=en_US.UTF-8
    LC_CTYPE="en_US.UTF-8"
    LC_NUMERIC="en_US.UTF-8"
    LC_TIME="en_US.UTF-8"
    LC_COLLATE="en_US.UTF-8"
    LC_MONETARY="en_US.UTF-8"
    LC_MESSAGES="en_US.UTF-8"
    LC_PAPER="en_US.UTF-8"
    LC_NAME="en_US.UTF-8"
    LC_ADDRESS="en_US.UTF-8"
    LC_TELEPHONE="en_US.UTF-8"
    LC_MEASUREMENT="en_US.UTF-8"
    LC_IDENTIFICATION="en_US.UTF-8"
    LC_ALL=

    $ sudo localectl list-locales
    <nothing>

    # cat /etc/locale.conf
    LANG=en_US.UTF-8

  Nothing uncommented in /etc/locale.gen, uncommenting the line

    #en_US.UTF-8 UTF-8

  Now generate the locale.

    # locale-gen
    Generating locales...
      en_US.UTF-8... done

    # man ln
    #

    $ locale
    LANG=en_US.UTF-8
    LC_CTYPE="en_US.UTF-8"
    LC_NUMERIC="en_US.UTF-8"
    LC_TIME="en_US.UTF-8"
    LC_COLLATE="en_US.UTF-8"
    LC_MONETARY="en_US.UTF-8"
    LC_MESSAGES="en_US.UTF-8"
    LC_PAPER="en_US.UTF-8"
    LC_NAME="en_US.UTF-8"
    LC_ADDRESS="en_US.UTF-8"
    LC_TELEPHONE="en_US.UTF-8"
    LC_MEASUREMENT="en_US.UTF-8"
    LC_IDENTIFICATION="en_US.UTF-8"
    LC_ALL=

  I think this fixed the problem.

2021-11-23:
  Things todo,

    1. Get Bluetooth working from console
    2. Install gnome

  I need this system for work and I got Python & Rust stuff
  to learn.  I know Gnome and maybe later I will see if I can
  get another desktop to work on gauss17.

  A dry run of pacman does not drag in NetworkManager.

2021-11-24:
  Get bluetooth working.  Following the Bluetooth Arch Wiki.

    $ lsmod|grep btusb
    btusb                  65536  0
    btrtl                  28672  1 btusb
    btbcm                  24576  1 btusb
    btintel                45056  1 btusb
    bluetooth             749568  5 btrtl,btintel,btbcm,btusb

  Kernal divers are in place.  Get software.

    $ sudo pacman -Syu bluez bluez-utils

  Enable and start the service.

    $ sudo systemctl enable bluetooth.services
    $ sudo systemctl start bluetooth.service

  Docs are man:bluetoothd(8)

  For sharing an internet connection via bluetooth tethering,
  user needs to be a member of the lp group.  Otherwise user
  does not need to be a member of this group.

  CLI is called bluetoothctl.  To list possible commands

    $ bluetoothctl --help

  for interactive sessions

    $ bluetoothctl
    [bluetooth]# help

  To pair a device (from Arch wiki):

   -1. List bluetooth conrollers:            list
    0. Select or change default controller:  select <MAC-Adress>
    1. Turn power on:                        power on
    2. List previously paired device:        devices
    3. Scan for devices (discovery mode):    scan on
    4. Turn scan off:                        scan off
    5. Turn default agent on:                agent on
    6. Pair device:                          pair AC:XX:XX:XX:XX:AE
    7. Trust device:                         trust AC:XX:XX:XX:XX:AE

  Something overly aggressive in my apartment complex
  is competing for my bluetooth headset.  Had to do it
  from the computer side

    8. Make controller pairable:             pairable on
    9. Make controller unpairable:           pairable off

  Was able to pair with my Tribit XFree Tune headset.  A little
  distortion at times, but definately OK for Zoom meetings.

  On reboot, had to use bluetoothctl to turn power on, but
  after that maxwell4 connected without my intervention.

  Gnome bluetooth tools:

    gnome-bluetooth:          provides back end
    gnome-shell:              provides status monitor
    gnome-control-center:     configuration front end GUI
    nautilus-bluetooth(AUR):  Adds "Send via Bluetooth" to right-click menu

  Other GUI frontends:
    Bluedevil for KDE
    Blueberry for Linux Mint
    Blueman is a full featured Bluetooth manager
    ObexFTP is a tool for transfering files to/from OBEX enabled devices

  Note: Bluetooth or WiFi may be blocked.  If hard blocked, use
  appropriate function key or switch.  If soft blocked, use the
  rfkill command.

2021-11-24:
  Will install Gnome today.  Following the Gnome Arch Linux Wiki.

    $ sudo pacman -Syu gnome gnome-extra

  Choose all packages in package groups, second one includes gnome-tweaks.
  Other choices during installation:

    noto-fonts-emoji  (default)
    noto-fonts (2nd choice, default was gnu-free-fonts)

  633 packages, 590 MiB, nothing with the work Wayland in it.

  Enable Gnome Display Manager GDM.

    $ sudo systemctl enable gdm.service

  Reboot.

  Logged into Gnome session fine.  Gnome version 41.1.

  Switched to dark theme in settings.  Launched Gnome Tweaks.

  Set Fonts:
    Interface Text         Noto Sans Medium
    Document Text          Noto Sans Regular
    Monospace Text         Noto Sans Mono Regular
    Legacy Window Titles   Noto Sans Bold

  I can live with this font in Gnome Terminal.  Well, in Neovim
  the Tokyo Night theme is gorgeous.  In Fish, just OK.  Does
  not matter, I should have Alacritty installed before the end
  of the day.

  According to Settings, the graphics chip set I am running off of
  is the Mesa Intel UHD Graphics (CML GT2).  Since it is a work
  computer, maybe I will just not mess with the Nvidia chip set.

    $ lsmod | egrep -i '(nvidia|nouveau)'
    nouveau              2768896  0
    mxm_wmi                16384  1 nouveau
    drm_ttm_helper         16384  1 nouveau
    ttm                    86016  3 drm_ttm_helper,i915,nouveau
    wmi                    45056  8 dell_wmi_sysman,intel_wmi_thunderbolt,dell_wmi,wmi_bmof,dell_smbios,dell_wmi_descriptor,mxm_wmi,nouveau
    video                  57344  4 dell_wmi,dell_laptop,i915,nouveau

  Well, at least I am not "tainting" my kernel.

    $ ls /dev/dri
    by-path  card0  card1  renderD128  renderD129

  The kernel sees both video cards, only using the nouveau drivers.

  Touch screen display works flawlessly.  So does my USB dongle
  mouse.

2021-11-24:
  Getting Wayland to work. GDM is giving me Wayland and XOrg
  choices but I think only XOrg version ever runs.  Lets check.

  Reboot and choose just Gnome.

    $ echo $WAYLAND_DISPLAY
    wayland-0

    $ echo $XDG_SESSION_TYPE
    wayland

    $ ps -ef | grep -i wayland | grep -v grep
    grs          871     847  0 13:34 tty2     00:00:00 \
        /usr/lib/gdm-wayland-session /usr/bin/gnome-session
    grs         1694     943  0 13:42 ?        00:00:00         \
        /usr/bin/Xwayland :0 -rootless -noreset -accessx        \
        -core -auth /run/user/1000/.mutter-Xwaylandauth.WX38C1  \
        -listenfd 4 -listenfd 5 -displayfd 6 -initfd 7

  Yes! We are running Wayland!

2021-11-25:
  Installed alacritty.

    sudo pacman -Syu alactritty

  Also, used gnome-settings to configure "Super+T" to launch
  alacritty.

  Able to launch from fish or bash via each's tm shell function,
  but failing the above keyboard shortcut.

  Alacritty also not playing nice with the Dash.

  Figured it out. Due to iMac at work having fish installed
  via a symlink /usr/local/bin/fish, I have to configure
  alacritty in ~/.config/alacritty/alacritty.yml to look for
  fish there.  Therefore on Arch I have to do

    # ln -s /usr/bin/fish /usr/local/bin
    # ls -l /usr/local/bin
    lrwxrwxrwx 1 root root 13 Nov 25 00:52 fish -> /usr/bin/fish

  With this symlink, everything works fine.  I also used the
  "Launch new instance" extension to modify Gnome Dash behavior
  to open a new instance when an icon is left clicked.  90% of
  the time that is what I want.

2021-11-25:
  Installed the gpaste package which includes a gpaste
  Gnome Shell Extension.

    $ pacman -Syu gpaste

  Had to reboot system before the Extensions App saw the
  GPaste@gnome-shell-extensions.gnome.org extension allowing
  me to turn it on.

  For whatever it is worth, there is a gnome-extensions CLI
  tool with similar functionality to the Extension App.

  This extension is very similar to the XFCE Clipman clipboard
  manager.

2021-11-27:
  maxwell4 has been putting itself in low power state.  When
  awakened,

    $ getent hosts www.github.com
    ^C⏎

    $ sudo systemctl restart systemd-networkd

    $ getent hosts www.github.com
    140.82.113.4    github.com

  While investigaing this, stumbled on how I could do
  proper hibernation.  From Arch wiki Power Management
  and mkinitcpio pages.

  Add "resume" to the following line in /etc/mkinitcpio.conf.

    HOOKS=(base udev autodetect modconf block resume filesystems keyboard fsck)

  Added "resume=/dev/nvme0n1p2" to options line in /boot/loader/entries/arch.conf

    title   Arch Linux
    linux   /vmlinuz-linux
    initrd  /intel-ucode.img
    initrd  /initramfs-linux.img
    #options root=PARTUUID=3038000f-4be8-4960-a020-74227b73b7d0 rootfstype=ext4 add_efi_memmap
    options root=/dev/nvme0n1p3 rootfstype=ext4 add_efi_memmap resume=/dev/nvme0n1p2

  Finally

    $ sudo mkinitcpio -P

  Reboot.

  Both

    $ systemctl suspend
    $ systemctl hibernate

  work.  With both I still need to restart systemd-networkd.service.
  Actually, this might be desirable.  The networking environment may
  change radically on a hybernate.  I'll create a fish abbr to restart
  this service in my dotfiles repo.

  This is the first time with Linux that I got the hibernate feature
  to work.

  For my user's Gnome session, I turned off automatic suspend when
  plugged in.  Screen blank never.  When on battery, suspends after
  20 minutes of "desktop user inactivity."  Power button will hibernate
  the system.  Changed Power Mode from Balanaced to Performance.

  This means if I want to use this laptop like a server, or an
  ssh login host, I'll need to have a Gnome session going.

  There should be a less "Gnome-centic" way to do this?

2021-11-29:
  Time to do some configuration for work.

  Install Zoom client.

    $ git clone https://aur.archlinux.org/zoom.git
    $ cd zoom
    $ makepkg -sri
    ==> Making package: zoom 5.8.6-1 (Mon 29 Nov 2021 01:08:58 PM MST)
    ==> Checking runtime dependencies...
    ==> Installing missing dependencies...
    resolving dependencies...
    looking for conflicting packages...

    Packages (3) ibus-1.5.25-3  xcb-util-image-0.4.0-3
                 xcb-util-keysyms-0.4.0-3

    Total Download Size:   0.83 MiB
    Total Installed Size:  7.66 MiB

    :: Proceed with installation? [Y/n]
    :: Retrieving packages...
    ...
    ==> Checking buildtime dependencies...
    ==> Retrieving sources...
      -> Downloading zoom-5.8.6.739_orig_x86_64.pkg.tar.xz...`
    ...
    ==> Validating source files with sha512sums...
    zoom-5.8.6.739_orig_x86_64.pkg.tar.xz ... Passed
    ==> Extracting sources...
      -> Extracting zoom-5.8.6.739_orig_x86_64.pkg.tar.xz with bsdtar
    ==> Starting prepare()...
    ==> Entering fakeroot environment...
    ==> Starting package()...
    ==> Tidying install...
      -> Removing libtool files...
      -> Purging unwanted files...
      -> Removing static library files...
      -> Compressing man and info pages...
    ==> Checking for packaging issues...
    ==> Creating package "zoom"...
      -> Generating .PKGINFO file...
      -> Generating .BUILDINFO file...
      -> Generating .MTREE file...
      -> Compressing package...
    ==> Leaving fakeroot environment.
    ==> Finished making: zoom 5.8.6-1 (Mon 29 Nov 2021 01:09:30 PM MST)
    ==> Installing package zoom with pacman -U...
    loading packages...
    resolving dependencies...
    looking for conflicting packages...

    Packages (1) zoom-5.8.6-1

    Total Installed Size:  219.46 MiB
    ...
    :: Proceed with installation? [Y/n]
    (1/1) checking keys in keyring                     [###########] 100%
    (1/1) checking package integrity                   [###########] 100%
    (1/1) loading package files                        [###########] 100%
    (1/1) checking for file conflicts                  [###########] 100%
    (1/1) checking available disk space                [###########] 100%
    :: Processing package changes...
    (1/1) installing zoom                              [###########] 100%
    Optional dependencies for zoom
        pulseaudio-alsa: audio via PulseAudio [installed]
        qt5-webengine: SSO login support
        picom: extra compositor needed by some window managers for screen
        sharing
        xcompmgr: extra compositor needed by some window managers for
        screen sharing
    :: Running post-transaction hooks...
    (1/3) Arming ConditionNeedsUpdate...
    (2/3) Updating the desktop file MIME type cache...
    (3/3) Updating the MIME type database...
    ...

    $ sudo pacman -Syu qt5-webengine

  Reboot.  Network a mess, can't seem to fix.
  Reboot.  Network works, Zoom works.

2021-11-29:
  From GNOME website,

    https://gitlab.gnome.org/GNOME/gnome-shell/-/issues/3419

  the GNOME developers have no intention of enabling the network tray
  icon to use anything other than Network Manager soon, "unless we
  expect it to replace NetworkManager eventually, we are not going
  to add support."  

  Currently I use iwctl to connect to a wireless network.  Once
  this is done, systemd-networkd.service is able to reconfigure
  the system over reboots even after location changes.  When system
  suspends or hibernates, this service needs restarting.

2021-11-29:
  Noticed while doing a :checkhealth for Neovim,

    ## Checking language server protocol configuration
      - ERROR: html: The given command \
        "vscode-html-language-server" is not executable.

  Let's install this language server and two other
  related ones.

    $ sudo pacman -Syu vscode-{html,css,json}-languageserver
  
  Got installed by a slightly different names.

    $ digpath 'vscode*'
    /usr/bin/vscode-css-languageserver
    /usr/bin/vscode-html-languageserver
    /usr/bin/vscode-json-languageserver

    $ for mm in vscode-{css,html,json}-language
          sudo ln -s /usr/bin/{$mm}server /usr/local/bin/$mm-server
      end

    $ ll /usr/local/bin
    total 0
    lrwxrwxrwx 1 root root 13 Nov 25 00:52 fish -> /usr/bin/fish
    lrwxrwxrwx 1 root root 34 Nov 29 20:07 vscode-css-language-server -> /usr/bin/vscode-css-languageserver
    lrwxrwxrwx 1 root root 35 Nov 29 20:07 vscode-html-language-server -> /usr/bin/vscode-html-languageserver
    lrwxrwxrwx 1 root root 35 Nov 29 20:07 vscode-json-language-server -> /usr/bin/vscode-json-languageserver

  Might as well fix nvim's python provider problem too.

    $ sudo pacman -Syu python-pynvim

  The only remaining Neovim :checkhealth errors are for
  Python-2 and Perl.  Still getting a neovim-ruby-host warning
  which I will take care of along with installing markdown language server.

    $ gem install neovim
    $ gem install mdl

  Had to install GNU make for first build to succeed.

2021-12-01:
  Tried to use Scala Metals in nvim.  Need Coursier.  In the AUR.

    $ cd ~/build/
    $ git clone https://aur.archlinux.org/coursier.git
    $ cd coursier
    $ makepkg -sri
    $ digpath coursier
    /usr/bin/coursier

  Now nvim finds coursier.  From within nvim,

    [nvim-metals] Welcome to nvim-metals!
    [nvim-metals] It looks like you don't have Metals installed yet.
    [nvim-metals]
    [nvim-metals] You can do this using `:MetalsInstall`.
    [nvim-metals]
    [nvim-metals] If you need to set a specific version, you can use `g:metals_server_version`.
    Press ENTER or type command to continue
    :MetalsInstall
    [nvim-metals] Metals installed! Start/Restart the server, and have fun coding Scala!

  I getting a little rusty with Scala and Metals, but Neovim seems to
  work well as a Scala IDE.

2021-12-04:

  System crashed.  Will not boot.

  Earlier this week, while up and logged in, maxwell4
  made a loud beap.  When I got around to check, its was
  sitting at a bios prompt complaining it could not
  find an OS to boot.

  Not sure if I should try and fix or just start over.

2021-12-04:

  I am doing a fresh install of Arch but renaming the
  system euler7.  I suspect something went wrong with
  a system suspend or hibernation.  Not sure, see
  adminLogs/euler7ArchLinuxAdmin.log for details.

  RIP maxwell4.

