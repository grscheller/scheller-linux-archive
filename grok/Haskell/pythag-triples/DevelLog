# Develoment Log

Notes taken while implementing a Pythagorean Triple
generation program in Haskell.

A Pythagoean Triple is a tuple (a,b,c) such that a^2 + b^2 = c^2.
This project is to write a program to generate all possible
pythagorean triples such that gcd(a,b,c) = 1 and a, b, c > 0.

These notes are more about how to use Haskell's toolchains as well
as my attempts to understand/reverse engineer what is going on.

2016-10-16:
  Used stack to create boilerplate fo the project:

    $ stack new pythagTriples new-template -p "category:Example"
    Downloading template "new-template" to create project "pythagTriples" in pythagTriples/ ...
    Looking for .cabal or package.yaml files to use to init the project.
    Using cabal packages:
    - pythagTriples/pythagTriples.cabal

    Selecting the best among 9 snapshots...

    * Matches lts-7.4

    Selected resolver: lts-7.4
    Initialising configuration using resolver: lts-7.4
    Total number of user packages considered: 1
    Writing configuration to file: pythagTriples/stack.yaml
    All done.

  The files created were:

    LICENSE
    pythagTriples.cabal
    Setup.hs
    stack.yaml
    app/Main.hs
    src/Lib.hs
    test/Spec.hs

2016-10-16:
    Created this develLog.readme file to document development
    efforts for this project.

    Created a .gitignore file based on what was recommended
    by Chris Allen in 'https://www.howistart.org/posts/haskell/1'.

      $ cat .gitignore
      dist
      dist-*
      cabal-dev
      *.o
      *.hi
      *.chi
      *.chs.h
      *.dyn_o
      *.dyn_hi
      .hpc
      .hsenv
      .cabal-sandbox/
      cabal.sandbox.config
      *.prof
      *.aux
      *.hp
      *.eventlog
      .stack-work/
      *.swp

  The last item, *.swp, was added by me since I usually use the
  editor vi, stack commands, and stack ghci running in multiple
  terminal emulators as my IDE.

  Finally, initialize a local GIT repo for the project.

    $ git init
    $ git add LICENSE pythagTriples.cabal Setup.hs stack.yaml
    $ git add app/Main.hs src/Lib.hs test/Spec.hs
    $ git add develLog.readme
    $ git add .gitignore

2016-10-16:
  Build something.

    $ git status
    On branch master
    nothing to commit, working tree clean

    $ stack build
    pythagTriples-0.1.0.0: configure
    Configuring pythagTriples-0.1.0.0...
    pythagTriples-0.1.0.0: build
    Preprocessing library pythagTriples-0.1.0.0...
    [1 of 1] Compiling Lib              ( src/Lib.hs, .stack-work/dist/x86_64-linux-ncurses6/Cabal-1.24.0.0/build/Lib.o )
    Preprocessing executable 'pythagTriples-exe' for pythagTriples-0.1.0.0...
    [1 of 1] Compiling Main             ( app/Main.hs, .stack-work/dist/x86_64-linux-ncurses6/Cabal-1.24.0.0/build/pythagTriples-exe/pythagTriples-exe-tmp/Main.o )
    Linking .stack-work/dist/x86_64-linux-ncurses6/Cabal-1.24.0.0/build/pythagTriples-exe/pythagTriples-exe ...
    pythagTriples-0.1.0.0: copy/register
    Installing library in
    /home/geoff/devel/learn/learnHaskell/pythagTriples/.stack-work/install/x86_64-linux-ncurses6/lts-7.4/8.0.1/lib/x86_64-linux-ghc-8.0.1/pythagTriples-0.1.0.0-EnHpQZMptv6AvrGgRBF8hR
    Installing executable(s) in
    /home/geoff/devel/learn/learnHaskell/pythagTriples/.stack-work/install/x86_64-linux-ncurses6/lts-7.4/8.0.1/bin
    Registering pythagTriples-0.1.0.0...

  Now, lets test if .gitignore file did its job:

    $ git status
    On branch master
    nothing to commit, working tree clean

2016-10-16:
  Lets test the boilerplate code:

    $ stack exec pythagTriples
    Executable named pythagTriples not found on path: [<snip>]

  So, nobody home???

    $ find . -name 'pythagT*' -executable \! -type d
    ./.stack-work/dist/x86_64-linux-ncurses6/Cabal-1.24.0.0/build/pythagTriples-exe/pythagTriples-exe
    ./.stack-work/install/x86_64-linux-ncurses6/lts-7.4/8.0.1/bin/pythagTriples-exe

  Now test it:

    $ stack exec pythagTriples-exe
    someFunc

  OK, boilerplate works.

  Aside:  I could also have used my "whence" command to
          find the executable:

      $ stack exec whence 'pythagT*'
      /home/geoff/devel/learn/learnHaskell/pythagTriples/.stack-work/install/x86_64-linux-ncurses6/lts-7.4/8.0.1/bin/pythagTriples-exe
      ./pythagTriples.cabal

    Or just looked at the output of the stack build command.

    There is also "stack path" command, contains lots of info.

      $ stack path
      stack-root: /home/geoff/.stack
      project-root: /home/geoff/devel/learn/learnHaskell/pythagTriples
      config-location: /home/geoff/devel/learn/learnHaskell/pythagTriples/stack.yaml
      bin-path: /home/geoff/.stack/snapshots/x86_64-linux-ncurses6/lts-7.4/8.0.1/bin:/home/geoff/.stack/programs/x86_64-linux/ghc-ncurses6-8.0.1/bin:/home/geoff/.local/bin:/home/geoff/opt/anaconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/bin:/usr/lib/jvm/default/bin:/usr/bin/site_perl:/usr/bin/vendor_perl:/usr/bin/core_perl:/home/geoff/local/bin:/home/geoff/local/share/perl6/site/bin:/home/geoff/bin:.
      programs: /home/geoff/.stack/programs/x86_64-linux
      compiler-exe: /home/geoff/.stack/programs/x86_64-linux/ghc-ncurses6-8.0.1/bin/ghc
      compiler-bin: /home/geoff/.stack/programs/x86_64-linux/ghc-ncurses6-8.0.1/bin
      local-bin: /home/geoff/.local/bin
      extra-include-dirs: 
      extra-library-dirs: 
      snapshot-pkg-db: /home/geoff/.stack/snapshots/x86_64-linux-ncurses6/lts-7.4/8.0.1/pkgdb
      local-pkg-db: /home/geoff/devel/learn/learnHaskell/pythagTriples/.stack-work/install/x86_64-linux-ncurses6/lts-7.4/8.0.1/pkgdb
      global-pkg-db: /home/geoff/.stack/programs/x86_64-linux/ghc-ncurses6-8.0.1/lib/ghc-8.0.1/package.conf.d
      ghc-package-path: /home/geoff/devel/learn/learnHaskell/pythagTriples/.stack-work/install/x86_64-linux-ncurses6/lts-7.4/8.0.1/pkgdb:/home/geoff/.stack/snapshots/x86_64-linux-ncurses6/lts-7.4/8.0.1/pkgdb:/home/geoff/.stack/programs/x86_64-linux/ghc-ncurses6-8.0.1/lib/ghc-8.0.1/package.conf.d
      snapshot-install-root: /home/geoff/.stack/snapshots/x86_64-linux-ncurses6/lts-7.4/8.0.1
      local-install-root: /home/geoff/devel/learn/learnHaskell/pythagTriples/.stack-work/install/x86_64-linux-ncurses6/lts-7.4/8.0.1
      snapshot-doc-root: /home/geoff/.stack/snapshots/x86_64-linux-ncurses6/lts-7.4/8.0.1/doc
      local-doc-root: /home/geoff/devel/learn/learnHaskell/pythagTriples/.stack-work/install/x86_64-linux-ncurses6/lts-7.4/8.0.1/doc
      dist-dir: .stack-work/dist/x86_64-linux-ncurses6/Cabal-1.24.0.0
      local-hpc-root: /home/geoff/devel/learn/learnHaskell/pythagTriples/.stack-work/install/x86_64-linux-ncurses6/lts-7.4/8.0.1/hpc
      local-bin-path: /home/geoff/.local/bin
      ghc-paths: /home/geoff/.stack/programs/x86_64-linux

    Or even more simply, use my path command:

      $ stack exec path
      /home/geoff/devel/learn/learnHaskell/pythagTriples/.stack-work/install/x86_64-linux-ncurses6/lts-7.4/8.0.1/bin
      /home/geoff/.stack/snapshots/x86_64-linux-ncurses6/lts-7.4/8.0.1/bin
      /home/geoff/.stack/programs/x86_64-linux/ghc-ncurses6-8.0.1/bin
      /home/geoff/.local/bin
      /home/geoff/opt/anaconda3/bin
      /usr/local/sbin
      /usr/local/bin
      /usr/bin
      /usr/lib/jvm/default/bin
      /usr/bin/site_perl
      /usr/bin/vendor_perl
      /usr/bin/core_perl
      /home/geoff/local/bin
      /home/geoff/local/share/perl6/site/bin
      /home/geoff/bin
  
    Which is easier to read than

     $ stack exec -- bash -c 'echo $PATH'
     /home/geoff/devel/learn/learnHaskell/pythagTriples/.stack-work/install/x86_64-linux-ncurses6/lts-7.4/8.0.1/bin:/home/geoff/.stack/snapshots/x86_64-linux-ncurses6/lts-7.4/8.0.1/bin:/home/geoff/.stack/programs/x86_64-linux/ghc-ncurses6-8.0.1/bin:/home/geoff/.local/bin:/home/geoff/opt/anaconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/bin:/usr/lib/jvm/default/bin:/usr/bin/site_perl:/usr/bin/vendor_perl:/usr/bin/core_perl:/home/geoff/local/bin:/home/geoff/local/share/perl6/site/bin:/home/geoff/bin:.

    The '--' is needed otherwise stack thinks I am sending
    its exec command a -c option.

2016-10-16:
  By editting the pythagTriples.cabal file, got rid of the 
  "-exe", generated command is now pythagTriples.  The command
  works outside of the stack build environment.

  Note: "stack clean" does not remove previously built executables.

2016-10-19:
  Minor refactoring.

  Changed module Lib -> PythagTriples
  pythagTriples now a "Hello World" program.
  Test suite now prints message and runs program.

    $ stack exec pythagTriples
    Hello World

    $ stack test
    pythagTriples-0.1.0.0: test (suite: pythagTriples-test)


    Just run command(test suite not yet implemented):
    Hello World

2016-10-22:
  Finished implementing pathagTriple "app" and library implements
  two pathagorean triple algorithms, one fast, one which will
  generate them in lexiconical order.

  Still to do:
    1. Describe algorithms.
    2. Implement tests to ensure fast version is complete and
       characterize its output.

2016-10-24:
  Added a -fo ordered option to the "app".  Also a -h help option.

2016-10-29:
  More realistic test suite.  Changed -fo option to -fs
  for "fast sorted."

2017-01-28:
  Create README.md for the GitHub repo.  Moved design consideration
  info formally here to there.

2017-09-23:
  In `stack.yaml`:
    Updated resolver from lts-7.18 to lts-9.5.

  In `pythagTriples.cabal`:
    Changed Licence from BSD3 to MIT.
    Updated version to 0.2.0.0 due to license change.
    Added -dynamic to gch-options

2017-10-27:
  In LICENSE file, I noticed that the text was still that of BSD3.
  Changed the text to that of an MIT license.

  In `stack.yaml` file, changed Resolver from lts-9.5 to ghc-8.2.1
  to test if stack will use the locally installed ghc installed on
  my Arch Linux system instead of downloading and installing it locally.

2017-10-28:
  Stack still snubs the Arch Linux ghc-8.2.1 version and stubbornly
  downloads a local copy of ghc-8.2.1.

  Version it downloaded was ghc-tinfo6-nopie-8.2.1.  The references to
  "nopie" may indicate that the problem may be related to Arch Linux
  ncurses-6 incompatibility issues.  The same issues that broke SBT
  for a while.  I'll just use the locally installed version for now
  since my use case is just to learn ghc and stack.

    $ stack install
    ...
    $ stack clean
    $ stack build
    ...
    $ stack exec -- pythagTriples -o 5
    (3,4,5)
    (5,12,13)
    (7,24,25)
    (8,15,17)
    (9,40,41)

2020-04-03:
  Replace use of show with showTriple in

    printTriples :: [Triple] -> IO()
    printTriples triples = mapM_ putStrLn (map showTriple triples)

  where

    showTriple = (intercalate ", ").(splitOn ",").show

  these come from

    Data.List.intercalate
    Data.List.Split.splitOn

  I did that so output matches the output of my Python
  version.  This helps allows me to benchmark and compare the
  output between them.

2020-04-03:
  When building with stack, could not find Data.List.Split module.
  Maybe something new?  Try upgrading from ghc-8.2.1 to ghc-8.8.3.

  In stack.yaml, set

    resolver: ghc-8.8.3

  Still not finding it.  Let's see I can build it with the ghc
  which is  native to Arch Linux:

    $ cd ~/devel/scheller-linux-archive/grok/Haskell/pythagTriples/src
    $ ghc -Wall -dynamic PythagTriples.hs
    $ cp ../app/Main.hs pythagTriple.hs
    $ ghc -Wall -dynamic pythagTriple.hs
    $ ./pythagTriple -o 5
    (3, 4, 5)
    (5, 12, 13)
    (7, 24, 25)
    (8, 15, 17)
    (9, 40, 41)

2020-04-04:
  Took a while to get it to build via stack, so I'll skip over the
  dead ends.

  1. Added split to the library build-depends in the
     pythagTriples.cabal file.
  2. Build failed, but stack suggested I add to the extra-deps
     section of the stack.yaml file the same version of split
     that pacman installed on Arch.  This suggestion also included
     information on the sha256 checksum of the split package.
  3. Now stack build suceeded.  A file called stack.yaml.lock was
     created.
  4. The "stack exec -- pythagTriples -o 100" also worked.
  5. Repeated above but without the sha256 info.  Lock file was
     still created and contained info on split version I indicated in
     stack.yaml as well as the sha256 checksum that was used in
     the build.
  6. Best proctices is to include stack.yaml.lock in the GIT repo.
     This info helps others obtain a more consistant build.

  Note: Adding info to just the stack.yaml file did not trigger
        stack to be helpful like it did above, 

2020-04-11:
  One should use the package.yaml file to create the
  pythagTriple.cabal via stack.  Also could use the hpack
  utility directly if I wanted to generate it without
  stack if using cabal directly.

  Bootstrapped the project with package.yaml via stack.

    $ rm stack.yaml stack.yaml.lock pythagTriples.cabal Setup.hs
    $ stack init
    $ stack build
    $ stack run -- -o2 5
    (3, 4, 5)
    (5, 12, 13)
    (8, 15, 17)
    (20, 21, 29)
    (7, 24, 25)

  Curiously, stack init did not generate a Setup.hs file.

2020-04-13:
  Changing package PythagTriples to pythag-triples with
  the PythagTriple module and pythagTriple executable.

  Seems that snake-case-names for packages are more the
  Haskell social norm.  Example:
    Package named my-super-thingy containing one or
    more modules with module names like MySuperThingy
    and executables like myThingy and myOtherThingy.

  Factoid: Haskell packages are not part of the language.
           Pragmatically, packages are the things on Hackage.

  A module  is a set of functions, types, classes, ...
  put together in a common namespace.

  A library is a set of modules which make sense to be
  grouped together and that can be used in a program or
  another library.

  A package is a unit of distribution that can contain
  libraries and/or executables, together with data such
  as versions and descriptions..

2020-04-15:
  The hpack package not only contains the hpack executable
  but also the Hpack module.  This module is not intended
  for endusers but for build tools like stack or cabal2nix.

2020-04-24:
  Modeled package.yaml and directory structure after
  several GitHub examples:

  - haskell-compat/base-orphans
  - sol/hpack
  - soenkehahn/getopt-generics
  - hspec/sensei

  With just the package.yaml file (and source code) present,

    $ stack --resolver lts-13.29 init --force

  The generated files were stack.yaml and pythag-triples.cabal.  The system
  hpack utility generates the same pythag-triples.cabal file as did stack,
  which uses Hpack library internally.  I editted out the usual boilerplate
  commments from stack.yaml.

  Setup.hs seems not to be used by the Stack build.  The default Setup.hs,
  for build type Simple, was previous generated by "cabal init" and added
  as a convenience for Cabel users.

  I set the resolver to use LTS 13.29.  LTS 15.9 uses GHC 8.8.3 which as of
  02-Apr-2020 is untested with Stack on MYSYS2.  

  I don't understand what my GetHub examples were doing with the "tests"
  entry in their package.yaml files.  The "test suite" is currently broken.

2022-08-10:
  Trying to use Neovim LSP with the haskell-language-server totally
  broken.  Seems to be trying to leverage the Stack infrastructure.

  I am giving up on Stack.

  Got whatever I had to rebuild the program with Git commit
  5f1115830d1965c252997c7a817f8d9ddfa9bde4.

2022-08-15:
  Today I decided just to use the native Arch Haskell toolchains
  with dynamic linking.  I will use just cabel from the pacman
  cabal-install package.  The first step is to move the previous
  code aside, generate Cabal boiler plate, and test the resultying
  code.

    $ cabal init
    $ cable run

  Next start reintegrating the build.

## 2024=05-28:
  Almost 2 years ago, I had gotten the above to work with cabal. Without seeing
  this file
  I did

* Redoing from scratch - [from Stackoverflow](https://stackoverflow.com/questions/9300286/how-do-i-build-a-simple-project-with-cabal)
  * cabal init
    * cabal update (559 days old - suggested by cabal configured)
  * cabal configure
  * cabal build

* Built with no errors, ... but what did I build?

```fish
    $ ls -l (digpath 'pytha*')
    lrwxrwxrwx 1 grs grs 140 Nov 15  2022
    /home/grs/.cabal/bin/pythagTriples -> \
        ../store/ghc-9.0.2/pythag-triples-0.7.0.0-e-pythagTriples-8786af3fcdf1644642c18ac9691c599f02105c7aaab58147e2873cd102380a92/bin/pythagTriples

    $ cabal install
    Wrote tarball sdist to
    /home/grs/devel/scheller-linux-archive/grok/Haskell/pythag-triples/dist-newstyle/sdist/pythag-triples-0.1.0.0.tar.gz
    Resolving dependencies...
    Build profile: -w ghc-9.2.8 -O1
    In order, the following will be built (use -v for more details):
    - pythag-triples-0.1.0.0 (exe:pythag-triples) (requires build)
    Starting     pythag-triples-0.1.0.0 (exe:pythag-triples)
    Building     pythag-triples-0.1.0.0 (exe:pythag-triples)
    Installing   pythag-triples-0.1.0.0 (exe:pythag-triples)
    Completed    pythag-triples-0.1.0.0 (exe:pythag-triples)
    Symlinking 'pythag-triples' to '/home/grs/.cabal/bin/pythag-triples'

    $ ls -l (digpath 'pytha*')
    lrwxrwxrwx 1 grs grs 142 May 28 16:21 /home/grs/.cabal/bin/pythag-triples -> \
        ../store/ghc-9.2.8/pythag-triples-0.1.0.0-e-pythag-triples-b56e37c3f15035c859d1943ce6635285388c6714ea2cd1e9c1d86727364e140b/bin/pythag-triples
    lrwxrwxrwx 1 grs grs 140 Nov 15  2022 /home/grs/.cabal/bin/pythagTriples -> \
        ../store/ghc-9.0.2/pythag-triples-0.7.0.0-e-pythagTriples-8786af3fcdf1644642c18ac9691c599f02105c7aaab58147e2873cd102380a92/bin/pythagTriples

    $ pythag-triples 10
    Hello, Haskell!
    $ pythagTriples 10
    pythagTriples: error while loading shared libraries: libHSsplit-0.2.3.5-L1bLVmvZ58j6aPvvR7cSgS-ghc9.0.2.so: cannot open shared object file: No such file or directory
```
`
Opps... At least Neovim leveraging haskell-language-server no longer is crashes.
