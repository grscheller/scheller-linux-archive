Purpose: For tracking Python infrastructure installed locally as
         an unprivalleged user.

2016-07-29:
  Installed Anaconda Python into /home/geoff/opt/anaconda3.
    Adjusted .bash_profile to put it in the path before
    system python.

    $ /home/geoff/opt/anaconda3/bin/python --version
    Python 3.5.2 :: Anaconda 4.1.1 (64-bit)

    $ /usr/bin/python --version
    Python 3.5.2

    $ /usr/bin/python2 --version
    Python 2.7.12

    Note: See 2018-01-25 for configuring conda virtual environments,
          without having to put base Anaconda on your $PATH.

2018-01-20:
  Updated my Anaconda Python Distribution:

    $ conda update --all

  Now we have

    $ whence python
    /home/geoff/opt/anaconda3/bin/python
    /usr/bin/python

    $ python --version
    Python 3.6.4 :: Anaconda custom (64-bit)

    $ /usr/bin/python --version
    Python 3.6.4

  This is the first step in trying to work thru some Python based
  machine learning tutorials.  I hope to also incorporate Jupyter
  notebooks into this endeavor.

2018-01-25:
  Have to use conda virtual environments since ~/opt/anaconda3/bin
  contaminates path with old versions of /usr/bin utilities.

  In my ~/.bashrc file I put

    alias conda=~/opt/anaconda3/bin/conda

  and in ~/.bash_profile I removed ~/opt/anaconda3/bin from my $PATH.

  After these changes,

    $ conda -V
    conda 4.4.7

    $ conda update conda
    Solving environment: done

    # All requested packages already installed.

  Use the following to determine a list of available python versions
  to configure an anaconda virtual environment,

    $ conda search "^python$"

  Since I am a bleeding edge type guy, I will create a conda virtual
  environment called "play" with the most recent version of python
  given by above command,

    $ conda create -n play python=3.6.4 anaconda
    Solving environment: done

    ## Package Plan ##

      environment location: /home/geoff/opt/anaconda3/envs/play

      added / updated specs: 
        - anaconda
        - python=3.6.4


    The following packages will be downloaded:

        package                    |            build
        ---------------------------|-----------------
        sqlite-3.21.0              |       h1bed415_0         1.5 MB

    The following NEW packages will be INSTALLED:

        anaconda:        custom-py36hbbc8b67_0   
        ca-certificates: 2017.08.26-h1d4fec5_0   
        certifi:         2017.11.5-py36hf29ccca_0
        libedit:         3.1-heed3624_0          
        libffi:          3.2.1-hd88cf55_4        
        libgcc-ng:       7.2.0-h7cc24e2_2        
        libstdcxx-ng:    7.2.0-h7a57d05_2        
        ncurses:         6.0-h9df7e31_2          
        openssl:         1.0.2n-hb7f436b_0       
        pip:             9.0.1-py36h6c6f9ce_4    
        python:          3.6.4-hc3d631a_1        
        readline:        7.0-ha6073c6_4          
        setuptools:      38.4.0-py36_0           
        sqlite:          3.21.0-h1bed415_0       
        tk:              8.6.7-hc745277_3        
        wheel:           0.30.0-py36hfd4bba0_1   
        xz:              5.2.3-h55aa19d_2        
        zlib:            1.2.11-ha838bed_2       
    
    Proceed ([y]/n)?y

    Downloading and Extracting Packages
    sqlite 3.21.0: ############################################### | 100% 
    Preparing transaction: done
    Verifying transaction: done
    Executing transaction: done
    #
    # To activate this environment, use:
    # > source activate play
    #
    # To deactivate an active environment, use:
    # > source deactivate
    #

  The following two aliases will be needed in .bashrc

    alias activate='source ~/opt/anaconda3/bin/activate'
    alias deactivate='source ~/opt/anaconda3/bin/deactivate'

  Well, Anaconda's horrible activate/deactivate scripts don't seem to
  get along with my bash environment.

    $ sh
    sh-4.4$ source ~/opt/anaconda3/bin/activate play
    (play) sh-4.4$ whence python
    /home/geoff/opt/anaconda3/envs/play/bin/python
    /usr/bin/python
    (play) sh-4.4$ source ~/opt/anaconda3/bin/deactivate
    sh-4.4$ whence python
    /usr/bin/python
    sh-4.4$ exit
    $ 

  In my opinion, each shell should have its own very cleanly written
  version.  Then a "lowest common denominator" activation script can
  select the correct version for the user's shell.  That way shell
  scripting is not stuck in the 1970's.

  Lets create a .profile for the Bourne Shell

    export PS1='$ '
    export PS2='> '

    ## Anaconda Python aliases
    alias activate='. ~/opt/anaconda3/bin/activate'
    alias deactivate='. ~/opt/anaconda3/bin/deactivate'

  Now,

    $ sh -l
    $ whence python
    /usr/bin/python
    $ activate play
    (play) $ whence python
    /home/geoff/opt/anaconda3/envs/play/bin/python
    /usr/bin/python
    (play) $ deactivate
    $ exit
    $

2018-02-05:
  Tweaked Anaconda related aliases in .bashrc:

    alias conda=~/opt/anaconda3/bin/conda
    alias actA='sh -c ". ~/opt/anaconda3/bin/activate; bash"'
    alias play='sh -c ". ~/opt/anaconda3/bin/activate play; bash"'

  Don't need to mess with the deactivate script, just ^D out
  of the bash shell.  Also, conda does not like to be called from 
  an activated anaconda environment.

2018-02-05:
  Updated Anaconda base and play environments:
    $ conda update -n base conda
    $ conda update -n base --all
    $ conda update -n play --all

  Noted that my "play" environment's python is getting downgraded
  from 3.6.4 to 3.6.3.  

  Installing "everything but the kitchen sink" seems to be a
  bad idea.  Stuff gets downgraded to meet dependencies.  Use
  conda environments with minimally installed packages.

  A GUI called Anaconda Navigator was installed into play, but
  not base???  This thing is something like Enthought's canopy?
  It is also in base, but both fail with a type error

    TypeError: byte indices must be integers or slices, not str

  when run outside a conda environment.

2018-02-05:
  Anaconda navigator-updater will run from the base anaconda environment
  but not the play environment.  From base, can modify both base and play.

2018-02-07:
  Anaconda and Canopy both seem geared for clueless scientist using out-of-date
  Linux distributions.  I want a Python development environment, not a MATLAB
  like IDE "App" geared toward hacky Fortran programmers.

  For purposes of learning Deep Learning Python development, I will use
  the Arch Linux system python and configure Arch via pacman for the
  required NVIDIA/CUDA dependencies.

  To be continued... (see ArchLinux_AdminLog.txt 2018-02-14)

2019-02-12:
  Since I am stuck in the Dark Ages at work on CentOS 7, and I need
  to work with Python, I am reinstalling Anaconda into my geoff user's
  home directory.  Now, conda is a shell function.  I bring it into
  scope via the .bashrc snippet below:

    ## Configure Anaconda3 Python Distribution
    if [[ -d ~/opt/anaconda3 ]]
    then
        source ~/opt/anaconda3/etc/profile.d/conda.sh
    fi

  This is where I canonically always install it.  This shell function
  based version of conda does a better job "staying out of the way"
  when I want to ignore it and use the Arch system Python.

    $ conda --version
    conda 4.5.12
   
    $ conda update conda
    ...

    $ conda --version
    conda 4.6.3

  Create a machine learning virtual env for PyTorch,

    $ conda create --name ml1 pytorch opencv scikit-learn scikit-image astropy

    $ conda info --envs
    # conda environments:
    #
    base                  *  /home/geoff/opt/anaconda3
    ml1                      /home/geoff/opt/anaconda3/envs/ml1 

    $ conda activate
    (base)$ python --version
    Python 3.7.1
    (base)$ conda activate ml1
    (ml1)$ python --version
    Python 3.7.2

