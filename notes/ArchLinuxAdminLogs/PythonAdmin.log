Purpose: For tracking Python infrastructure installed locally as
         an unprivalleged user.

2016-07-29: (Arch)
  Installed Anaconda Python into /home/geoff/opt/anaconda3.
    Adjusted .bash_profile to put it in the path before
    system python.

    $ /home/geoff/opt/anaconda3/bin/python --version
    Python 3.5.2 :: Anaconda 4.1.1 (64-bit)

    $ /usr/bin/python --version
    Python 3.5.2

    $ /usr/bin/python2 --version
    Python 2.7.12

    Note: See 2018-01-25 for configuring conda virtual environments,
          without having to put base Anaconda on your $PATH.

2018-01-20: (Arch)
  Updated my Anaconda Python Distribution:

    $ conda update --all

  Now we have

    $ whence python
    /home/geoff/opt/anaconda3/bin/python
    /usr/bin/python

    $ python --version
    Python 3.6.4 :: Anaconda custom (64-bit)

    $ /usr/bin/python --version
    Python 3.6.4

  This is the first step in trying to work thru some Python based
  machine learning tutorials.  I hope to also incorporate Jupyter
  notebooks into this endeavor.

2018-01-25: (Arch)
  Have to use conda virtual environments since ~/opt/anaconda3/bin
  contaminates path with old versions of /usr/bin utilities.

  In my ~/.bashrc file I put

    alias conda=~/opt/anaconda3/bin/conda

  and in ~/.bash_profile I removed ~/opt/anaconda3/bin from my $PATH.

  After these changes,

    $ conda -V
    conda 4.4.7

    $ conda update conda
    Solving environment: done

    # All requested packages already installed.

  Use the following to determine a list of available python versions
  to configure an anaconda virtual environment,

    $ conda search "^python$"

  Since I am a bleeding edge type guy, I will create a conda virtual
  environment called "play" with the most recent version of python
  given by above command,

    $ conda create -n play python=3.6.4 anaconda
    Solving environment: done

    ## Package Plan ##

      environment location: /home/geoff/opt/anaconda3/envs/play

      added / updated specs: 
        - anaconda
        - python=3.6.4


    The following packages will be downloaded:

        package                    |            build
        ---------------------------|-----------------
        sqlite-3.21.0              |       h1bed415_0         1.5 MB

    The following NEW packages will be INSTALLED:

        anaconda:        custom-py36hbbc8b67_0   
        ca-certificates: 2017.08.26-h1d4fec5_0   
        certifi:         2017.11.5-py36hf29ccca_0
        libedit:         3.1-heed3624_0          
        libffi:          3.2.1-hd88cf55_4        
        libgcc-ng:       7.2.0-h7cc24e2_2        
        libstdcxx-ng:    7.2.0-h7a57d05_2        
        ncurses:         6.0-h9df7e31_2          
        openssl:         1.0.2n-hb7f436b_0       
        pip:             9.0.1-py36h6c6f9ce_4    
        python:          3.6.4-hc3d631a_1        
        readline:        7.0-ha6073c6_4          
        setuptools:      38.4.0-py36_0           
        sqlite:          3.21.0-h1bed415_0       
        tk:              8.6.7-hc745277_3        
        wheel:           0.30.0-py36hfd4bba0_1   
        xz:              5.2.3-h55aa19d_2        
        zlib:            1.2.11-ha838bed_2       
    
    Proceed ([y]/n)?y

    Downloading and Extracting Packages
    sqlite 3.21.0: ############################################### | 100% 
    Preparing transaction: done
    Verifying transaction: done
    Executing transaction: done
    #
    # To activate this environment, use:
    # > source activate play
    #
    # To deactivate an active environment, use:
    # > source deactivate
    #

  The following two aliases will be needed in .bashrc

    alias activate='source ~/opt/anaconda3/bin/activate'
    alias deactivate='source ~/opt/anaconda3/bin/deactivate'

  Well, Anaconda's horrible activate/deactivate scripts don't seem to
  get along with my bash environment.

    $ sh
    sh-4.4$ source ~/opt/anaconda3/bin/activate play
    (play) sh-4.4$ whence python
    /home/geoff/opt/anaconda3/envs/play/bin/python
    /usr/bin/python
    (play) sh-4.4$ source ~/opt/anaconda3/bin/deactivate
    sh-4.4$ whence python
    /usr/bin/python
    sh-4.4$ exit
    $ 

  In my opinion, each shell should have its own very cleanly written
  version.  Then a "lowest common denominator" activation script can
  select the correct version for the user's shell.  That way shell
  scripting is not stuck in the 1970's.

  Lets create a .profile for the Bourne Shell

    export PS1='$ '
    export PS2='> '

    ## Anaconda Python aliases
    alias activate='. ~/opt/anaconda3/bin/activate'
    alias deactivate='. ~/opt/anaconda3/bin/deactivate'

  Now,

    $ sh -l
    $ whence python
    /usr/bin/python
    $ activate play
    (play) $ whence python
    /home/geoff/opt/anaconda3/envs/play/bin/python
    /usr/bin/python
    (play) $ deactivate
    $ exit
    $

2018-02-05: (Arch)
  Tweaked Anaconda related aliases in .bashrc:

    alias conda=~/opt/anaconda3/bin/conda
    alias actA='sh -c ". ~/opt/anaconda3/bin/activate; bash"'
    alias play='sh -c ". ~/opt/anaconda3/bin/activate play; bash"'

  Don't need to mess with the deactivate script, just ^D out
  of the bash shell.  Also, conda does not like to be called from 
  an activated anaconda environment.

2018-02-05: (Arch)
  Updated Anaconda base and play environments:
    $ conda update -n base conda
    $ conda update -n base --all
    $ conda update -n play --all

  Noted that my "play" environment's python is getting downgraded
  from 3.6.4 to 3.6.3.  

  Installing "everything but the kitchen sink" seems to be a
  bad idea.  Stuff gets downgraded to meet dependencies.  Use
  conda environments with minimally installed packages.

  A GUI called Anaconda Navigator was installed into play, but
  not base???  This thing is something like Enthought's canopy?
  It is also in base, but both fail with a type error

    TypeError: byte indices must be integers or slices, not str

  when run outside a conda environment.

2018-02-05: (Arch)
  Anaconda navigator-updater will run from the base anaconda environment
  but not the play environment.  From base, can modify both base and play.

2018-02-07: (Arch)
  Anaconda and Canopy both seem geared for clueless scientist using out-of-date
  Linux distributions.  I want a Python development environment, not a MATLAB
  like IDE "App" geared toward hacky Fortran programmers.

  For purposes of learning Deep Learning Python development, I will use
  the Arch Linux system python and configure Arch via pacman for the
  required NVIDIA/CUDA dependencies.

  To be continued... (see ArchLinux_AdminLog.txt 2018-02-14)

2019-02-12: (Arch)
  Since I am stuck in the Dark Ages at work on CentOS 7, and I need
  to work with Python, I am reinstalling Anaconda into my geoff user's
  home directory.  Now, conda is a shell function.  I bring it into
  scope via the .bashrc snippet below:

    ## Configure Anaconda3 Python Distribution
    if [[ -d ~/opt/anaconda3 ]]
    then
        source ~/opt/anaconda3/etc/profile.d/conda.sh
    fi

  This is where I canonically always install it.  This shell function
  based version of conda does a better job "staying out of the way"
  when I want to ignore it and use the Arch system Python.

    $ conda --version
    conda 4.5.12
   
    $ conda update conda
    ...

    $ conda --version
    conda 4.6.3

  Create a machine learning virtual env for PyTorch,

    $ conda create --name ml1 pytorch opencv scikit-learn scikit-image astropy

    $ conda info --envs
    # conda environments:
    #
    base                  *  /home/geoff/opt/anaconda3
    ml1                      /home/geoff/opt/anaconda3/envs/ml1 

    $ conda activate
    (base)$ python --version
    Python 3.7.1
    (base)$ conda activate ml1
    (ml1)$ python --version
    Python 3.7.2

2019-02-26: (CentOS 7)
  At work, did a

    $ conda update conda
    $ conda activate ml1
    $ conda update --all

  Need to repeat for Arch Linux.

2019-02-27: (CentOS 7)
  For Arch Linux, repeated (sort of) above.

    $ conda update -n base -c defaults conda
    $ conda activate pytorch

2019-02-27: (All)
  Remove ml1 and pytorch virtual environments and start over.

  To test PyTorch installations, I wrote grok/Python/pyTorch/verify.py:

    #!/usr/bin/env python

    import torch

    x = torch.rand(5,3)
    print("Randon 5 by 3 \"tensor\":")
    print(x)

    if torch.cuda.is_available():
        print("\nCUDA is available.\n")
    else:
        print("\nCUDA is not available.\n")
    
2019-02-27: (CentOS7)
  Installing non-CUDA version on CentOS 7:

    $ conda create --name pytorch -c pytorch pytorch-cpu torchvision-cpu
    Collecting package metadata: done
    Solving environment: done

    ## Package Plan ##

      environment location: /home/schelleg/opt/anaconda3/envs/pytorch

      added / updated specs:
        - pytorch-cpu
        - torchvision-cpu

    The following packages will be downloaded:

        package                    |            build
        ---------------------------|-----------------
        openssl-1.1.1b             |       h7b6447c_0         4.0 MB
        pytorch-cpu-1.0.1          |      py3.7_cpu_2        26.8 MB  pytorch
        torchvision-cpu-0.2.1      |             py_2          37 KB  pytorch
        ------------------------------------------------------------
                                               Total:        30.8 MB

    The following NEW packages will be INSTALLED:

      blas               pkgs/main/linux-64::blas-1.0-mkl
      ca-certificates    pkgs/main/linux-64::ca-certificates-2019.1.23-0
      certifi            pkgs/main/linux-64::certifi-2018.11.29-py37_0
      cffi               pkgs/main/linux-64::cffi-1.12.1-py37h2e261b9_0
      freetype           pkgs/main/linux-64::freetype-2.9.1-h8a8886c_1
      intel-openmp       pkgs/main/linux-64::intel-openmp-2019.1-144
      jpeg               pkgs/main/linux-64::jpeg-9b-h024ee3a_2
      libedit            pkgs/main/linux-64::libedit-3.1.20181209-hc058e9b_0
      libffi             pkgs/main/linux-64::libffi-3.2.1-hd88cf55_4
      libgcc-ng          pkgs/main/linux-64::libgcc-ng-8.2.0-hdf63c60_1
      libgfortran-ng     pkgs/main/linux-64::libgfortran-ng-7.3.0-hdf63c60_0
      libpng             pkgs/main/linux-64::libpng-1.6.36-hbc83047_0
      libstdcxx-ng       pkgs/main/linux-64::libstdcxx-ng-8.2.0-hdf63c60_1
      libtiff            pkgs/main/linux-64::libtiff-4.0.10-h2733197_2
      mkl                pkgs/main/linux-64::mkl-2019.1-144
      mkl_fft            pkgs/main/linux-64::mkl_fft-1.0.10-py37ha843d7b_0
      mkl_random         pkgs/main/linux-64::mkl_random-1.0.2-py37hd81dba3_0
      ncurses            pkgs/main/linux-64::ncurses-6.1-he6710b0_1
      ninja              pkgs/main/linux-64::ninja-1.8.2-py37h6bb024c_1
      numpy              pkgs/main/linux-64::numpy-1.15.4-py37h7e9f1db_0
      numpy-base         pkgs/main/linux-64::numpy-base-1.15.4-py37hde5b4d6_0
      olefile            pkgs/main/linux-64::olefile-0.46-py37_0
      openssl            pkgs/main/linux-64::openssl-1.1.1b-h7b6447c_0
      pillow             pkgs/main/linux-64::pillow-5.4.1-py37h34e0f95_0
      pip                pkgs/main/linux-64::pip-19.0.3-py37_0
      pycparser          pkgs/main/linux-64::pycparser-2.19-py37_0
      python             pkgs/main/linux-64::python-3.7.2-h0371630_0
      pytorch-cpu        pytorch/linux-64::pytorch-cpu-1.0.1-py3.7_cpu_2
      readline           pkgs/main/linux-64::readline-7.0-h7b6447c_5
      setuptools         pkgs/main/linux-64::setuptools-40.8.0-py37_0
      six                pkgs/main/linux-64::six-1.12.0-py37_0
      sqlite             pkgs/main/linux-64::sqlite-3.26.0-h7b6447c_0
      tk                 pkgs/main/linux-64::tk-8.6.8-hbc83047_0
      torchvision-cpu    pytorch/noarch::torchvision-cpu-0.2.1-py_2
      wheel              pkgs/main/linux-64::wheel-0.33.1-py37_0
      xz                 pkgs/main/linux-64::xz-5.2.4-h14c3975_4
      zlib               pkgs/main/linux-64::zlib-1.2.11-h7b6447c_3
      zstd               pkgs/main/linux-64::zstd-1.3.7-h0b5b093_0

    Proceed ([y]/n)? y

    Downloading and Extracting Packages
    pytorch-cpu-1.0.1    | 26.8 MB   | ##################################### | 100% 
    openssl-1.1.1b       | 4.0 MB    | ##################################### | 100% 
    torchvision-cpu-0.2. | 37 KB     | ##################################### | 100% 
    Preparing transaction: done
    Verifying transaction: done
    Executing transaction: done
    #
    # To activate this environment, use
    #
    #     $ conda activate pytorch
    #
    # To deactivate an active environment, use
    #
    #     $ conda deactivate

2019-02-27:
  Installing on CUDA enabled Arch Linux:

    $ conda create --name pytorch -c pytorch pytorch torchvision
    Collecting package metadata: done
    Solving environment: done

    ==> WARNING: A newer version of conda exists. <==
      current version: 4.6.3
      latest version: 4.6.7

    Please update conda by running

    $ conda update -n base -c defaults conda

    ## Package Plan ##

      environment location: /home/geoff/opt/anaconda3/envs/pytorch

      added / updated specs:
        - pytorch
        - torchvision

    The following packages will be downloaded:

        package                    |            build
        ---------------------------|-----------------
        cffi-1.12.1                |   py37h2e261b9_0         220 KB
        cudatoolkit-10.0.130       |                0       380.0 MB
        mkl_fft-1.0.10             |   py37ha843d7b_0         169 KB
        openssl-1.1.1b             |       h7b6447c_0         4.0 MB
        pip-19.0.3                 |           py37_0         1.8 MB
        pytorch-1.0.1              |py3.7_cuda10.0.130_cudnn7.4.2_2       375.4 MB  pytorch
        setuptools-40.8.0          |           py37_0         643 KB
        torchvision-0.2.1          |             py_2          37 KB  pytorch
        wheel-0.33.1               |           py37_0          39 KB
        ------------------------------------------------------------
                                               Total:       762.3 MB

    The following NEW packages will be INSTALLED:

      blas               pkgs/main/linux-64::blas-1.0-mkl
      ca-certificates    pkgs/main/linux-64::ca-certificates-2019.1.23-0
      certifi            pkgs/main/linux-64::certifi-2018.11.29-py37_0
      cffi               pkgs/main/linux-64::cffi-1.12.1-py37h2e261b9_0
      cudatoolkit        pkgs/main/linux-64::cudatoolkit-10.0.130-0
      freetype           pkgs/main/linux-64::freetype-2.9.1-h8a8886c_1
      intel-openmp       pkgs/main/linux-64::intel-openmp-2019.1-144
      jpeg               pkgs/main/linux-64::jpeg-9b-h024ee3a_2
      libedit            pkgs/main/linux-64::libedit-3.1.20181209-hc058e9b_0
      libffi             pkgs/main/linux-64::libffi-3.2.1-hd88cf55_4
      libgcc-ng          pkgs/main/linux-64::libgcc-ng-8.2.0-hdf63c60_1
      libgfortran-ng     pkgs/main/linux-64::libgfortran-ng-7.3.0-hdf63c60_0
      libpng             pkgs/main/linux-64::libpng-1.6.36-hbc83047_0
      libstdcxx-ng       pkgs/main/linux-64::libstdcxx-ng-8.2.0-hdf63c60_1
      libtiff            pkgs/main/linux-64::libtiff-4.0.10-h2733197_2
      mkl                pkgs/main/linux-64::mkl-2019.1-144
      mkl_fft            pkgs/main/linux-64::mkl_fft-1.0.10-py37ha843d7b_0
      mkl_random         pkgs/main/linux-64::mkl_random-1.0.2-py37hd81dba3_0
      ncurses            pkgs/main/linux-64::ncurses-6.1-he6710b0_1
      ninja              pkgs/main/linux-64::ninja-1.8.2-py37h6bb024c_1
      numpy              pkgs/main/linux-64::numpy-1.15.4-py37h7e9f1db_0
      numpy-base         pkgs/main/linux-64::numpy-base-1.15.4-py37hde5b4d6_0
      olefile            pkgs/main/linux-64::olefile-0.46-py37_0
      openssl            pkgs/main/linux-64::openssl-1.1.1b-h7b6447c_0
      pillow             pkgs/main/linux-64::pillow-5.4.1-py37h34e0f95_0
      pip                pkgs/main/linux-64::pip-19.0.3-py37_0
      pycparser          pkgs/main/linux-64::pycparser-2.19-py37_0
      python             pkgs/main/linux-64::python-3.7.2-h0371630_0
      pytorch            pytorch/linux-64::pytorch-1.0.1-py3.7_cuda10.0.130_cudnn7.4.2_2
      readline           pkgs/main/linux-64::readline-7.0-h7b6447c_5
      setuptools         pkgs/main/linux-64::setuptools-40.8.0-py37_0
      six                pkgs/main/linux-64::six-1.12.0-py37_0
      sqlite             pkgs/main/linux-64::sqlite-3.26.0-h7b6447c_0
      tk                 pkgs/main/linux-64::tk-8.6.8-hbc83047_0
      torchvision        pytorch/noarch::torchvision-0.2.1-py_2
      wheel              pkgs/main/linux-64::wheel-0.33.1-py37_0
      xz                 pkgs/main/linux-64::xz-5.2.4-h14c3975_4
      zlib               pkgs/main/linux-64::zlib-1.2.11-h7b6447c_3
      zstd               pkgs/main/linux-64::zstd-1.3.7-h0b5b093_0

    Proceed ([y]/n)? y

    Downloading and Extracting Psource /cygdrive/c/Users/scotch/Anaconda3/etc/profile.d/conda.shackages
    pytorch-1.0.1        | 375.4 MB  | ##################################### | 100% 
    pip-19.0.3           | 1.8 MB    | ##################################### | 100% 
    mkl_fft-1.0.10       | 169 KB    | ##################################### | 100% 
    cudatoolkit-10.0.130 | 380.0 MB  | ##################################### | 100% 
    setuptools-40.8.0    | 643 KB    | ##################################### | 100% 
    openssl-1.1.1b       | 4.0 MB    | ##################################### | 100% 
    cffi-1.12.1          | 220 KB    | ##################################### | 100% 
    wheel-0.33.1         | 39 KB     | ##################################### | 100% 
    torchvision-0.2.1    | 37 KB     | ##################################### | 100% 
    Preparing transaction: done
    Verifying transaction: done
    Executing transaction: done
    #
    # To activate this environment, use
    #
    #     $ conda activate pytorch
    #
    # To deactivate an active environment, use
    #
    #     $ conda deactivate

  Immediately upgrading what I just installed on Arch Linux:

    $ conda activate pytorch
    (pytorch)$ conda update --all
    Collecting package metadata: done
    Solving environment: done

    ## Package Plan ##

      environment location: /home/geoff/opt/anaconda3/envs/pytorch

    The following packages will be downloaded:

        package                    source /cygdrive/c/Users/scotch/Anaconda3/etc/profile.d/conda.sh|            build
        ---------------------------|-----------------
        cudnn-7.3.1                |       cuda10.0_0       385.1 MB
        pytorch-1.0.1              |cuda100py37he554f03_0   344.6 MB
        ------------------------------------------------------------

    The following NEW packages will be INSTALLED:

      cudnn              pkgs/main/linux-64::cudnn-7.3.1-cuda10.0_0

    The following packages will be SUPERSEDED by a higher-priority channel:

      pytorch            pytorch::pytorch-1.0.1-py3.7_cuda10.0~ --> pkgs/main::pytorch-1.0.1-cuda100py37he554f03_0

    Proceed ([y]/n)? y

    Downloading and Extracting Packages(base) C:\Users\scotch>conda update conda
    Solving environment: done

    ## Package Plan ##

    environment location: C:\Users\scotch\Anaconda3

      added / updated specs:
        - conda

    The following packages will be downloaded:

        package                    |            build
        ---------------------------|-----------------
        conda-4.6.7                |           py37_0         1.7 MB

    The following packages will be UPDATED:

        conda: 4.5.12-py37_0 --> 4.6.7-py37_0

    Proceed ([y]/n)?
    ...

  Seeoms to have installed cudnn-7.3.source /cygdrive/c/Users/scotch/Anaconda3/etc/profile.d/conda.sh1 but is this consistent with line #167 above?

  Lets try again,

    (pytorch)$ conda update --all
    Collecting package metadata: done
    Solving environment: done

    # All requested packages already installed.

  Now try again while indicating the channel too,

    (pytorch)$ conda update -c pytorch --all
    Collecting package metadata: done
    Solving environment: done

    ## Package Plan ##

      environment location: /home/geoff/opt/anaconda3/envs/pytorch

    The following packages will be downloaded:

        package                    |            build
        ---------------------------source /cygdrive/c/Users/scotch/Anaconda3/etc/profile.d/conda.sh|-----------------
        torchvision-0.2.2          |             py_2          44 KB  pytorch
        tqdm-4.31.1                |             py_0          47 KB
        ------------------------------------------------------------
                                               Total:          91 KB

    The following NEW packages will be INSTALLED:

      tqdm               pkgs/main/noarch::tqdm-4.31.1-py_0

    The following packages will be UPDATED:

      pytorch            pkgs/main::pytorch-1.0.1-cuda100py37h~ --> pytorch::pytorch-1.0.1-py3.7_cuda10.0.130_cudnn7.4.2_2
      torchvision                                    0.2.1-py_2 --> 0.2.2-py_2

    Proceed ([y]/n)? 

    Downloading and Extracting Packasource /cygdrive/c/Users/scotch/Anaconda3/etc/profile.d/conda.shges
    torchvision-0.2.2    | 44 KB     | ############################################################ | 100% 
    tqdm-4.31.1          | 47 KB     | ############################################################ | 100% 
    Preparing transaction: done
    Verifying transaction: done
    Executing transaction: done

  My guess is that this time the version of pytorch built with cudnn 7.4.2 is used???

2019-02-28: (Windows 10)
  Installing on a Windows 10 system with NVIDIA Quadro M620 card.

  Using the "GUI" installer, choosing not to put Python on Path.  Also installed
  the Visual Studio VSCode.  Free  as in "Anaconda partner with Microsoft."

  Installed to C:\Users\scotch\Anaconda3

  Updated end of my Cygwin `.bashrc` to be

    ## Configure Anaconda3 Python Distribution
    if [[ -d ~/opt/anaconda3 ]]
    then
        source ~/opt/anaconda3/etc/profile.d/conda.sh
    elif [[ -d /cygdrive/c/Users/scotch/Anaconda3 ]]
    then
        source /cygdrive/c/Users/scotch/Anaconda3/etc/profile.d/conda.sh
    fi

  Now lets see if conda works in Cygwin environment,

    $ conda create --name play1
    Solving environment: ...working... done

    CondaHTTPError: HTTP 000 CONNECTION FAILED for url <https://repo.anaconda.com/pkgs/pro/noarch/repodata.json.bz2>
    Elapsed: -

      An HTTP error occurred when trying to retrieve this URL.
      HTTP errors are often intermittent, and a simple retry will get you on your way.

      If your current network has https://www.anaconda.com blocked, please file
      a support request with your network engineering team.

    SLError(MaxRetryError('HTTPSConnectionPool(host=\'repo.anaconda.com\', port=443): Max retries exceeded with url: /pkgs/pro/noarch/repodata.json.bz2 (Caused by SSLError("Can\'t connect to HTTPS URL because the SSL module is not available."))'))

  OK, lets see if Conda GUI environment suffers from the same problem,
  launched `ANACONDA NAVIGATOR` from taskbar menu.
  - horrible bright white with light gray lettering (hard to read)
  - able to launch a cmd.exe window navigator app
  - able to launch a cmd.Anaconda3/etc/profile.Anaconda3/etc/profile.d/conda.shd/conda.shexe window directly from Win10 menus too

    (base) C:\Users\scotch>conda create --name play1
    Solving environment: done

    ==> WARNING: A newer version of conda exists. <==
      current version: 4Anaconda3/etc/profile.d/conda.sh.5Anaconda3/etc/profile.d/conda.sh.12
      latest version: 4.6.7

    Please update conda by running

       $ conda update -n base -c defaults conda

    ## Package Plan ##

       environment location: C:\Users\scotch\Anaconda3\envs\play1

       Proceed ([y]/n)?

       Preparing transaction: done
       Verifying transaction: done
       Executing transaction: done

  Let's see if we can create a virtual environment,

    (base) C:\Users\scotch>conda activate play1

    (play1) C:\Users\scotch>
    (play1) C:\Users\scotch>deactivate

    (base) C:\Users\scotch>

  Upgrade conda,

    (base) C:\Users\scotch>conda update conda
    Solving environment: dAnaconda3/etc/profile.d/conda.shone

    ## Package Plan ##
Anaconda3/etc/profile.d/conda.sh
      environment location: C:\Users\scotch\Anaconda3

    added / updated specs:
      - conda

    The following packages will be downloaded:

       package                    |            build
       ---------------------------|-----------------
       conda-4.6.7                |           py37_0         1.7 MB

    The following packages will be UPDATED:

       conda: 4.5.12-py37_0 --> 4.6.7-py37_0

    Proceed ([y]/n)?

    Downloading and Extracting Packconda-4.6.7 | 1.7 MB | ############################ | 100%
    Preparing transaction: done
    Verifying transaction: done
    Executing transaction: done

    (base) C:\Users\scotch>conda env list
    # conda environments:
    #
    base                  *  C:\Users\scotch\Anaconda3
    play1                    C:\Users\scotch\Anaconda3\envs\play1

    (base) C:\Users\scotch>

2019-03-01: (Windows 10)
  Some issues when I run verify.py:

    (base) C:\cygwin64\home\scotch\devel\scheller-linux-archive\grok\Python\pyTorch>conda activate pytorch

    (pytorch) C:\cygwin64\home\scotch\devel\scheller-linux-archive\grok\Python\pyTorch>python verify.py
    C:\Users\scotch\Anaconda3\envs\pytorch\lib\importlib\_bootstrap.py:219: \
      RuntimeWarning: numpy.ufunc size changed, may indicate binary incompatibility. \
      Expected 192 from C header, got 216 from PyObject
    return f(*args, **kwds)
    Randon 5 by 3 "tensor":
    tensor([[0.6795, 0.5260, 0.1139],
            [0.3256, 0.6034, 0.1945],
            [0.7040, 0.2221, 0.6744],
            [0.0837, 0.7430, 0.8318],
            [0.7896, 0.9541, 0.1571]])

    Cuda is not available.

  Binary incompatibility is concerning, but I will address that later.

  CUDA not available due to not having installed the CUDA drivers from
  the NVIDIA website.

2019-03-01: (Windows 10)
  Download CUDA tools and drivers from NVIDEA website:

    https://developer.nvidia.com/cuda-toolkit

  Anaconda3/etc/profile.d/conda.sh

2019-03-04: (Windows 10)
  Remove and reinstall pytorch virtual environment,

    $ conda env remove --name pytorch
    $ conda update -n base -c defaults conda
    $ conda create --name pytorch -c pytorch pytorch torchvision
    $ conda activate pytorch
    $ python verify.py
    Randon 5 by 3 "tensor":
    tensor([[0.2860, 0.5259, 0.7605],
            [0.3410, 0.6272, 0.3312],
            [0.3924, 0.9584, 0.7907],
            [0.9699, 0.1791, 0.9951],
            [0.3231, 0.3371, 0.2090]])

    CUDA is not available

  Got rid of the "numpy.ufunc size changed, may indicate binary incompatibility"
  error, but still not finding CUDA.  

  Do I need to "turn CUDA on" somehow?cuda.is_available

2019-03-04: (Windows 10)
  Installing MS Visual Studio Community Edition to make NVIDIA CUDA install happier.
  Only selected python and data store stuff, nothing C# or C++.

  What?!?!?! the blasted thing is installing Cpython and Andaconda3.ExE.x64

  Installed, required reboot.

  Now, reinstalling NVIDIA CUDA Toolkit.  Much happier now.
  Also, installed 

    Nsight for Visual Studio 2017
    Nsight Monitor and HUD Launcher

  Still

      3.7.1 -> 3.6.5 (Anaconda) and 3.6.6 Python Software Foundation
