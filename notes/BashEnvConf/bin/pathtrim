#!/bin/bash
#
# Trims off duplicate and non-existant directories
# for colen separated lists of UNIX PATH components.
#
# Usage: pathTrim /first/path/component:/second/path/coponent:.
#
# Useful when:
#   - .bash_profile gets resourced
#   -  user's home directory is shared between many systems
#   -  user uses same .bash_profile between various OS's
#
# Assumptions: Current $PATH contains the locations of
#              usable sed and realpath commands.  Also,
#              assumes #!/bin/bash finds bash.  Don't
#              know how portable "sed -E" and "realpath"
#              are on non-POSIX compliant OS's.
#       

# Standarize the $PATH list:
#   - remove redundant / and :
#   - remove trailing /'s on directory names
#   - /./ -> / 
#
sedScript='s!/+!/!g
           s!:+!:!g
           s!/:!:!g
           s!/\./!/!g
           s!/$!!
           s!^:!!
           s!:$!!'
Path=$(sed -E -e"$sedScript" <(printf %s "$1"))

# Extract directory path names from Path,
# filter duplicates and keep directories
# with absolute pathnames only when
# they actually exists.  Strip inital ./
# off relative paths.
OLDIFS=$IFS; IFS=':'; (( cnt = 0 ))
unset DirNames
for Dir in $Path
do
    Dir=${Dir#./}
    if [[ -d "$Dir" ]] || [[ ! $Dir =~ ^/ ]]
    then
        for DirName in "${DirNames[@]}"
        do
            [[ $DirName == "$Dir" ]] && continue 2
        done
        DirNames+=("$Dir"); (( cnt++ ))
    fi
done
IFS=$OLDIFS

# Get the resolved absolute pathnames
# for all absolute paths given by user.
unset RealPaths
(( nn = 0 ))
while (( nn < cnt ))
do
    if [[ ${DirNames[$nn]} =~ ^/ ]]
    then
        RealPaths+=("$(realpath -L "${DirNames[$nn]}")")
    else
        RealPaths+=("${DirNames[$nn]}")
    fi
    (( nn++ ))
done

# Prefer the first user supplied name unless
# the user subsquently supplied the correct
# physical name.
(( nn = 0 ))
while (( nn < cnt ))
do
    (( mm = 0 ))
    while (( mm < cnt ))
    do
        if [[ "${RealPaths[$nn]}" == "${RealPaths[$mm]}" ]]
        then
            if [[ "${DirNames[$mm]}" == "${RealPaths[$mm]}" ]]
            then
                DirNames[$nn]="${DirNames[$mm]}"
            fi
        fi
        (( mm++ ))
    done
    (( nn++ ))
done

# For all absolute paths given by user,
# filter out directory paths that point to the
# same physical directory as a previous one.
unset DirPaths
(( nn = 0 ))
while (( nn < cnt ))
do
    for Dir in "${DirPaths[@]}"
    do
        [[ ${DirNames[$nn]} == "$Dir" ]] && (( nn++ )) && continue 2
    done
    DirPaths+=("${DirNames[$nn]}")
    (( nn++ ))
done

# Construct new path string and send to stdout
Path=
for Dir in "${DirPaths[@]}"
do
    Path+=${Dir}:
done
printf %s\\n "${Path%:}"
