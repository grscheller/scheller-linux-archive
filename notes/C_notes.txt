Purpose is to document C language factoids:

01. Format strings used in the C99 standard.

    Note: [parameter] is POSIX extension.

    Syntax Format Placeholder:
      %[parameter][flags][width][.precision][length]type
   
    parameter:
      <n>$ where <n> is positional parameter
          example: printf("%2$d %1$#o %2$#x", 16, 17)
          outputs: 17 020 0x11
   
    flags:
      - left-align output, default is to right-align
      + prepend plus sign for positive signed-numeric types
        (space) prepends space for positive signed types, ignored if + flag given
      0 prepend zeros for numeric types when 'width' option given, default is spaces.
          example: printf("[%4X]",3) produces [   3]
          example: printf("[%04X]",3) produces [0003]
      ' thousands grouping separator applied to integer or exponent of a decimal 
      # alternate form:
          for g and G types, trailing zeros are not removed
          for f, F, e, E, g, G types, output always contains a decimal point
          for o, x, X types,aprepend 0, 0x, 0X, respectively, to non-zero numbers
   
    width and precision:
      minimum and maximum output - depends on type
          example: printf("[%10s]", "abc")       gives [       abc]
          example: printf("[%-10.3s]", "abcdef") gives [abc       ]
          example: printf("[%*d]", 10, 42)       gives [        42]
          example: printf("[%10.3f]", 3.14159)   gives [     3.142]
          example: printf("[%10.3g]", 3.14159)   gives [      3.14]
   
    length:
      Integer Types:
        hh expect int argument promoted from char
        h  expect int argument promoted from short
        l  expect long integer argument
        ll expect long long integer argument
        z  expect a size_t integer argument
        j  expect a intmax_t integer argument
        t  expect a ptrdiff_t integer argument
   
      Floating Point Types:
        l  ignored, float arguments always promoted to double in varargs calls
        L  expect a long double argument
   
    type:
      %	    print a literal % character, doesn't accept flags, width, precision, length fields
      d, i  int as a signed integer. %d and %i are same printf, but are different for scanf
            for input %i will interpret number as hexadecimal or octal if preceded by 0x or 0 respectfully
      u     print decimal unsigned int
      f, F  double in normal (fixed-point) notation. f and F differ only in capitalization
              nan vs NAN, infinity vs INFINITY, etc
      e, E  double value in exponential form d.ddde±dd or d.dddE±dd, exponent always contains at least two digits
      g, G  double in either normal or exponential notation, usually gives what you want
      x, X  unsigned int as a hexadecimal number. x uses lower-case and X uses upper-case letters
      o     unsigned int in octal
      s     null-terminated string
      c     char (character)
      p     void* (pointer to void) in an implementation-defined format
      a, A  double in hexadecimal notation, starting with 0x or 0X
      n     print nothing, but writes the number of characters successfully written so far into an integer pointer parameter.
   
