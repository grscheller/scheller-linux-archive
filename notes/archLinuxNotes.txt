Purpose: Document useful commands and factoids most of
         which can be done without root or sudo access.

Journal Control:
  For scanning journalctl output, some useful options,
    journalctl -f   # follows like tail -f
    journalctl -x   # augment log lines with explanation texts
    journalctl -b   # since last boot

  System maintenance,
    journalctl -p 3 -xb   # Look for high priority errors since last boot.

System Control:
  Poweroff or restart system (when other users not logged on),
    systemctl poweroff
    systemctl reboot

  System maintenance,
    systemctl --failed

Pacman:
  System maintenance:
    sudo pacman -Syu        # Upgrade system,
                            #   -y, --refresh:
                            #     download fresh package list
                            #     from servers defined inpacman.conf(5)
                            #   -u, --sysupgrade: 
                            #     upgrade all packages that are
                            #     out  of date
    sudo pacman -Syu <pkg>  # Install package <pkg> (recommended).
    sudo pacman -Syuw       # Download packages without installing.
    sudo pacman -S <pkg>    # Just install package.
    sudo -Rs <pkg>          # Uninstall package & dependencies
                            # not required by other packages.
                            #    -s, --recursive
    sudo -Rsc <pkg>         # Also remove packages dependng on <pkg>,
                            #    -c, --cascade
    sudo -Rsu <pkg1> <pkg2>         # Only remove targets not
                                    # required by other packages,
                                    #    -u, --uneeded
    sudo -R <pkg>                   # Remove a single package.
    sudo pacman -Rs $(pacman -Qdtq)  # Uninstall unneeded packages.
    sudo pacman -Rns $(pacman -Qdtq) # Same as above, don't create
                                     # any .pacsave conf files.

  Search on packages, groups and descriptions:
    pacman -Qs <regex>   # search against local package database
    pacman -Ss <regex>   # search against synced (remote) package database

  Get information on packages:
    pacman -Qi <pkg>   # Use local package database
    pacman -Qii <pkg>  #   also include denendency and required by info
    pacman -Si <pkg>   # Use synced (remote) package database
    pacman -Sii <pkg>  #   also include denendency and required by info
    pacman -Qlq <pkg>  # List files associated with a package, use local database
    pacman -Flq <pkg>  # List files associated with a package, use synced databases

  Get package group information:
    pacman -Qg
    pacman -Sg
    pacman -Qg <grp>  # List packages in <grp>, use local database
    pacman -Sg <grp>  # List packages in <grp>, use synced database
    pacman -Qg | cut -f1 -d\  | uniq | sort  # List names of groups in local database
    pacman -Sg | cut -f1 -d\  | uniq | sort  # List names of groups in synced database

  Find the package which owns a particular installed file,
    pacman -Qo </full/path/to/file>
    pacman -Qoq </full/path/to/file>
  
  Query (local) package DB:
    pacman -Q      # List all installed packages.
    pacman -Qe     # List all explicitly installed packages.
    pacman -Qet    # List all explicitly installed packages not
                   #   reqired by other packages.
    pacman -Qdt    # List unneeded (orphan) packages
                   #    -d, --deps (restrict to packages
                   #       installed as dependencies of
                   #       other packages)
                   #    -t, --unrequired (restrict to
                   #       packages not required or
                   #       optionally required by other
                   #       packages)
                   #    -q, --quiet (omit version numbers, useful in scripts)
    pacman -Qmq    # List all foreign (usually AUR) packages.
    pacman -Qnq    # List all packages from the standard repos.

    pactree -c <pkg>    # Packages <pkg> depends on, -c for colorization
    pactree -u <pkg>    # List packages <pkg> depends on, only once
    pactree -rc <pkg>   # Packages depending on <pkg>
    pactree -ru <pkg>   # List packages depending on <pkg>, only once

  Pacman logs stored here: /var/log/pacman.log
  Pacman configuration: /etc/pacman.conf
  Pacman mirrors: /etc/pacman.d/mirrorlist


Hostnamectl:
  Get info on an Arch System,
    $ hostnamectl 
       Static hostname: gauss17
             Icon name: computer-laptop
               Chassis: laptop
            Machine ID: <snip>
               Boot ID: <snip>
      Operating System: Arch Linux
                Kernel: Linux 5.4.15-arch1-1
          Architecture: x86-64

  Other ways,
    $ pacman -Q | grep '^linux '
    linux 5.4.15.arch1-1

    $ uname -r
    5.4.15-arch1-1

    $ uname -a
    Linux gauss17 5.4.15-arch1-1 #1 SMP PREEMPT Sun, 26 Jan 2020 09:48:50 +0000 x86_64 GNU/Linux


Time management:
  Since I use the systemd-timesyncd client,

    $ timedatectl
                          Local time: Mon 2018-01-29 12:55:01 MST
                      Universal time: Mon 2018-01-29 19:55:01 UTC
                            RTC time: Mon 2018-01-29 19:55:01
                           Time zone: America/Denver (MST, -0700)
           System clock synchronized: yes
    systemd-timesyncd.service active: yes
                     RTC in local TZ: no

  Last line shows that HW clock, "real time clock," is not local time. 

  Reset the timezone to East Coast.
    $ timedatectl list-timezones | grep America/Ne
    America/New_York
    $ sudo timedatectl set-timezone America/New_York

  To check if hardware clock is set to UTC time,

    $ sudo hwclock --verbose
    hwclock from util-linux 2.35
    System Time: 1580671267.025714
    Trying to open: /dev/rtc0
    Using the rtc interface to the clock.
    Last drift adjustment done at 1498353865 seconds after 1969
    Last calibration done at 1498353865 seconds after 1969
    Hardware clock is on UTC time
    Assuming hardware clock is kept in UTC time.
    Waiting for clock tick...
    ...got clock tick
    Time read from Hardware Clock: 2020/02/02 19:21:08
    Hw clock time : 2020/02/02 19:21:08 = 1580671268 seconds since 1969
    Time since last adjustment is 82317403 seconds
    Calculated Hardware Clock drift is 0.000000 seconds
    2020-02-02 12:21:06.997828-07:00

  This shows HW clock is actually kept in UTC time.


Login Control:
    $ loginctl 
    SESSION  UID USER  SEAT  TTY  
          2 1000 geoff seat0 tty2 
          4 1000 geoff       pts/3
          5 1002 jd    seat0 tty4 
          7 1001 jb    seat0 tty5 
         c1  120 gdm   seat0 tty1
    
    $ loginctl show-session 2 -p Type
    Type=x11

    $ loginctl show-session 4
    Id=4
    User=1000
    Name=geoff
    Timestamp=Sun 2020-02-02 12:05:58 MST
    TimestampMonotonic=67119046169
    VTNr=0
    TTY=pts/3
    Remote=yes
    RemoteHost=::1
    Service=sshd
    Scope=session-4.scope
    Leader=16779
    Audit=4
    Type=tty
    Class=user
    Active=yes
    State=active
    IdleHint=no
    IdleSinceHint=1580670778717714
    IdleSinceHintMonotonic=67539111506
    LockedHint=no

    $ loginctl show-user geoff
    UID=1000
    GID=1000
    Name=geoff
    Timestamp=Sat 2020-02-01 17:27:43 MST
    TimestampMonotonic=23966084
    RuntimePath=/run/user/1000
    Service=user@1000.service
    Slice=user-1000.slice
    Display=2
    State=active
    Sessions=4 2
    IdleHint=no
    IdleSinceHint=1580659420065201
    IdleSinceHintMonotonic=56180458994
    Linger=no


DNSUTILS replacements:
  No longer have nslookup, dig, and host.

  getent replaces nslookup -

    $ getent hosts 8.8.8.8
    8.8.8.8         google-public-dns-a.google.com

    $ getent hosts dns1.fast.net
    205.147.200.114 dns1.corp.fast.net dns1.fast.net

    $ getent hosts www.fast.net
    64.80.108.108   www.fast.net

    $ getent hosts www.google.comm; echo $?
    2

  From the core/ldns package, drill replaces dig, hosts.

    $ drill dns1.fast.net
    ;; ->>HEADER<<- opcode: QUERY, rcode: NOERROR, id: 6512
    ;; flags: qr rd ra ; QUERY: 1, ANSWER: 2, AUTHORITY: 0, ADDITIONAL: 0 
    ;; QUESTION mount - mount a filesystemSECTION:
    ;; dns1.fast.net.	IN	A
    
    ;; ANSWER SECTION:
    dns1.fast.net.	86400	IN	CNAME	dns1.corp.fast.net.
    dns1.corp.fast.net.	86400	IN	A	205.147.200.114
    
    ;; AUTHORITY SECTION:
    
    ;; ADDITIONAmount - mount a filesystemL SECTION:
    
    ;; Query time: 414 msec
    ;; SERVER: 192.168.0.1
    ;; WHEN: Thu Jul  6 17:54:18 2017
    ;; MSG SIZE  rcvd: 71


Disk partitian grokking:
  Between these three commands

  parted - a partition manipulation program
  blkid - locate/print block device attributes
  mount - mount a filesystem

  You can reverse engineer your disk drives and how
  they are are carved up using these commands:

    $ sudo parted --list
    $ mount | grep '^/dev/'
    $ blkid
    $ lsblk -f
    $ df -hT

  What types of partitians do you have?

    $ df -hT
    Filesystem     Type      Size  Used Avail Use% Mounted on
    dev            devtmpfs  7.8G     0  7.8G   0% /dev
    run            tmpfs     7.8G  1.6M  7.8G   1% /run
    /dev/sda2      ext4      117G  101G  9.7G  92% /
    tmpfs          tmpfs     7.8G  274M  7.5G   4% /dev/shm
    tmpfs          tmpfs     7.8G     0  7.8G   0% /sys/fs/cgroup
    tmpfs          tmpfs     7.8G   16K  7.8G   1% /tmp
    /dev/sda1      vfat      511M   48M  464M  10% /boot
    /dev/sdb4      ext4      839G  181G  615G  23% /home
    /dev/sdb2      ext4       63G  3.7G   56G   7% /extra
    tmpfs          tmpfs     1.6G   28K  1.6G   1% /run/user/120
    tmpfs          tmpfs     1.6G   44K  1.6G   1% /run/user/1000
    /dev/sdc1      fuseblk    75G  135M   75G   1% /run/media/geoff/BUSLINK

    $ mount | grep '^/dev'
    /dev/sda2 on / type ext4 (rw,relatime)
    /dev/sda1 on /boot type vfat (rw,relatime,fmask=0022,dmask=0022,codepage=437,
        iocharset=iso8859-1,shortname=mixed,utf8,errors=remount-ro)
    /dev/sdb4 on /home type ext4 (rw,relatime,data=ordered)
    /dev/sdb2 on /extra type ext4 (rw,relatime,data=ordered)
    /dev/sdc1 on /run/media/geoff/BUSLINK type fuseblk (rw,nosuid,nodev,relatime,
        user_id=0,group_id=0,default_permissions,allow_other,blksize=4096,uhelper=udisks2)

    $ lsblk -f
    NAME   FSTYPE FSVER LABEL   UUID                                 FSAVAIL FSUSE% MOUNTPOINT
    sda                                                                             
    ├─sda1 vfat   FAT32         A024-8139                             463.1M     9% /boot
    └─sda2 ext4   1.0           0859da7c-f429-470d-818f-d3951b5d89af    9.7G    87% /
    sdb                                                                             
    ├─sdb1 vfat   FAT32         BC00-6365                                           
    ├─sdb2 ext4   1.0           4b1b0623-c1d0-4da9-8164-20ee74253def   55.5G     6% /extra
    ├─sdb3 swap   1             a5945738-343f-4cfb-ad76-8ca012eb2576                [SWAP]
    └─sdb4 ext4   1.0           833c2579-bc84-463a-96a4-89478bd89e9e  614.6G    22% /home
    sdc                                                                             
    └─sdc1 ntfs         BUSLINK 5E746ADE746AB903                       74.4G     0% /run/media/geoff/BUSLINK

    $ sudo parted --list
    Model: ATA Patriot Torch II (scsi)
    Disk /dev/sda: 128GB
    Sector size (logical/physical): 512B/512B
    Partition Table: gpt
    Disk Flags: 

    Number  Start   End    Size   File system  Name  Flags
     1      1049kB  538MB  537MB  fat32              boot, esp
     2      538MB   128GB  127GB  ext4


    Model: ATA WDC WD10JPVX-22J (scsi)
    Disk /dev/sdb: 1000GB
    Sector size (logical/physical): 512B/4096B
    Partition Table: gpt
    Disk Flags: 

    Number  Start   End     Size    File system     Name  Flags
     1      1049kB  538MB   537MB   fat32                 boot, esp
     2      538MB   68.7GB  68.2GB  ext4fuse file system
     3      68.7GB  85.9GB  17.2GB  linux-swap(v1)        swap
     4      85.9GB  1000GB  914GB   ext4


    Model: SAMSUNG HM080HI (scsi)
    Disk /dev/sdc: 80.0GB
    Sector size (logical/physical): 512B/512B
    Partition Table: msdos
    Disk Flags: 

    Number  Start   End     Size    Type     File system  Flags
     1      1049kB  80.0GB  80.0GB  primary  ntfsfuse file system

  Notr that df -T and mount command report fuseblk instead of the
  underlying NTFS filesystem.  FUSE (Filesystem in USEr space)
  filesystem can in principle access filesystems unknown to
  the Linux Kernel.  (FUSE has long since been folded into the
  Linux Kernel.)
