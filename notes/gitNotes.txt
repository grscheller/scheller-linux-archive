These are the notes I update as I learn more about the GIT source code
revision control suite.

Most Linux distributions have a good GIT tutorial in the man pages.

    $ man gittutorial

To get a comprehensive overview of git, use

    $ man git

and to get information on individual commands

    $ man git-add
    $ man git-info

or using the --help option to git

    $ git --help
    $ git clone --help

Three ways to get help are

    $ git help <verb>
    $ git <verb> --help
    $ man git-<verb>

Original resources I used for these notes:
http://www.git-scm.com/book/en/v2 (ProGIT book)
https://www.atlassian.com/git/tutorials/setting-up-a-repository
https://help.github.com
https://www.garron.me/en/articles/git-101-basics-introduction-basic-use-commands.html

Stack Overflow, before being overrun by the "no opinionated content"
trolls, contained lots of good "from the trenches" best practices
advice on GIT.

I. Getting started with some configuration.

    1. Three places git stores config info:

       1. /etc/gitconfig or /usr/local/gitconfig
       2. ~/.gitconfig or ~/.config/git/config
       3. config file in the .git directory of whatever repository

       Each one overrides the one above.

    2. Set up your identity:

         $ git config --global user.name "John Doe"
         $ git config --global user.email john.doe.2@us.af.mil

       If you want to override these settings for a specific project,
       run the above commands without the --global option when in
       that project.

    3. To customize editor:

         $ git config --global core.editor nvim

    4. To list the settings set so far:

         $ git config --list

       for a specific setting:

         $ git config user.name

    5. Let's see where GIT finds config info on Arch Linux:

         $ git config --list --show-origin
         file:/home/grs/.gitconfig       user.name=grscheller
         file:/home/grs/.gitconfig       user.email=geoffrey@scheller.com
         file:/home/grs/.gitconfig       core.editor=nvim
         file:/home/grs/.gitconfig       core.pager=nvim -R
         file:/home/grs/.gitconfig       pull.rebase=false
         file:/home/grs/.gitconfig       color.pager=no
         file:.git/config        core.repositoryformatversion=0
         file:.git/config        core.filemode=true
         file:.git/config        core.bare=false
         file:.git/config        core.logallrefupdates=true
         file:.git/config        remote.origin.url=git@github.com:grscheller/scheller-linux-archive
         file:.git/config        remote.origin.fetch=+refs/heads/*:refs/remotes/origin/*
         file:.git/config        branch.master.remote=origin
         file:.git/config        branch.master.merge=refs/heads/master

       Let's see where GIT finds config info on MacOS (Darwin):

         $ git config --list --show-origin
         file:/usr/local/etc/gitconfig	credential.helper=osxkeychain
         file:/Users/geoffreyscheller/.gitconfig	user.name=grscheller
         file:/Users/geoffreyscheller/.gitconfig	user.email=geoffrey@scheller.com
         file:/Users/geoffreyscheller/.gitconfig	core.editor=nvim
         file:/Users/geoffreyscheller/.gitconfig	core.pager=nvim -R -c 'setfiletype git'
         file:/Users/geoffreyscheller/.gitconfig	color.pager=no
         file:/Users/geoffreyscheller/.gitconfig	pull.rebase=false
         file:.git/config	core.repositoryformatversion=0
         file:.git/config	core.filemode=true
         file:.git/config	core.bare=false
         file:.git/config	core.logallrefupdates=true
         file:.git/config	core.ignorecase=true
         file:.git/config	core.precomposeunicode=true
         file:.git/config	remote.origin.url=git@github.com:grscheller/scheller-linux-archive
         file:.git/config	remote.origin.fetch=+refs/heads/*:refs/remotes/origin/*
         file:.git/config	branch.master.remote=origin
         file:.git/config	branch.master.merge=refs/heads/master

       Later info overrides earlier info.

    6. You can use the --edit option to edit your config files in place.

       Within a GIT repo. use

         $ git config --edit

       To edit your global configuration, use

         $ git config --global --edit

       Unlike doing it from the command line, GIT will not catch errors
       and typos immediately.

II. Getting a GIT Repository

    1. Initializing a repository in an existing directory:

         $ cd /path/to/an/existing/directory
         $ git init

       This creates a .git subdirectory (a GIT repository skeleton).

       Add files to this repository:

         $ git add *.c *.py
         $ git add LICENSE README.txt
         $ git commit -m 'initial project version'

    2. Cloning an existing repository:

         $ git clone https://github.com/libgit2/libgit2
         $ git clone https://github.com/libgit2/libgit2 mylibgit
         $ git clone schelleg@us.navo.hpc.mil:proj/grsHome.git

       This is not just a checkout, it clones the entire repository of
       change control files. (Does not clone some of the server side
       settings.) The second version changes the name of the GIT
       repository directory from libgit2 to mylibgit.

       Transfer protocols:

          https://
          git://
          user@server:path/to/repo.git      (this uses ssh)

    3. Setting up a local shared repository:

       A bit "old school" but I have found doing this useful when two
       contractors are working on the same code base but don't have
       access to each other's GIT repos. The only thing they share are
       access to the same Linux based computer.

       Lets assume everyone is in the repos group

         $ umask 0007
         $ ls -ld /share/repos
         drwxrws---. 7 repos repos 4096 Dec 12 09:17 /share/repos
         $ cd /share/repos
         $ git init --bare ourProject.git

       This initializes an empty GIT repository, but omit the working
       directory. Shared repositories should always be created with the
       --bare flag. The ourProject.git directory will be
       a subdirectory. (Equiv to a .git directory, but without the
       parent working directory.) Think --bare as marking the repository
       as a storage facility as opposed to a development environment.

       Now connect up our empty naked repository to somewhere where we
       have done some prior GIT based development work:

         $ cd ourProject.git
         $ git remote add localDevel /home/schelleg/devel/myProject
         $ git fetch localDevel
         $ git fetch --tags localDevel

       This will bring in all the branches and tags. In the localDevel
       development environment repo, I like to reference our new
       colaboritive repo as origin:

         $ cd /home/schelleg/devel/myProject
         $ git remote rm origin
         $ git remote add origin /share/repos/ourProject.git

       Make sure your umask is set so that all the files in
       ourProject.git don't get created without the necessary group
       permissions. GIT will function, but with subtly bizzare behavior.

    4. If you are starting a new project, setting up a shared repo is
       a bit easier. Create the the bare shared repository, clone it,
       add the initial files to the clone and push it back to the shared
       repo.
`
         $ git clone /share/repos/ourProject.git
         $ cp ourProject_150605/* ourProject
         $ cd ourProject
         $ git add *
         $ git commit
         $ git push origin master

    5. To "rename" the directory that a GIT repository is in, first note
       that that git does not care about the name of the directory the
       repository is in. The client just needs to know where to point.

       On the server:

         $ mv PAT.git SDT.git

       On the client:

         $ git remote rm origin
         $ git remote add origin schelleg@us.mhpcc.hpc.mil:projects/SDT.git

       Note: you may need to tell a branch what its upstream now is

         $ git checkout master
         $ git branch -u origin/master
         $ git fetch origin

    6. Cloning from another working repo.

       Let's say I have a working repo in ~/Devel/SDT

         $ cd ~/Devel/SDT

       Make sure we are in a stable state

         $ git status
         # On branch sdt_devel_branch
         nothing to commit (working directory clean)

       See what branches are here

         $ git branch
           sdt_production_branch
         * sdt_devel_branch
           master

       Let's clone the repo

         $ cd ../..
         $ mkdir temp
         $ cd temp
         $ git clone ../Devel/SDT
         Initialized empty GIT repository in /home/schelleg/temp/SDT/.git/

       Let's see what we got

         $ cd SDT
         $ git branch
         * sdt_devel_branch
         $ git remote -v
         origin    /home/schelleg/temp/../Devel/SDT (fetch)
         origin    /home/schelleg/temp/../Devel/SDT (push)

       We only picked up the currently active branch. I will sometimes
       do this to have a quick and dirty snapshot of a working copy of
       the software. Also, I can "rm -rf .git" and either tar ball or
       burn to DVD what I want to give someone. Just make sure you do
       this in ~/temp/SDT and not in ~/Devel/SDT !!!

    7. Fetch command updates local copies of remote branches.

         $ git fetch origin

       will update information of local copies of all remote branches.

         $ git fetch --all

       will do this with all remote repositories your local repo knows
       about.

       Note: "git fetch" commands will not create local branches to
       track remote branches. You must do a "git checkout" for each new
       branch you want to track. The "git pull --all" command will only
       pull from branches you currently track.

    8. Overiding global configurations when cloning a repo:

         $ git clone -c user.email=me@myotheremail.com \
             -c http.sslcainfo=/home/geoff/.ssh/Cert_dropbox_wont_have.crt \
             -c http.verify=true \
             https://aur.archlinux.org/dropbox.git

       You can use --config instead of -c.

    9. Listing the commit comments made in the repo:

         $ git log

       For a give director in the repo:

         $ git log grok/Haskell

       For a given file in the repo:

         $ git log adminLogs/gauss17ArchLinuxAdmin.log

   10. Go to github.com or gitlab.com and create yourself an empty GIT
       repo for your project, using their webtools.

       Many young developers conflate GIT with GitLab. You don't know
       GIT until you can use it without a browser or IDE.

III. Lifecycle of files:

     Untracked         Unmodified         Modified           Staged
         |                  |                 |                 |
         |---Add file------------------------>|                 |
         |                  |---Edit file---->|                 |
         |                  |                 |---Stage file--->|
         |<---Remove file---|                 |                 |
         |                  |<--------------------Commit file---|

IV. GIT Basics:

    1. Checking status of files:

         $ git status
         $ git status --short
         $ git status -s

    2. To begin tracking a files:

         $ git add myfile.c    (myfile.c is now staged)
         $ git add directory   (all files staged recursively)

       Think of add as meaning "add this content to the next commit"
       rather than "add this file to the project." GIT stages the file
       as it was when 'git add' command was issued. If you modify a file
       after it was staged, you have to add it again to pick up the
       latest changes.

    3. To unstage a file:

         $ git restore --staged <file>

       A clear improvement over how this was done in older versions of
       GIT,

         $ git reset HEAD <file>

       where HEAD is a special ref that points to the commit that
       currently is checked out. The git-restore command it is more
       clear as to what is being done. The git-reset command seems to be
       taking advantage of GIT implementation details and is opaque to
       what is really being done.

    4. To discard changes:

         $ git checkout <file>

V. Ignoring files:

    Use a .gitignore file to make GIT ignore files.

    Example:
      # ignore all .a files
      *.a

      # but do track lib.a, dispite ignoring all .a files above
      !lib.a

      # only ignore the root TODO file, not subdir/TODO
      /TODO

      # ignore all files in the build/ directory
      build/

      # ignore doc/notes.txt, but not doc/server/arch.txt
      doc/*.txt

      # ignore all .txt files in the doc/ directory tree
      doc/**/*.txt

    1. Blank lines and lines starting with # are ignored
    2. Extended shell globbing patterns work
    3. End patterns with a forward slash (/) to specify a directory
    4. Negate a pattern by starting it with an exclamation point (!)
    5. Two asterisks match nested directories

VI. Moving and removing files.

    To remove files:

    1. While the files or directories still exist,

         $ git rm file1 file2 dir1
         $ git commit

       Sometimes you will need to do a

         $ rm file1 file2

       to actually get rid of them from your working directory. If the
       current working versions are different than what is in the
       repository, GIT will treat the files as an unstaged local
       change. You run into this a lot when files are removed upstream.

    2. Lets say you want to remove lots of files. For example, lets get
       rid of all the subversion directories (since we are using GIT).

         $ find . -depth -name '.svn' -exec rm -rf '{}' \;

       best practice is to

         $ git add -u
         $ git commit

       The -u option only matches files in the index rather than the
       working tree. This will save you from having to do a lot of
       tricky bash shell scripting like

         $ git rm $(git status | grep delete | awk '{print $3}')
         $ git commit

       which will also work.

    3. Updating major changes, such as a vendor upgrade, with file
       additions and removals, in a brute force sort of way, use

         $ git add -A
         $ git commit

       The -A (or --all) option is like -u (or --update) except that it
       also will match against files in the working tree.

       For better fidelity, especially when dealing with directory
       structure changes, one might want to use git mv commands.

    To move files:

    4. To move files

         $ git mv path/to/filename new/path/to/new_filename
         $ git commit

       GIT will move and rename the file before the commit. If you move
       a file with unstaged changes, the original version is what will
       get commited. The changes made to the file will be an unstages
       change within the working directory.

       Usual Unix mv command semantics apply.

    5. To move a bunch of files to a new directory

         $ mkdir new_dir
         $ git add file1 file2 file3
         $ git mv file1 file2 file3 new_directory
         $ git commit

    6. To delete an empty directory.

       GIT does not track directories, only files. You can't use "git
       rm" to remove a directory and push change.

       A good habit is to periodically use

         $ git clean -dn

       to see what needs cleaning up. Either manually clean up or use

         $ git clean -df

       where

         -d "remove untracked directories too"
         -n "dry run, just show what to remove"
         -f "force"
         -i "interactive mode"
         -e <pattern> "Add pattern to ignored patterns from .gitignore files"
         -x "don't use ignore rules from .gitignore files"
         -X "remove only files ignored by git"

       either -n, -f, or -i must be selected.

VII. Creating revisionist history via git rebase:

    Rewriting your history, don't do this if you have already shared it!!!

    The 'git rebase' command comes in handy when you need to reorder
    commits, change commit messages, squash commits together. A
    reasonable reason for squashing commits might be enforcing a policy
    of never pushing non-working history to a software release branch.

    Also, useful when you want to hide your dirty laundry, or if you
    want everyone to think you are a "genius" programmer. Please, don't
    hide your scaffolding from the history. It may come in handy when
    reworking the code, or to understand how an architecture arose, or
    how you think.

    1. Redo the last 4 commits:

         $ git rebase -i HEAD~4

       Drops you into an editor session:

         pick 8c4a6a5 Commit message four commits ago.
         pick 4a3f436 Commit message three commits ago.
         pick 949e05d Commit message two commits ago.
         pick 8ae51b6 Commit message on last commit.
         ...

       And gives you the following choices to edit into above:

         # p, pick = use commit
         # r, reword = use commit, but edit the commit message
         # e, edit = use commit, but stop for amending
         # s, squash = use commit, but meld into previous commit
         # f, fixup = like "squash", but discard this commit's log message
         # x, exec = run command (the rest of the line) using shell
         # d, drop = remove commit

       In the case of a merge conflict, GIT drops you back to a shell.
       Fix the conflict, and

         $ git add ...
         $ git rebase --continue (or git rebase --abort)

    2. If you have not pushed your changes upstream, you can use the
       'git commit --amend' to update the last commit. GitHub will
       refuse a push with such an amended commit if a previous version
       was already pushed. You will need to do a `git merge' the
       upstream version into your work to make your HEAD pushable.

VIII. GIT branch:

    Note that all branches really are just pointers to commits.

    1. List all available local branches:

         $ git branch

       To also see the remote tracked branches:

         $ git branch -a
           Anansi
           astrolog-java
           bar-mph
           silverdb
           silver_grs_oneToolbar
         * master
           oneToolbar
           remotes/origin/Anansi
           remotes/origin/HEAD -> origin/master
           remotes/origin/astrolog-java
           remotes/origin/bar-mph
           remotes/origin/silverdb
           remotes/origin/silverdb_grs_oneToolbar
           remotes/origin/master

    2, View merged local GIT branches relative to current branch

         $ git branch --merged

       and unmerged local GIT branches

         $ git branch --no-merged

    3. Create a new branch (does not checkout the branch)

         $ git branch myBranch

       This branch is based on the current branch checked out.

    4. Create a new local empty branch

         $ git checkout --orphan newBranch

       This will create a new branch without any commit. The first
       commit will start a new history without any ancestry. The
       --orphan option will keep the index and working tree files intact
       in order to make it convenient for creating a directory structure
       and files resembling the ones from the current branch.

    5. Delete a branch (safe, git will prevent you if you
       have unmerged changes)

         $ git branch -d myBranch

       Force delete a specified branch. (This will permanently
       throw away all unmerged changes)

         $ git branch -D myBranch

    6. Delete a remote branch or tag

         $ git push origin --delete myBranchToDelete

       prior to git version 7.0 (and will still work)

         $ git push origin :myBranchToDelete

    7. Delete references to remote branches that no longer exist on the
       remote repo.

         $ git fetch -p
         $ git fetch -p some_remote_repo
         $ git fetch -p origin

    8. Rename a GIT Branch

         $ git branch -m oldname newname

    9. Rename current branch to new name

         $ git branch -m myNewName

   10. Delete an existing branch

       To delete local branch:

         $ git branch -d the_local_branch

   11. Delete an existing (local) remote tracking branch

         $ git branch -d -r origin/macos

   12. Figuring out what exactly your branches are actually tracking:

         $ git branch -vv
         car-mhf         b819996 [origin/car-mhf] Fixed awkward language in a comment to make more clear.
         goldsdb         41d7446 [origin/goldsdb] The initial View Table now contains 1 empty row.
         master          28f7355 [origin/master] Up dates Resources/DTIC_GIT_Notes.txt with notes on:
         * scheller-master 2c7336f [scheller/master: ahead 1] An updater to the root README.md file.

         $ git remote -v
         origin  https://geoffrey.scheller@repos.vdl.afrl.af.mil/git/astrodynamics/astrodynamics.git (fetch)
         origin  https://geoffrey.scheller@repos.vdl.afrl.af.mil/git/astrodynamics/astrodynamics.git (push)
         scheller    ../../../scheller-linux-archive/ (fetch)
         scheller    ../../../scheller-linux-archive/ (push)

IX. GIT checkout:

    The git checkout command lets you navigate between branches.
    Checking out a branch updates the files in the working directory to
    match the version stored in that branch, and it tells GIT to record
    all new commits on that branch. Think of it as a way to select which
    line of development you’re working on.

    1. Check out an existing branch

         $ git checkout existingBranch

    2. Can also create a new branch at checkout

         $ git checkout -b newBranch

       or base it on another existing branch instead of
       the current one.

         $ git checkout -b newBranch anotherBranch

    You can work on multiple branches in a single repository by
    switching between them with git checkout.

    3. Check out a branch you don't have locally from origin (the repo
       you are tracking from - usually the one you first cloned from).

         $ git fetch
         $ git checkout some_new_remote_branch

    4. If you are tracking several remote branches, you need to be a bit
       more specific:

         $ git checkout -b some_branch remote-name/some_branch

    5. Lets say we have two remotes each with a branch with same name.

         $ git branch -r
           origin/copperDB
           origin/dmc_run
           origin/master
           origin/spaceRad
           scheller/master

       And we are already tracking origin/master.

         $ git branch
           copperDB
           dmc_run
         * master

       How do we checkout scheller/master? We give it another name:

         $ git checkout -b scheller-master --track scheller/master

       Now we have,

         $ git branch
           copperDB
           dmc_run
           master
         * scheller-master

X. GIT merge:

    The git merge command is used to merge another branch into your
    current branch. If merge successful without conflicts, you are
    done. If not, changes merged into your working directory with GIT
    putting comments in the code. In this case, you still need to
    resolve the conflicts and do a git commit.

    1. Merge a specific branch into the current branch.

         $ git merge someBranch
         <edit any conflicts, "git add" changes, commit if needed>

    2. Example of a 3-way merge:

       Start a new feature

         $ git checkout -b new-feature master

       Edit some files

         $ git add <file>
         $ git commit -m "Start a feature"

       Edit some files

         $ git add <file>
         $ git commit -m "Finish a feature"

       Develop the master branch

         $ git checkout master

       Edit some files

         $ git add <file>
         $ git commit -m "Make some super-stable changes to master"

       Merge in the new-feature branch

         $ git merge new-feature
         $ git commit

       Delete the new-feature branch (Once things safely merged in no
       sense keeping useless dirty laundry around. Best practices is to
       only push to origin stable changes.)

         $ git branch -d new-feature

       Remove a file from the branch (not the history)

         $ git rm <FileName>

    3. Periodically sync in changes from master:

       Start a new feature

         $ git checkout -b long-term-feature master

       Do some development for a while
         ...

       Switch to master and sync up with origin/master

         $ git checkout master
         $ git pull origin master

       Switch back to development branch and merge
       in changes from master

         $ git checkout long-term-feature
         $ git merge master
         <edit any conflicts, "git add" changes, commit when needed>

       Continue long-term development
         ...

XI. Syncing repositories:

    1. List remote connections.

         $ git remote
         origin

       Use -v for more info.

       $ git remote -v
       origin schelleg@us.navo.hpc.mil:proj/PAT (fetch)
       origin schelleg@us.navo.hpc.mil:proj/PAT (push)

       The name, this case origin, can be used as a short cut to the
       other repository in git commands. The name origin is the default
       name given to the reprository you clone from, otherwise there is
       nothing special about it.

    2. Add a remote connection.

         $ git remote add ethel emurtz@devel.desilu.com:repo/iHateFred

    3. Remove the connection.

         $ git remote rm ethel

    4. Rename connection.

         $ git remote rename old_name new_name

       Developers need to pull upstream commits to their local
       repository and push local commits to other repositories. Having
       connections to other individual developers makes it possible to
       collaborate outside of the main (or blessed) repository. This can
       be very useful for small teams working on a large project.

    5. Make an existing branch track a remote branch.

       As of GIT 1.8.0

         $ git checkout bar
         $ git branch -u upstream/foo

       Now your local branch bar is tracking the branch foo on the
       remote repo upstream.

       If you are on a branch other than bar,

         $ git branch -u upstream/foo bar

       if you like longer options, in 1.8.0+ you can do

         $ git branch --set-upstream-to=upstream/foo bar

       To keep things simple, best practices is to rename upstream to
       origin and your local repo bar to foo.

    6. GIT fetch imports commits from a remote repository, giving you
       chance to review changes before integrating them into the local
       copy of the project.

         $ git fetch origin

       For only one branch, use

         $ git fetch origin someBranch

    7. Use 'git branch' to view local branches and
       use 'git branch -r' for remote branches. Inspect these
       branches with the ususal git chechout and git log commands.

    8. GIT pull (bring in remote changes). This command fetches from and
       integrates with another repository or local branch. The
       'git pull' command is shorthand for 'git fetch' followed by
       'git merge FETCH_HEAD'

         $ git pull origin someBranch

       To pull from the branch you are tracking with
       the current branch, use

         $ git pull

       Warning!!!

         $ git pull origin someBranch

       will pull in from "someBranch" even if you
       are on "someOtherBranch".

       Best practice is:

         $ git fetch origin  # So local repo knows of remote changes.
         $ git status        # So we are sure we are where we think.
                             # This will also give other potentially
                             # useful info to keep yourself from
                             # shooting yourself in foot.
         $ git pull

       Now, the "git status" may tell us we can't just do a fast
       foreward. In that case, create a new local branch to track the
       remote branch and do a git merge (see IX).

    9. The command,

         $ git pull

       is actually the same as doing

         $ git fetch
         $ git merge origin

       which is the same as, assuming you have checked the master branch
       out, and it is setup to track origin/master.

         $ git fetch origin         <- Sync local copy of master
                                       with master on origin.
         $ git merge origin/master  <- Merge local copy from last
                                       fetch from origin into your
                                       local version of master.

       What you are actually merging into your working directory is
       a local copy of the remote repo. You are "tracking" the local
       copy. If pull requires a password, then the fetch will too, but
       not the merge. The git fetch is syncing your local copy with what
       is on the remote.

       More explicitly,

         git checkout master             <- or whatever branch
         git fetch origin                <- fetch all tracked upstream changes
         git merge origin/master         <- local copy of upstream branch

     Remote         {   Repository  }       Index     Workspace
       |             track     local          |           |
       |               |         |            |           |
       |---pull------------------------------------------>|
       |           :   |         |            |           |
       |           --->|         |            |           |
       |               |         |            |<----add---|
       |---fetch------>|         |            |           |
       |               |         |<--commit---|           |
       |               |<---     |            |           |
       |               |   :     |            |           |
       |<-----------------push---|            |           |
       |               |         |            |           |

   10. GIT push (push local changes elsewhere):

         $ git push origin <branch>
         $ git push origin master
         $ git push origin --all
         $ git push origin --tags

       The commands (with nothing else)

         $ git push
         $ git push origin

       should be avoided on older versions of GIT. On git 1.9.5, it will
       push all tracked branches to their remotes. In later versions of
       git, it will just push whatever branch you are currently on.

       To remove a remote branch or tag, do

         git push --delete <Remote_Name> <Branch_or_Tag_Name>

       On older versions og GIT,

         $ git push <Remote_Name> :<Branch_Name>

       note the space before the colen, similar to renaming a branch,
       you are pushing "nothing" into BranchName.

       To push a tag,

         $ git push <RemoteName> <TagName>

       to push all tags,

         $ git push <RemoteName> --tag

   11. GIT push (to GITHUB):

       Cloning from GITHUB sets the URL to origin as

         $ git config remote.origin.url
         https://github.com/grscheller/scheller-linux-environment

       On Arch Linux "git push" prompts for username and password and
       everything works fine. On CentOS 6.8 (git version 1.7.1) I get
       the error:

         $ git push
         error: The requested URL returned error: 403 Forbidden while accessing https://github.com/grscheller/scheller-linux-environment/info/refs
         fatal: HTTP request failed

       To fix this, set the URL to

         $ git config remote.origin.url https://grscheller@github.com/grscheller/scheller-linux-environment.git

       Not recommended, but setting it to
       "https://grscheller:MYPASSWORD@github.com/grscheller/scheller-linux-environment.git"
       would allow you to not have to type your password.

       I think the issue is because of the really olde version of git
       that CentOS 6.8 uses, but it might also be related to firewall
       proxy issues.

       Interesting factoid:
         When I changed the name of a repo from
         scheller-linux-environment to scheller-linux-archive,
         above value for remote.origin.url still worked, but
         changing the repo name part of it to something random
         like, like scheller-linux-foofoo, failed.

   12. Using SSH with GITHUB:

       From the GITHUB website, go to

         Settings -> SSH and GPG keys

       Paste contents of ~/.ssh/id_rsa to the SSH text box. Leave
       off system name at end. No newlines.

       Next, from the repo, tell git to use ssh protocal,

         $ git remote set-url origin git@github.com:grscheller/scheller-linux-archive

       Now,

         $ git remote -v
         origin     git@github.com:grscheller/scheller-linux-archive (fetch)
         origin     git@github.com:grscheller/scheller-linux-archive (push)

       Able to push to GITHUB without the password.

       I created a shell alias to restart the ssh-keyserver if it should
       ever get hung.

         $ alias addkey
         alias addkey='eval $(ssh-agent) && ssh-add'

XII. Tagging:

    1. List available tags.

         $ git tag

       This will list all current tags in alphabetical order.
       To refine search,

         $ git tag -l 'v1.8.*'
         $ git tag -l '*foo*'

    2. Creating Tags.

       There are two types of tags, lightweight and annotated. A
       lightweight tag is like a branch that does not change - it is
       just a pointer to a specific commit. Annotated tags are stored as
       full objects in GIT database. They have tagger name, e-mail
       address, date, and can be signed with GNU Privacy Guard.

       To create an annotated tag, use -a:

         $ git tag -a v1.0 -m 'Original DVS code gotten from David Steller'

    3. Pushing tags.

       By default, git push does not push tags. To explicitly push a tag,

         $ git push origin v1.0

       To push all available tags, use the --tags option on git push.

         $ git push origin --tags

    4. Checking out tags.

       To create a new branch at a specific tag:

         $ git checkout -b version2 v2.0.0

    5. Deleting tags (local and remote).

       To delete local tag:

         $ git tag -d tag_to_delete

       To delete off of a remote repo:

         $ git push origin :refs/tags/tag_to_delete

    6. Show info about a tag, use show cmd.

         $ git show tag_name

XIII. Examining previous versions of a file:

    1. Use 'git show' to view a previous version of file,

         $ git show REVISION:path/to/file

       for example

         $ git show HEAD~3:PAT_Files/mfiles/FilterValuesPanel.m

       will send the third version back of the file to a pager.

         $ git show HEAD~1:pat.m > junk

       will dump it all to a file called junk.

         $ git show HEAD@{2022-03-30}:./config/nvim/lua/grs/init.lua

       will show the version of the file as of that date.

         $ git show HEAD@{2022-03-30}:./config/nvim/lua/grs|cat
         tree HEAD@{2022-03-30}:./config/nvim/lua/grs

         Colorscheme.lua
         Completions.lua
         DevEnv.lua
         Options.lua
         Packer.lua
         Telescope.lua
         TextEdit.lua
         Treesitter.lua
         WhichKey.lua
         init.lua

       which lists the files in that directory as of that date.

         $ git show HEAD@{2022-06-4}

       will list the commit messages and diffs for that day.

    2. Use 'git log' to view the revision history a of file,

         $ git log -p --follow config/nvim/init.lua

       The -p tells git to show all patch information.
       the --follow to follow the history even in the event
       that the file name was changed.

XIV. GIT revision history tools:

    1. To show commit comments for history

         $ git log

       To shows history of both commits A and B (a Union)

         $ git log A B

       To include diff info with commit comments

         $ git log -p

       First line summaries of commit messages

         $ git log --oneline

       To get the most out of git log, remember the
       seven rules of a great GIT commit message:

         - Separate subject from body with a blank line
         - Limit the subject line to 50 characters
         - Capitalize the subject line
         - Do not end the subject line with a period
         - Use the imperative mood in the subject line
         - Wrap the body at 72 characters
         - Use the body to explain what and why vs. how

       Above taken from:

         https://chris.beams.io/posts/git-commit/

    2. git diff

       Let's say we have three branches, main, feature1 and feature2.

       First, lets see how to compare two specific files in two
       specific branches against each other. Output will be similar
       to the Unix diff command.

         $ git diff feature1:file1 feature2:file2

       The line between the files which are the same will be colored
       white. Red will be the items in file1 not in file2. Green
       will be for items in file2 not in file1. Left red, Right green.
       The red lines will begin with a '-', the green lines a '+'.

       Compare two branches. If you leave off the `:`, git usually
       guesses correctly what you mean. I like to be non-ambiguous.

         $ git diff main: feature1:

       Comparing past version with what is in the working directory

         $ git diff HEAD~2:DVS.m DVS.m

             note: 2 revisions ago, not necessarily
                   in the same branch!

       Comparing a file between branches-

         $ git diff new_feature:DVS.m master:DVS.m


       If given only one argument, compare with the working directory.

    3. git show

       Very versatile command. Commit ranges a..b will be resolved to
       show each commit individually. Files can be specified via syntax
       commit:path/to/file. Pass it a directory, it will show info of
       the last commit changing that directory.


    4. The range A...B means every commit reachable by A or B
       but not both.

       with git log   it will show you those commits it makes
                      when used with divergent branches.

       with git diff  it is syntactic sugar for
                      git diff $(git merge-base A B) B

       with git show  will jush show commit info for each
                      single commit in that range.

    5. git merge-base finds the best common ancestor for a
                      three way merge

    6. Look into git-rev-list and git-show-branch.

    7. Find all the "roots" of a repo,

         $ git rev-list --max-parents=0 HEAD
         4a0c3cff3b6d192effeb44bc2d8429c5e9f85825
         6e886a1b01a10f39b53bf8b90dba4c73625f4353

    8. Finding the first commit a file appeared,

         $ git log --oneline -- Actor.scala | tail -n 1
         d71adde Implemented book's nonblocking fpinscala.parallelism package.
         Blocking version now package fpinscala.parallelism.javaFutures.

       Then search for equivalent of "d71adde" in a git log.

XV. Using Neovim as GIT Pager:

  You need to turn color off in GIT and let nvim do colorization.

    $ git config --global color.pager no
    $ git config --global core.pager "nvim -R 'setfiletype git'"

  The '-R' means read-only, setting the file type ensures neovim
  it is working with GIT related files.

XVI. GIT Stash:

  Store away current state of working directory and the index and goes
  back to a clean working directory:

    $ git stash push

      or just

    $ git stash

  Drop the last stash entry from the list of stash entries:

    $ git drop

  Pop changes back into working directory, perhaps on a subsequent
  commit:

    $ git stash pop

    This may fail due to conflicts due to changes being applied at the
    commit that was HEAD at the time of the stash. Resolve the conflict
    and use git drop.

  Remove all stash entries:

    $ git stash clear

  Note, entries will be subject to pruning, so there may be no way to
  recover these changes.

  Typical workflow when following a remote repo:

    $ git stash
    $ git pull
    $ git stash pop

XVII. Git Forking from GitHub (not GitHub forking):

  A GitHub project does almost what you want to do.

  Go to the repo in question via the GitHub and fork the repository:

    https://github.com/folke/tokyonight.nvim

  Now, clone your version of the repo

    $ cd ~/devel
    $ git clone https://github.com/grscheller/tokyonight.nvim

  Update something and push changes back to your fork

    $ nvim README.md
    $ git add .
    $ git commit
    $ git push

  Let my fork know about the upstream repo (git name "upstream")

    $ git remote add upstream https://github.com/folke/tokyonight.nvim

  Let's see what we have

    $ git remote -v
    origin	https://github.com/grscheller/tokyonight.nvim (fetch)
    origin	https://github.com/grscheller/tokyonight.nvim (push)
    upstream	https://github.com/folke/tokyonight.nvim (fetch)
    upstream	https://github.com/folke/tokyonight.nvim (push)

    $ git branch --all
    * main
      remotes/origin/HEAD -> origin/main
      remotes/origin/main
      remotes/upstream/main

  Merge in upstream changes

    $ git merge upstream/main
    Already up to date.



TODO: Merge the following in -

To create a temporary branch and push it upstream.

$ git branch tmpWork
$ git stash
$ git checkout tmpWork
$ git stash apply
$ git add .
$ git commit
$ git push -u origin tmpWork      <- -u for upstream????
$ git status
On branch tmpWork
Your branch is up to date with 'origin/tmpWork'.

nothing to commit, working tree clean
